{"pages":[{"title":"Categories","date":"2021-10-25T08:46:44.318Z","path":"categories/index.html","text":""},{"title":"About","date":"2021-10-25T10:00:52.042Z","path":"about/index.html","text":"hello world"},{"title":"Tags","date":"2021-10-25T08:46:51.302Z","path":"tags/index.html","text":""}],"posts":[{"title":"48.旋转数组","date":"2021-10-26T04:21:45.745Z","path":"wiki/算法/Leetcode/数组/48.旋转数组/","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445// 通过辅助数组进行实现 public void rotate(int[][] matrix) &#123; int[][] totataMatrix = new int[matrix.length][matrix.length] ; int i = 0 , j = 0 , len = matrix.length; for(i = 0 ; i &lt; len ; i++)&#123; for(j = 0 ; j &lt; len ; j++)&#123; totataMatrix[j][len-i-1] = matrix[i][j]; &#125; &#125; for(i = 0 ; i &lt; len ; i++)&#123; for(j = 0 ; j &lt; len ; j++)&#123; matrix[i][j] = totataMatrix[i][j]; &#125; &#125; &#125; // 如果需要原地旋转，那就必须需要考虑数组下标之间的关系，然后进行旋转操作 public void rotateTwo(int[][] matrix) &#123; int i = 0 , j = 0 , len = matrix.length; for(i = 0 ; i &lt; len / 2; i++)&#123; for(j = 0 ; j &lt; (len+1) /2 ; j++)&#123; int temp = matrix[i][j] ; matrix[i][j] = matrix[len-j-1][i] ; matrix[len-j-1][i] = matrix[len-i-1][len-j-1] ; matrix[len-i-1][len-j-1] = matrix[j][len-i-1] ; matrix[j][len-i-1] = temp ; &#125; &#125; &#125; // 数组选择90度又可以转换为数组翻转问题，首先进行上下翻转，然后再根据主对角线进行翻转。 public void rotateThree(int[][] matrix) &#123; int i = 0 , j = 0 , len = matrix.length; for(i = 0 ; i &lt; len / 2; i++)&#123; for(j = 0 ; j &lt; (len+1) /2 ; j++)&#123; int temp = matrix[i][j] ; matrix[i][j] = matrix[len-j-1][i] ; matrix[len-j-1][i] = matrix[len-i-1][len-j-1] ; matrix[len-i-1][len-j-1] = matrix[j][len-i-1] ; matrix[j][len-i-1] = temp ; &#125; &#125; &#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"http://example.com/tags/%E6%95%B0%E7%BB%84/"}],"categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"算法/Leetcode","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/Leetcode/"},{"name":"数组","slug":"算法/Leetcode/数组","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"}]},{"title":"36.有效数独","date":"2021-10-26T02:09:42.061Z","path":"wiki/算法/Leetcode/数组/36.有效数独/","text":"1234567891011121314151617181920212223242526272829303132333435public boolean isValidSudokuTwo(char[][] board) &#123; int i = 0 , j = 0 , k = 0 , l = 0 , idx ; HashMap&lt;Integer, HashSet&lt;Character&gt;&gt; area = new HashMap&lt;Integer, HashSet&lt;Character&gt;&gt;() ; //判断行列是否符合数独条件 for(i = 0 ; i &lt; board.length ; i++)&#123; HashMap&lt;Character, Integer&gt; row = new HashMap&lt;Character, Integer&gt;() ; HashMap&lt;Character, Integer&gt; col = new HashMap&lt;Character, Integer&gt;() ; for(j = 0 ; j &lt; board.length ; j++)&#123; if(board[i][j] != &#x27;.&#x27;)&#123; if(row.containsKey(board[i][j]))&#123; return false; &#125;else&#123; row.put(board[i][j],1) ; &#125; &#125; if(board[j][i] != &#x27;.&#x27;)&#123; if(col.containsKey(board[j][i]))&#123; return false; &#125;else&#123; col.put(board[j][i],1) ; &#125; &#125; idx = (i/3)*3 + j/3 ; if(!area.containsKey(idx))&#123; area.put(idx,new HashSet&lt;Character&gt;()) ; &#125; if(area.get(idx).contains(board[i][j]))&#123; return false; &#125;else&#123; area.get(idx).add(board[i][j]) ; &#125; &#125; &#125; return true ; &#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"http://example.com/tags/%E6%95%B0%E7%BB%84/"}],"categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"算法/Leetcode","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/Leetcode/"},{"name":"数组","slug":"算法/Leetcode/数组","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"}]},{"title":"tets","date":"2021-10-25T12:10:40.000Z","path":"wiki/tets/","text":"","tags":[],"categories":[]},{"title":"Git常见的问题及解决方案","date":"2021-10-25T11:43:34.168Z","path":"wiki/程序技术/Git/问题/","text":"1. 当能够正常运行的项目突然无法运行，出现找不到资源文件错误的时候。首先，能运行就标明项目本身并没有问题。对于资源文件找不到，可能就和系统的缓存加载有关。 所以这个时候，可以对项目的依赖文件进行重新的审查，如果没有问题，再查看依赖是否有问题。对于Maven项目的依赖问题，可以重新clean被依赖的工程，再重新install被依赖的工程。重新加载资源文件。 2. git提交代码到Github时候，出现fatal: unable to access ‘https://github.com/zzcpage/zzcpage.github.io.git/&#39;: OpenSSL SSL_read: Connection was reset, errno 10054产生的原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以才报错。 解决方法：解除ssl验证后，再次git即可。 通过git config –global http.sslVerify “false”命令进行解除SSL验证，解除完之后，再次Git即可提交成功。","tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"},{"name":"Bug解决方案","slug":"Bug解决方案","permalink":"http://example.com/tags/Bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"categories":[{"name":"程序技术","slug":"程序技术","permalink":"http://example.com/categories/%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF/"},{"name":"Git","slug":"程序技术/Git","permalink":"http://example.com/categories/%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF/Git/"}]},{"title":"Hello World","date":"2021-10-25T08:23:20.423Z","path":"wiki/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[]}]}