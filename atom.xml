<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-08T06:41:02.235Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ZZC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python常见问题</title>
    <link href="http://example.com/wiki/%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF/Python/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/wiki/程序技术/Python/常见问题/</id>
    <published>2021-12-08T06:36:41.000Z</published>
    <updated>2021-12-08T06:41:02.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python：常遇见的字符编码问题-TypeError-a-bytes-like-object-is-required-not-‘str’"><a href="#Python：常遇见的字符编码问题-TypeError-a-bytes-like-object-is-required-not-‘str’" class="headerlink" title="Python：常遇见的字符编码问题 TypeError: a bytes-like object is required, not ‘str’"></a>Python：常遇见的字符编码问题 TypeError: a bytes-like object is required, not ‘str’</h3><p>需要将写入的数据进行编码转换(通过encode转化)。例如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.write(line.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python：常遇见的字符编码问题-TypeError-a-bytes-like-object-is-required-not-‘str’&quot;&gt;&lt;a href=&quot;#Python：常遇见的字符编码问题-TypeError-a-bytes-like-object-is-
      
    
    </summary>
    
      <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb后端数据导出</title>
    <link href="http://example.com/wiki/%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF/Java/JavaWeb/%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA/"/>
    <id>http://example.com/wiki/程序技术/Java/JavaWeb/数据导出/</id>
    <published>2021-12-06T07:07:34.071Z</published>
    <updated>2021-12-06T09:11:19.936Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>我们在进行页面开发的过程中，经常需要获取数据，以及下载数据。通常从页面下载数据有多种方式，可以生成PDF下载，可以生成Excel表格下载。<br>这里介绍这几种数据下载方式。</p><h6 id="PDF下载"><a href="#PDF下载" class="headerlink" title="PDF下载"></a>PDF下载</h6><h6 id="Excel下载"><a href="#Excel下载" class="headerlink" title="Excel下载"></a>Excel下载</h6><p>Java比较常用的Excel导入和导出技术有两种，Jakarta POI和Java Excel。Jakarta POI 是一套用于访问微软格式文档的Java API。Jakarta POI有不少组件组成，其中有用于操做Excel格式文件的HSSF和用于操做Word的HWPF，在各类组件中目前只有用于操做Excel的HSSF相对成熟。官方主页<a href="http://poi.apache.org/index.html，API文档http://poi.apache.org/apidocs/index.htmlapi。这里主要介绍Jakarta">http://poi.apache.org/index.html，API文档http://poi.apache.org/apidocs/index.htmlapi。这里主要介绍Jakarta</a> POI的用法。</p><p>首先是maven依赖<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.17</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.17</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;我们在进行页面开发的过程中，经常需要获取数据，以及下载数据。通常从页面下载数据有多种方式，可以生成PDF下载，可以生成Excel表格下载。&lt;
      
    
    </summary>
    
      <category term="JavaEE" scheme="http://example.com/categories/JavaEE/"/>
    
    
      <category term="Java" scheme="http://example.com/tags/Java/"/>
    
      <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Java中对JSON的操作</title>
    <link href="http://example.com/wiki/%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF/Java/JAVA-Json/"/>
    <id>http://example.com/wiki/程序技术/Java/JAVA-Json/</id>
    <published>2021-12-01T06:56:29.125Z</published>
    <updated>2021-12-01T07:00:13.269Z</updated>
    
    <content type="html"><![CDATA[<p>JSON格式的数据在Web开发中经常作为数据请求格式或数据响应格式，所以对JSON格式的数据的操作十分重要。</p><p>常见的JSON操作主要有以下几种方式，JSON对象转化JSON字符串，JSON字符串转化JSON对象，普通数据对象转换JSON字符串，普通数据对象转换JSON对象。</p><p>常见的JSON第三方库有fastjson,gson等。这里主要以fastjson作为介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JSON格式的数据在Web开发中经常作为数据请求格式或数据响应格式，所以对JSON格式的数据的操作十分重要。&lt;/p&gt;
&lt;p&gt;常见的JSON操作主要有以下几种方式，JSON对象转化JSON字符串，JSON字符串转化JSON对象，普通数据对象转换JSON字符串，普通数据对象转换
      
    
    </summary>
    
      <category term="程序技术" scheme="http://example.com/categories/%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://example.com/categories/%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>抖店开发--订单导出之信息获取</title>
    <link href="http://example.com/wiki/%E6%8A%96%E5%BA%97API%E5%BC%80%E5%8F%91/%E8%AE%A2%E5%8D%95%E5%AF%BC%E5%87%BA/"/>
    <id>http://example.com/wiki/抖店API开发/订单导出/</id>
    <published>2021-12-01T04:38:34.647Z</published>
    <updated>2021-12-01T05:05:30.709Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以通过订单列表查询API获取到店铺的订单列表。根据需要获取的信息和抖店API查询到的结果，做如下表格，用于获取对应参数。响应格式如下所示：</p><p><img src="/images/响应.PNG" alt="a1"></p><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">获取方式</th><th style="text-align:center">获取结果</th></tr></thead><tbody><tr><td style="text-align:center">主订单编号</td><td style="text-align:center">order_id</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">选购商品</td><td style="text-align:center">product_name</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">商品规格</td><td style="text-align:center">order_type_desc</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">订单应付金额</td><td style="text-align:center">order_amount</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">收件人</td><td style="text-align:center">encrypt_post_receiver</td><td style="text-align:center">加密</td></tr><tr><td style="text-align:center">收件人手机号</td><td style="text-align:center">encrypt_post_tel</td><td style="text-align:center">加密</td></tr><tr><td style="text-align:center">详细地址</td><td style="text-align:center">post_addr省，市，区县，街道可获取，详细地址（encrypt_detail）</td><td style="text-align:center">部分加密</td></tr><tr><td style="text-align:center">买家留言</td><td style="text-align:center">buyer_words</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">订单提交时间</td><td style="text-align:center">create_time</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">订单状态</td><td style="text-align:center">order_status</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">承若发货时间</td><td style="text-align:center">appointment_ship_time</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">商家备注</td><td style="text-align:center">seller_words</td><td style="text-align:center">可获取</td></tr><tr><td style="text-align:center">身份证姓名</td><td style="text-align:center">user_id_info.encrypt_id_card_name</td><td style="text-align:center">加密</td></tr><tr><td style="text-align:center">身份证号</td><td style="text-align:center">user_id_info.encrypt_id_card_no</td><td style="text-align:center">加密</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们可以通过订单列表查询API获取到店铺的订单列表。根据需要获取的信息和抖店API查询到的结果，做如下表格，用于获取对应参数。响应格式如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/响应.PNG&quot; alt=&quot;a1&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;table
      
    
    </summary>
    
      <category term="抖店" scheme="http://example.com/categories/%E6%8A%96%E5%BA%97/"/>
    
    
      <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/wiki/%E7%88%AC%E8%99%AB/Untitled-1/"/>
    <id>http://example.com/wiki/爬虫/Untitled-1/</id>
    <published>2021-11-26T01:21:47.277Z</published>
    <updated>2021-11-28T08:26:07.554Z</updated>
    
    <content type="html"><![CDATA[/*@cc_on(function(m,c){var z="abbr|article|aside|audio|canvas|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video";function n(d){for(var a=-1;++a<o;)d.createElement(i[a])}function p(d,a){for(var e=-1,b=d.length,j,q=[];++e<b;){j=d[e];if((a=j.media||a)!="screen")q.push(p(j.imports,a),j.cssText)}return q.join("")}var g=c.createElement("div");g.innerHTML="<z>i</z>";if(g.childNodes.length!==1){var i=z.split("|"),o=i.length,s=RegExp("(^|\\s)("+z+")","gi"),t=RegExp("<(/*)("+z+")","gi"),u=RegExp("(^|[^\\n]*?\\s)("+z+")([^\\n]*)({[\\n\\w\\W]*?})","gi"),r=c.createDocumentFragment(),k=c.documentElement;g=k.firstChild;var h=c.createElement("body"),l=c.createElement("style"),f;n(c);n(r);g.insertBefore(l,g.firstChild);l.media="print";m.attachEvent("onbeforeprint",function(){var d=-1,a=p(c.styleSheets,"all"),e=[],b;for(f=f||c.body;(b=u.exec(a))!=null;)e.push((b[1]+b[2]+b[3]).replace(s,"$1.iepp_$2")+b[4]);for(l.styleSheet.cssText=e.join("\n");++d<o;){a=c.getElementsByTagName(i[d]);e=a.length;for(b=-1;++b<e;)if(a[b].className.indexOf("iepp_")<0)a[b].className+=" iepp_"+i[d]}r.appendChild(f);k.appendChild(h);h.className=f.className;h.innerHTML=f.innerHTML.replace(t,"<$1font")});m.attachEvent("onafterprint",function(){h.innerHTML="";k.removeChild(h);k.appendChild(f);l.styleSheet.cssText=""})}})(this,document);@*/var baidu = baidu || { version: "1-3" };baidu.guid = "$BAIDU$";window[baidu.guid] = window[baidu.guid] || {};baidu.browser = baidu.browser || {};baidu.browser.isGecko = /gecko/i.test(navigator.userAgent) && !/like gecko/i.test(navigator.userAgent);baidu.browser.isStrict = document.compatMode == "CSS1Compat";if ((/(\d+\.\d)(\.\d)?\s+safari/i.test(navigator.userAgent) && !/chrome/i.test(navigator.userAgent))) { baidu.browser.safari = parseFloat(RegExp["\x241"]) }if (/opera\/(\d+\.\d)/i.test(navigator.userAgent)) { baidu.browser.opera = parseFloat(RegExp["\x241"]) }if (/chrome\/(\d+\.\d)/i.test(navigator.userAgent)) { baidu.browser.chrome = parseFloat(RegExp["\x241"]) }if (/msie (\d+\.\d)/i.test(navigator.userAgent)) { baidu.ie = baidu.browser.ie = document.documentMode || parseFloat(RegExp["\x241"]) }try { if (/(\d+\.\d)/.test(external.max_version)) { baidu.browser.maxthon = parseFloat(RegExp["\x241"]) } } catch (e) {}baidu.browser.isWebkit = /webkit/i.test(navigator.userAgent);if (/firefox\/(\d+\.\d)/i.test(navigator.userAgent)) { baidu.browser.firefox = parseFloat(RegExp["\x241"]) }baidu.number = baidu.number || {};baidu.number.pad = function(d, f) {    var c = "",        g = (d < 0),        a = String(Math.abs(d));    if (a.length < f) { c = (new Array(f - a.length + 1)).join("0") }    return (g ? "-" : "") + c + a};baidu.number.comma = function(d, f) {    var c = String(d).split("."),        a = c[0].split("").reverse().join(""),        g;    if (!f || f < 1) { f = 3 }    g = new RegExp("\\d{" + f + "}", "g");    a = a.replace(g, function(h) { return h + "," }).split("").reverse().join("");    if (a.charAt(0) == ",") { a = a.slice(1) }    c[0] = a;    return c.join(".")};baidu.url = baidu.url || {};baidu.url.escapeSymbol = function(a) { return String(a).replace(/\%/g, "%25").replace(/&/g, "%26").replace(/\+/g, "%2B").replace(/\ /g, "%20").replace(/\//g, "%2F").replace(/\#/g, "%23").replace(/\=/g, "%3D") };baidu.string = baidu.string || {};baidu.string.escapeReg = function(a) { return String(a).replace(new RegExp("([.*+?^=!:\x24{}()|[\\]/\\\\])", "g"), "\\\x241") };baidu.url.getQueryValue = function(f, d) { var c = new RegExp("(^|&|\\?|#)" + baidu.string.escapeReg(d) + "=([^&]*)(&|\x24)", ""); var a = f.match(c); if (a) { return a[2] } return null };baidu.url.jsonToQuery = function(f, g) {    var j = [],        a = 0,        h, c, d;    g = g || function(k) { return baidu.url.escapeSymbol(k) };    for (h in f) { if (f.hasOwnProperty(h)) { c = f[h]; if (Object.prototype.toString.call(c) == "[object Array]") { d = c.length; while (d--) { j[a++] = h + "=" + g(c[d], h) } } else { j[a++] = h + "=" + g(c, h) } } }    return j.join("&")};baidu.url.queryToJson = function(f) {    var l = f.substr(f.indexOf("?") + 1),        c = l.split("&"),        a = c.length,        g = {},        j, k, h, d;    for (i = 0; i < a; i++) {        d = c[i].split("=");        j = d[0];        k = d[1];        h = g[j];        if ("undefined" == typeof h) { g[j] = k } else { if (Object.prototype.toString.call(h) == "[object Array]") { h.push(k) } else { g[j] = [h, k] } }    }    return g};baidu.cookie = baidu.cookie || {};baidu.cookie._isValidKey = function(a) { return (new RegExp('^[^\\x00-\\x20\\x7f\\(\\)<>@,;:\\\\\\"\\[\\]\\?=\\{\\}\\/\\u0080-\\uffff]+\x24')).test(a) };baidu.cookie.setRaw = function(d, c, f) {    if (!baidu.cookie._isValidKey(d)) { return }    f = f || {};    var a = f.expires;    if ("number" == typeof f.expires) {        a = new Date();        a.setTime(a.getTime() + f.expires)    }    document.cookie = d + "=" + c + (f.path ? "; path=" + f.path : "") + (a ? "; expires=" + a.toGMTString() : "") + (f.domain ? "; domain=" + f.domain : "") + (f.secure ? "; secure" : "")};baidu.cookie.getRaw = function(d) {    if (baidu.cookie._isValidKey(d)) {        var c = new RegExp("(^| )" + d + "=([^;]*)(;|\x24)"),            a = c.exec(document.cookie);        if (a) { return a[2] || null }    }    return null};baidu.cookie.get = function(a) { var c = baidu.cookie.getRaw(a); if ("string" == typeof c) { c = decodeURIComponent(c); return c } return null };baidu.cookie.set = function(d, c, a) { baidu.cookie.setRaw(d, encodeURIComponent(c), a) };baidu.cookie.remove = function(c, a) {    a = a || {};    a.expires = new Date(0);    baidu.cookie.setRaw(c, "", a)};baidu.json = baidu.json || {};baidu.json.parse = function(a) { if (!/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) { return null } return window.JSON && window.JSON.parse ? window.JSON.parse(a) : (new Function("return " + a))() };baidu.json.stringify = (function() {    var g = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" };    function a(h) {        if (/["\\\x00-\x1f]/.test(h)) {            h = h.replace(/["\\\x00-\x1f]/g, function(k) {                var j = g[k];                if (j) { return j }                j = k.charCodeAt();                return "\\u00" + Math.floor(j / 16).toString(16) + (j % 16).toString(16)            })        }        return '"' + h + '"'    }    function d(h) {        var m = ["["],            l = h.length,            n, k, j;        for (k = 0; k < l; k++) {            j = h[k];            switch (typeof j) {                case "undefined":                case "function":                case "unknown":                    break;                default:                    if (n) { m.push(",") }                    m.push(baidu.json.stringify(j));                    n = 1            }        }        m.push("]");        return m.join("")    }    function f(h) { return h < 10 ? "0" + h : h }    function c(h) { return '"' + h.getFullYear() + "-" + f(h.getMonth() + 1) + "-" + f(h.getDate()) + "T" + f(h.getHours()) + ":" + f(h.getMinutes()) + ":" + f(h.getSeconds()) + '"' }    return function(h) {        switch (typeof h) {            case "undefined":                return "undefined";            case "number":                return isFinite(h) ? String(h) : "null";            case "string":                return a(h);            case "boolean":                return String(h);            default:                if (h === null) { return "null" } else {                    if (h instanceof Array) { return d(h) } else {                        if (h instanceof Date) { return c(h) } else {                            var l = ["{"],                                j = baidu.json.stringify,                                m, k;                            for (key in h) {                                if (h.hasOwnProperty(key)) {                                    k = h[key];                                    switch (typeof k) {                                        case "undefined":                                        case "unknown":                                        case "function":                                            break;                                        default:                                            if (m) { l.push(",") }                                            m = 1;                                            l.push(j(key) + ":" + j(k))                                    }                                }                            }                            l.push("}");                            return l.join("")                        }                    }                }        }    }})();baidu.json.encode = function(a) { return baidu.json.stringify(a) };baidu.json.decode = function(a) { return baidu.json.parse(a) };baidu.date = baidu.date || {};baidu.date.format = function(f, l) {    if ("string" != typeof l) { return f.toString() }    function a(n, o) { l = l.replace(n, o) }    var d = baidu.number.pad,        k = f.getFullYear(),        m = f.getMonth() + 1,        g = f.getDate(),        j = f.getHours(),        c = f.getMinutes(),        h = f.getSeconds();    a(/yyyy/g, d(k, 4));    a(/yy/g, d(k.toString().slice(2), 2));    a(/MM/g, d(m, 2));    a(/M/g, m);    a(/dd/g, d(g, 2));    a(/d/g, g);    a(/HH/g, d(j, 2));    a(/H/g, j);    a(/hh/g, d(j % 12, 2));    a(/h/g, j % 12);    a(/mm/g, d(c, 2));    a(/m/g, c);    a(/ss/g, d(h, 2));    a(/s/g, h);    return l};baidu.date.parse = function(f) {    var a = new RegExp("^\\d+(\\-|\\/)\\d+(\\-|\\/)\\d+\x24");    if ("string" == typeof f) {        if (a.test(f) || isNaN(Date.parse(f))) {            var c = f.split(/ |T/),                g = c.length > 1 ? c[1].split(/[^\d]/) : [0, 0, 0],                d = c[0].split(/[^\d]/);            return new Date(d[0] - 0, d[1] - 1, d[2] - 0, g[0] - 0, g[1] - 0, g[2] - 0)        } else { return new Date(f) }    }    return new Date()};baidu.dom = baidu.dom || {};baidu.dom._styleFilter = baidu.dom._styleFilter || [];baidu.dom._styleFilter[baidu.dom._styleFilter.length] = {    get: function(f, d) {        if (/color/i.test(f) && d.indexOf("rgb(") != -1) {            var c = d.split(",");            d = "#";            for (var g = 0, a; a = c[g]; g++) {                a = parseInt(a.replace(/[^\d]/gi, ""), 10).toString(16);                d += a.length == 1 ? "0" + a : a            }            d = d.toUpperCase()        }        return d    }};baidu.dom._styleFilter.filter = function(h, d, c) { for (var a = 0, f = baidu.dom._styleFilter, g; g = f[a]; a++) { if (g = g[c]) { d = g(h, d) } } return d };baidu.dom._styleFilter[baidu.dom._styleFilter.length] = { set: function(a, c) { if (c.constructor == Number && !/zIndex|fontWeight|opacity|zoom|lineHeight/i.test(a)) { c = c + "px" } return c } };baidu.dom._styleFixer = baidu.dom._styleFixer || {};baidu.dom._styleFixer.display = baidu.browser.ie && baidu.browser.ie < 8 ? {    set: function(a, c) {        a = a.style;        if (c == "inline-block") {            a.display = "inline";            a.zoom = 1        } else { a.display = c }    }} : baidu.browser.firefox && baidu.browser.firefox < 3 ? { set: function(a, c) { a.style.display = c == "inline-block" ? "-moz-inline-box" : c } } : null;baidu.dom._styleFixer["float"] = baidu.browser.ie ? "styleFloat" : "cssFloat";baidu.dom._styleFixer.opacity = baidu.browser.ie ? {    get: function(a) {        var c = a.style.filter;        c && c.indexOf("opacity=") >= 0 ? (parseFloat(c.match(/opacity=([^)]*)/)[1]) / 100) + "" : "1"    },    set: function(a, c) {        var d = a.style;        d.filter = (d.filter || "").replace(/alpha\([^\)]*\)/gi, "") + (c == 1 ? "" : "alpha(opacity=" + c * 100 + ")");        d.zoom = 1    }} : null;baidu.dom._styleFixer.textOverflow = (function() {    var f = {};    function a(h) {        var g = h.length;        if (g > 0) {            g = h[g - 1];            h.length--        } else { g = null }        return g    }    function d(h, g) { h[baidu.browser.firefox ? "textContent" : "innerText"] = g }    function c(n, s, j) {        var q = baidu.browser.ie ? n.currentStyle || n.style : getComputedStyle(n, null),            k = q.fontWeight,            l = "font-family:" + q.fontFamily + ";font-size:" + q.fontSize + ";word-spacing:" + q.wordSpacing + ";font-weight:" + ((parseInt(k) || 0) == 401 ? 700 : k) + ";font-style:" + q.fontStyle + ";font-variant:" + q.fontVariant,            v = f[l];        if (!v) {            q = n.appendChild(document.createElement("div"));            q.style.cssText = "float:left;" + l;            v = f[l] = [];            for (o = 0; o < 256; o++) {                o == 32 ? (q.innerHTML = "&nbsp;") : d(q, String.fromCharCode(o));                v[o] = q.offsetWidth            }            d(q, "一");            v[256] = q.offsetWidth;            d(q, "一一");            v[257] = q.offsetWidth - v[256] * 2;            v[258] = v[".".charCodeAt(0)] * 3 + v[257] * 3;            n.removeChild(q)        }        for (var p = n.firstChild, m = v[256], t = v[257], u = v[258], g = [], j = j ? u : 0; p; p = p.nextSibling) {            if (s < j) { n.removeChild(p) } else {                if (p.nodeType == 3) {                    for (var o = 0, h = p.nodeValue, r = h.length; o < r; o++) {                        q = h.charCodeAt(o);                        g[g.length] = [s, p, o];                        s -= (o ? t : 0) + (q < 256 ? v[q] : m);                        if (s < j) { break }                    }                } else {                    q = p.tagName;                    if (q == "IMG" || q == "TABLE") {                        q = p;                        p = p.previousSibling;                        n.removeChild(q)                    } else {                        g[g.length] = [s, p];                        s -= p.offsetWidth                    }                }            }        }        if (s < j) {            while (q = a(g)) {                s = q[0];                p = q[1];                q = q[2];                if (p.nodeType == 3) { if (s >= u) { p.nodeValue = p.nodeValue.substring(0, q) + "..."; return true } else { if (!q) { n.removeChild(p) } } } else { if (c(p, s, true)) { return true } else { n.removeChild(p) } }            }            n.innerHTML = ""        }    }    return {        get: function(h, g) { var j = baidu.browser; return (j.opera ? g.OTextOverflow : j.firefox ? h._baiduOverflow : g.textOverflow) || "clip" },        set: function(k, h) {            var l = baidu.browser;            if (k.tagName == "TD" || k.tagName == "TH" || l.firefox) {                k._baiduHTML && (k.innerHTML = k._baiduHTML);                if (h == "ellipsis") {                    k._baiduHTML = k.innerHTML;                    var g = document.createElement("div"),                        j = k.appendChild(g).offsetWidth;                    k.removeChild(g);                    c(k, j)                } else { k._baiduHTML = "" }            }            g = k.style;            l.opera ? (g.OTextOverflow = h) : l.firefox ? (k._baiduOverflow = h) : (g.textOverflow = h)        }    }})();baidu.dom.g = function(a) { if ("string" == typeof a || a instanceof String) { return document.getElementById(a) } else { if (a && a.nodeName && (a.nodeType == 1 || a.nodeType == 9)) { return a } } return null };baidu.g = baidu.G = baidu.dom.g;baidu.dom._NAME_ATTRS = (function() {    var a = { cellpadding: "cellPadding", cellspacing: "cellSpacing", colspan: "colSpan", rowspan: "rowSpan", valign: "vAlign", usemap: "useMap", frameborder: "frameBorder" };    if (baidu.browser.ie < 8) {        a["for"] = "htmlFor";        a["class"] = "className"    } else {        a.htmlFor = "for";        a.className = "class"    }    return a})();baidu.dom.setAttr = function(d, a, c) {    d = baidu.dom.g(d);    if ("style" == a) { d.style.cssText = c } else {        a = baidu.dom._NAME_ATTRS[a] || a;        d.setAttribute(a, c)    }    return d};baidu.setAttr = baidu.dom.setAttr;baidu.dom.setAttrs = function(c, a) { c = baidu.dom.g(c); for (var d in a) { baidu.dom.setAttr(c, d, a[d]) } return c };baidu.setAttrs = baidu.dom.setAttrs;baidu.dom.getAttr = function(c, a) {    c = baidu.dom.g(c);    if ("style" == a) { return c.style.cssText }    a = baidu.dom._NAME_ATTRS[a] || a;    return c.getAttribute(a)};baidu.getAttr = baidu.dom.getAttr;baidu.dom._matchNode = function(a, d, c) { a = baidu.dom.g(a); for (var f = a[c]; f; f = f[d]) { if (f.nodeType == 1) { return f } } return null };baidu.dom.prev = function(a) { return baidu.dom._matchNode(a, "previousSibling", "previousSibling") };(function() {    var a = new RegExp("(^[\\s\\t\\xa0\\u3000]+)|([\\u3000\\xa0\\s\\t]+\x24)", "g");    baidu.string.trim = function(c) { return String(c).replace(a, "") }})();baidu.trim = baidu.string.trim;baidu.dom.addClass = function(d, c) {    d = baidu.dom.g(d);    var g = baidu.string.trim,        f = g(c).split(/\s+/),        a = f.length;    c = d.className.split(/\s+/).join(" ");    while (a--) {        (new RegExp("(^| )" + f[a] + "( |\x24)")).test(c) && f.splice(a, 1)    }    d.className = g(c + " " + f.join(" "));    return d};baidu.addClass = baidu.dom.addClass;baidu.dom.hasClass = function(d, c) {    d = baidu.dom.g(d);    var f = baidu.string.trim(c).split(/\s+/),        a = f.length;    c = d.className.split(/\s+/).join(" ");    while (a--) { if (!(new RegExp("(^| )" + f[a] + "( |\x24)")).test(c)) { return false } }    return true};baidu.dom.contains = function(a, d) {    var c = baidu.dom.g;    a = c(a);    d = c(d);    return a.contains ? a != d && a.contains(d) : !!(a.compareDocumentPosition(d) & 16)};baidu.dom.getDocument = function(a) { a = baidu.dom.g(a); return a.nodeType == 9 ? a : a.ownerDocument || a.document };baidu.dom.removeClass = function(d, c) {    d = baidu.dom.g(d);    var a = baidu.string.trim;    d.className = a(d.className.split(/\s+/).join("  ").replace(new RegExp("(^| )(" + a(c).split(/\s+/).join("|") + ")( |\x24)", "g"), " ").replace(/\s+/g, " "));    return d};baidu.removeClass = baidu.dom.removeClass;baidu.dom.children = function(d) { d = baidu.dom.g(d); for (var a = [], c = d.firstChild; c; c = c.nextSibling) { if (c.nodeType == 1) { a.push(c) } } return a };baidu.string.toCamelCase = function(a) { if (a.indexOf("-") < 0 && a.indexOf("_") < 0) { return a } return a.replace(/[-_][^-_]/g, function(c) { return c.charAt(1).toUpperCase() }) };baidu.dom.setStyle = function(f, g, d) {    var c = baidu.dom,        a;    f = c.g(f);    g = baidu.string.toCamelCase(g);    if (a = c._styleFilter) { d = a.filter(g, d, "set") }    a = c._styleFixer[g];    (a && a.set) ? a.set(f, d): (f.style[a || g] = d);    return f};baidu.setStyle = baidu.dom.setStyle;baidu.dom.setStyles = function(d, c) { d = baidu.dom.g(d); for (var a in c) { baidu.dom.setStyle(d, a, c[a]) } return d };baidu.setStyles = baidu.dom.setStyles;baidu.dom.q = function(h, l, d) {    var g = [],        a = baidu.string.trim,        j, k, f, c;    if (!(h = a(h))) { return null }    if ("undefined" == typeof l) { l = document } else { l = baidu.dom.g(l); if (!l) { return g } }    d && (d = a(d).toUpperCase());    if (l.getElementsByClassName) {        f = l.getElementsByClassName(h);        j = f.length;        for (k = 0; k < j; k++) {            c = f[k];            if (d && c.tagName != d) { continue }            g[g.length] = c        }    } else {        h = new RegExp("(^|\\s)" + baidu.string.escapeReg(h) + "(\\s|\x24)");        f = d ? l.getElementsByTagName(d) : (l.all || l.getElementsByTagName("*"));        j = f.length;        for (k = 0; k < j; k++) {            c = f[k];            h.test(c.className) && (g[g.length] = c)        }    }    return g};baidu.q = baidu.Q = baidu.dom.q;baidu.dom.getStyle = function(g, h) {    var c = baidu.dom;    g = c.g(g);    h = baidu.string.toCamelCase(h);    var d = g.style[h];    if (!d) {        var a = c._styleFixer[h],            f = g.currentStyle || (baidu.browser.ie ? g.style : getComputedStyle(g, null));        if ("string" == typeof a) { d = f[a] } else { if (a && a.get) { d = a.get(g, f) } else { d = f[h] } }    }    if (a = c._styleFilter) { d = a.filter(h, d, "get") }    return d};baidu.getStyle = baidu.dom.getStyle;baidu.dom.getPosition = function(c) {    var j = baidu.dom.getDocument(c),        o = baidu.browser,        m = baidu.dom.getStyle;    c = baidu.dom.g(c);    var p = o.isGecko > 0 && j.getBoxObjectFor && m(c, "position") == "absolute" && (c.style.top === "" || c.style.left === "");    var l = { left: 0, top: 0 };    var n = (o.ie && !o.isStrict) ? j.body : j.documentElement;    if (c == n) { return l }    var h = null;    var a, k, d, g;    if (c.getBoundingClientRect) {        a = c.getBoundingClientRect();        l.left = Math.floor(a.left) + Math.max(j.documentElement.scrollLeft, j.body.scrollLeft);        l.top = Math.floor(a.top) + Math.max(j.documentElement.scrollTop, j.body.scrollTop);        l.left -= j.documentElement.clientLeft;        l.top -= j.documentElement.clientTop;        k = j.body;        d = parseInt(m(k, "border-left-width"));        g = parseInt(m(k, "border-top-width"));        if (o.ie && !o.isStrict) {            l.left -= isNaN(d) ? 2 : d;            l.top -= isNaN(g) ? 2 : g        }    } else {        if (j.getBoxObjectFor && !p) {            a = j.getBoxObjectFor(c);            var f = j.getBoxObjectFor(n);            l.left = a.screenX - f.screenX;            l.top = a.screenY - f.screenY        } else {            h = c;            do {                l.left += h.offsetLeft;                l.top += h.offsetTop;                if (o.isWebkit > 0 && m(h, "position") == "fixed") {                    l.left += j.body.scrollLeft;                    l.top += j.body.scrollTop;                    break                }                h = h.offsetParent            } while (h && h != c);            if (o.opera > 0 || (o.isWebkit > 0 && m(c, "position") == "absolute")) { l.top -= j.body.offsetTop }            h = c.offsetParent;            while (h && h != j.body) {                l.left -= h.scrollLeft;                if (!b.opera || h.tagName != "TR") { l.top -= h.scrollTop }                h = h.offsetParent            }        }    }    return l};baidu.dom.intersect = function(c, d) {    var f = baidu.dom.g,        g = baidu.dom.getPosition,        a = Math.max,        j = Math.min;    c = f(c);    d = f(d);    var h = g(c),        k = g(d);    return a(h.left, k.left) <= j(h.left + c.offsetWidth, k.left + d.offsetWidth) && a(h.top, k.top) <= j(h.top + c.offsetHeight, k.top + d.offsetHeight)};baidu.dom.last = function(a) { return baidu.dom._matchNode(a, "previousSibling", "lastChild") };baidu.dom.ready = function() {    var f = false,        c = false,        d = [];    function a() { if (!f) { f = true; for (var h = 0, j = d.length; h < j; h++) { d[h]() } } }    function g() {        if (c) { return }        c = true;        var h = document,            k = window,            l = baidu.browser.opera;        if (h.addEventListener && !l) {            h.addEventListener("DOMContentLoaded", l ? function() {                if (f) { return }                for (var m = 0; m < h.styleSheets.length; m++) { if (h.styleSheets[m].disabled) { setTimeout(arguments.callee, 0); return } }                a()            } : a, false)        } else {            if (baidu.browser.ie && k == top) {                (function() {                    if (f) { return }                    try { h.documentElement.doScroll("left") } catch (m) { setTimeout(arguments.callee, 0); return }                    a()                })()            } else {                if (baidu.browser.safari) {                    var j;                    (function() {                        if (f) { return }                        if (h.readyState != "loaded" && h.readyState != "complete") { setTimeout(arguments.callee, 0); return }                        if (j === undefined) { j = 0; var p = h.getElementsByTagName("style"); var n = h.getElementsByTagName("link"); if (p) { j += p.length } if (n) { for (var m = 0, o = n.length; m < o; m++) { if (n[m].getAttribute("rel") == "stylesheet") { j++ } } } }                        if (h.styleSheets.length != j) { setTimeout(arguments.callee, 0); return }                        a()                    })()                }            }        }        k.attachEvent ? k.attachEvent("onload", a) : k.addEventListener("load", a, false)    }    return function(h) {        g();        f ? h() : (d[d.length] = h)    }}();baidu.dom.getAncestorByTag = function(c, a) {    c = baidu.dom.g(c);    a = a.toUpperCase();    while ((c = c.parentNode) && c.nodeType == 1) { if (c.tagName == a) { return c } }    return null};baidu.dom.getWindow = function(a) { a = baidu.dom.g(a); var c = baidu.dom.getDocument(a); return c.parentWindow || c.defaultView || null };baidu.dom.getAncestorBy = function(a, c) { a = baidu.dom.g(a); while ((a = a.parentNode) && a.nodeType == 1) { if (c(a)) { return a } } return null };baidu.dom.hide = function(a) {    a = baidu.dom.g(a);    a.style.display = "none";    return a};baidu.hide = baidu.dom.hide;baidu.dom.next = function(a) { return baidu.dom._matchNode(a, "nextSibling", "nextSibling") };baidu.dom.show = function(a) {    a = baidu.dom.g(a);    a.style.display = "";    return a};baidu.show = baidu.dom.show;baidu.dom.toggle = function(a) {    a = baidu.dom.g(a);    a.style.display = a.style.display == "none" ? "" : "none";    return a};baidu.dom._g = function(a) { if ("string" == typeof a || a instanceof String) { return document.getElementById(a) } return a };baidu._g = baidu.dom._g;baidu.dom.insertAfter = function(c, d) {    var f, a;    f = baidu.dom._g;    c = f(c);    d = f(d);    a = d.parentNode;    if (a) { a.insertBefore(c, d.nextSibling) }    return c};baidu.dom.first = function(a) { return baidu.dom._matchNode(a, "nextSibling", "firstChild") };baidu.dom.insertBefore = function(c, d) {    var f, a;    f = baidu.dom._g;    c = f(c);    d = f(d);    a = d.parentNode;    if (a) { a.insertBefore(c, d) }    return c};baidu.dom.insertHTML = function(f, a, g) {    f = baidu.dom.g(f);    if (f.insertAdjacentHTML) { f.insertAdjacentHTML(a, g) } else {        var j = f.ownerDocument.createRange();        j.setStartBefore(f);        var h = j.createContextualFragment(g),            c = f.parentNode,            d;        switch (a.toUpperCase()) {            case "BEFOREBEGIN":                c.insertBefore(h, f);                break;            case "AFTERBEGIN":                f.insertBefore(h, f.firstChild);                break;            case "BEFOREEND":                f.appendChild(h);                break;            case "AFTEREND":                (d = f.nextSibling) ? c.insertBefore(h, d): c.appendChild(h)        }    }    return f};baidu.insertHTML = baidu.dom.insertHTML;baidu.dom.remove = function(a) {    a = baidu.dom.g(a);    (tmpEl = a.parentNode) && tmpEl.removeChild(a)};baidu.dom.getAncestorByClass = function(a, c) {    a = baidu.dom.g(a);    c = new RegExp("(^|\\s)" + baidu.string.trim(c) + "(\\s|\x24)");    while ((a = a.parentNode) && a.nodeType == 1) { if (c.test(a.className)) { return a } }    return null};baidu.lang = baidu.lang || {};window[baidu.guid]._instances = window[baidu.guid]._instances || {};baidu.lang.instance = function(a) { return window[baidu.guid]._instances[a] || null };baidu.lang.isNumber = function(a) { return "[object Number]" == Object.prototype.toString.call(a) };baidu.lang.guid = function() { return "TANGRAM__" + (window[baidu.guid]._counter++).toString(36) };window[baidu.guid]._counter = window[baidu.guid]._counter || 1;baidu.lang.Class = function(a) {    this.guid = a || baidu.lang.guid();    window[baidu.guid]._instances[this.guid] = this};window[baidu.guid]._instances = window[baidu.guid]._instances || {};baidu.lang.Class.prototype.dispose = function() {    delete window[baidu.guid]._instances[this.guid];    for (var a in this) { if (typeof this[a] != "function") { delete this[a] } }    this.disposed = true};baidu.lang.Class.prototype.toString = function() { return "[object " + (this._className || "Object") + "]" };baidu.lang.inherits = function(c, f, g) {    var h, d, a = c.prototype,        j = new Function();    j.prototype = f.prototype;    d = c.prototype = new j();    for (h in a) { d[h] = a[h] }    c.prototype.constructor = c;    c.superClass = f.prototype;    if ("string" == typeof g) { d._className = g }};baidu.inherits = baidu.lang.inherits;baidu.lang.isElement = function(a) { return !!(a && a.nodeName && a.nodeType == 1) };baidu.lang.module = function(name, module, owner) {    var packages = name.split("."),        len = packages.length - 1,        packageName, i = 0;    if (!owner) {        try {            if (!(new RegExp("^[a-zA-Z_\x24][a-zA-Z0-9_\x24]*\x24")).test(packages[0])) { throw "" }            owner = eval(packages[0]);            i = 1        } catch (e) { owner = window }    }    for (; i < len; i++) {        packageName = packages[i];        if (!owner[packageName]) { owner[packageName] = {} }        owner = owner[packageName]    }    if (!owner[packages[len]]) { owner[packages[len]] = module }};baidu.lang.decontrol = function(c) {    var a = window[baidu.guid];    a._instances && (delete a._instances[c])};baidu.lang.isArray = function(a) { return "[object Array]" == Object.prototype.toString.call(a) };baidu.lang.Event = function(a, c) {    this.type = a;    this.returnValue = true;    this.target = c || null;    this.currentTarget = null};baidu.lang.Class.prototype.addEventListener = function(d, f, g) {    if (typeof f != "function") { return }!this.__listeners && (this.__listeners = {});    var a = this.__listeners,        c;    if (typeof g == "string" && g) {        if (/[^\w\-]/.test(g)) { throw ("nonstandard key:" + g) } else {            f.hashCode = g;            c = g        }    }    d.indexOf("on") != 0 && (d = "on" + d);    typeof a[d] != "object" && (a[d] = {});    c = c || baidu.lang.guid();    f.hashCode = c;    a[d][c] = f};baidu.lang.Class.prototype.removeEventListener = function(c, d) {    if (typeof d == "function") { d = d.hashCode } else { if (typeof d != "string") { return } }!this.__listeners && (this.__listeners = {});    c.indexOf("on") != 0 && (c = "on" + c);    var a = this.__listeners;    if (!a[c]) { return }    a[c][d] && delete a[c][d]};baidu.lang.Class.prototype.dispatchEvent = function(d, a) {    if ("string" == typeof d) { d = new baidu.lang.Event(d) }!this.__listeners && (this.__listeners = {});    a = a || {};    for (var f in a) { typeof d[f] == "undefined" && (d[f] = a[f]) }    var f, g = this.__listeners,        c = d.type;    d.target = d.target || this;    d.currentTarget = this;    c.indexOf("on") != 0 && (c = "on" + c);    typeof this[c] == "function" && this[c].apply(this, arguments);    if (typeof g[c] == "object") { for (f in g[c]) { g[c][f].apply(this, arguments) } }    return d.returnValue};baidu.lang.isObject = function(a) { return "function" == typeof a || !!(a && "object" == typeof a) };baidu.isObject = baidu.lang.isObject;baidu.lang.isString = function(a) { return "[object String]" == Object.prototype.toString.call(a) };baidu.isString = baidu.lang.isString;baidu.event = baidu.event || {};baidu.event.getPageX = function(d) {    var a = d.pageX,        c = document;    if (!a && a !== 0) { a = (d.clientX || 0) + (c.documentElement.scrollLeft || c.body.scrollLeft) }    return a};baidu.event.getPageY = function(d) {    var a = d.pageY,        c = document;    if (!a && a !== 0) { a = (d.clientY || 0) + (c.documentElement.scrollTop || c.body.scrollTop) }    return a};baidu.event.stopPropagation = function(a) { if (a.stopPropagation) { a.stopPropagation() } else { a.cancelBubble = true } };baidu.event.preventDefault = function(a) { if (a.preventDefault) { a.preventDefault() } else { a.returnValue = false } };baidu.event.stop = function(a) {    var c = baidu.event;    c.stopPropagation(a);    c.preventDefault(a)};baidu.event.getTarget = function(a) { return a.target || a.srcElement };baidu.event.EventArg = function(f, c) {    c = c || window;    f = f || c.event;    var d = c.document;    this.target = f.target || f.srcElement;    this.keyCode = f.which || f.keyCode;    for (var a in f) { var g = f[a]; if ("function" != typeof g) { this[a] = g } }    if (!this.pageX && this.pageX !== 0) {        this.pageX = (f.clientX || 0) + (d.documentElement.scrollLeft || d.body.scrollLeft);        this.pageY = (f.clientY || 0) + (d.documentElement.scrollTop || d.body.scrollTop)    }    this._event = f};baidu.event.EventArg.prototype.preventDefault = function() { if (this._event.preventDefault) { this._event.preventDefault() } else { this._event.returnValue = false } return this };baidu.event.EventArg.prototype.stopPropagation = function() { if (this._event.stopPropagation) { this._event.stopPropagation() } else { this._event.cancelBubble = true } return this };baidu.event.EventArg.prototype.stop = function() { return this.stopPropagation().preventDefault() };baidu.event._unload = function() {    var f = baidu.event._listeners,        a = f.length,        g = !!window.removeEventListener,        c, d;    while (a--) {        c = f[a];        if (c[1] == "unload") { continue }        d = c[0];        if (d.removeEventListener) { d.removeEventListener(c[1], c[3], false) } else { if (d.detachEvent) { d.detachEvent("on" + c[1], c[3]) } }    }    if (g) { window.removeEventListener("unload", baidu.event._unload, false) } else { window.detachEvent("onunload", baidu.event._unload) }};if (window.attachEvent) { window.attachEvent("onunload", baidu.event._unload) } else { window.addEventListener("unload", baidu.event._unload, false) }baidu.event._listeners = baidu.event._listeners || [];baidu.event.on = function(g, d, c) {    d = d.replace(/^on/i, "");    g = baidu.dom._g(g);    var f = function(h) { c.call(g, h) },        a = baidu.event._listeners;    a[a.length] = [g, d, c, f];    if (g.addEventListener) { g.addEventListener(d, f, false) } else { if (g.attachEvent) { g.attachEvent("on" + d, f) } }    return g};baidu.on = baidu.event.on;baidu.event.get = function(a, c) { return new baidu.event.EventArg(a, c) };baidu.event.un = function(h, g, d) {    h = baidu.dom.g(h);    g = g.replace(/^on/i, "");    var j = baidu.event._listeners,        a = j.length,        c = !d,        f;    while (a--) {        f = j[a];        if (f[1] === g && f[0] === h && (c || f[2] === d)) {            if (h.removeEventListener) { h.removeEventListener(g, f[3], false) } else { if (h.detachEvent) { h.detachEvent("on" + g, f[3]) } }            j.splice(a, 1)        }    }    return h};baidu.un = baidu.event.un;baidu.event.getKeyCode = function(a) { return a.which || a.keyCode };baidu.ajax = baidu.ajax || {};baidu.ajax.request = function(a, g) {    function m() {        if (h.readyState == 4) {            try { var s = h.status } catch (t) { r("failure"); return }            r(s);            if ((s >= 200 && s < 300) || s == 304 || s == 1223) { r("success") } else { r("failure") }            window.setTimeout(function() { h.onreadystatechange = new Function(); if (p) { h = null } }, 0)        }    }    function c() { if (window.ActiveXObject) { try { return new ActiveXObject("Msxml2.XMLHTTP") } catch (s) { try { return new ActiveXObject("Microsoft.XMLHTTP") } catch (s) {} } } if (window.XMLHttpRequest) { return new XMLHttpRequest() } }    function r(t) {        t = "on" + t;        var u = d[t],            s = baidu.ajax[t];        if (u) { if (t != "onsuccess") { u(h) } else { u(h, h.responseText) } } else {            if (s) {                if (t == "onsuccess") { return }                s(h)            }        }    }    g = g || {};    var n = g.data || "",        p = !(g.async === false),        o = g.username || "",        j = g.password || "",        f = (g.method || "GET").toUpperCase(),        q = g.headers || {},        d = {},        k, h;    for (k in g) { d[k] = g[k] }    q["X-Request-By"] = "baidu.ajax";    try {        h = c();        if (f == "GET") {            a += (a.indexOf("?") >= 0 ? "&" : "?");            if (n) {                a += n + "&";                n = null            }            if (g.noCache) { a += "b" + (new Date()).getTime() + "=1" }        }        if (o) { h.open(f, a, p, o, j) } else { h.open(f, a, p) }        if (p) { h.onreadystatechange = m }        if (f == "POST") { h.setRequestHeader("Content-Type", "application/x-www-form-urlencoded") }        for (k in q) { if (q.hasOwnProperty(k)) { h.setRequestHeader(k, q[k]) } }        r("beforerequest");        h.send(n);        if (!p) { m() }    } catch (l) { r("failure") }    return h};baidu.ajax.post = function(d, c, a) { return baidu.ajax.request(d, { onsuccess: a, method: "POST", data: c }) };baidu.ajax.get = function(c, a) { return baidu.ajax.request(c, { onsuccess: a }) };baidu.ajax.form = function(v, t) {    t = t || {};    var q = v.elements,        j = q.length,        u = v.getAttribute("method"),        r = v.getAttribute("action"),        a = t.replacer || function(w, x) { return w },        f = {},        c = [],        l, g, d, k, s, p, o, m, n;    function h(x, w) { c.push(x + "=" + w) }    for (l in t) { if (t.hasOwnProperty(l)) { f[l] = t[l] } }    for (l = 0; l < j; l++) {        g = q[l];        k = g.name;        if (!g.disabled && k) {            d = g.type;            s = g.value;            switch (d) {                case "radio":                case "checkbox":                    if (!g.checked) { break }                case "textarea":                case "text":                case "password":                case "hidden":                case "select-one":                    h(k, a(s, k));                    break;                case "select-multiple":                    p = g.options;                    m = p.length;                    for (o = 0; o < m; o++) { n = p[o]; if (n.selected) { h(k, a(n.value, k)) } }                    break            }        }    }    f.data = c.join("&");    f.method = v.getAttribute("method") || "POST";    return baidu.ajax.request(r, f)};baidu.sio = baidu.sio || {};baidu.sio._removeScriptTag = function(c) {    if (c.clearAttributes) { c.clearAttributes() } else { for (var a in c) { if (c.hasOwnProperty(a)) { delete c[a] } } }    if (c && c.parentNode) { c.parentNode.removeChild(c) }    c = null};baidu.sio.callByBrowser = function(g, c, h) {    h = h || {};    var f = document.createElement("SCRIPT"),        j = 0,        a, d = h.charset;    f.onload = f.onreadystatechange = function() {        if (j) { return }        var k = f.readyState;        if ("undefined" == typeof k || k == "loaded" || k == "complete") {            j = 1;            try {                ("function" == typeof c) && c()            } finally { baidu.sio._removeScriptTag(f) }        }    };    f.setAttribute("type", "text/javascript");    d && f.setAttribute("charset", d);    f.setAttribute("src", g);    document.getElementsByTagName("head")[0].appendChild(f)};baidu.sio.callByServer = function(f, h, g) {    g = g || {};    var l = document.createElement("SCRIPT"),        a = "bd__cbs__",        c = typeof h,        j, k, d = g.charset;    if ("string" == c) { j = h } else {        if ("function" == c) {            while (1) {                j = a + Math.floor(Math.random() * 2147483648).toString(36);                if (!window[j]) {                    window[j] = function() {                        try { h.apply(window, arguments) } finally {                            baidu.sio._removeScriptTag(l);                            window[j] = null                        }                    };                    break                }            }        }    }    if ("string" == typeof j) {        f = f.replace(/(\?|&)callback=[^&]*/, "\x241callback=" + j);        if (f.search(/(\?|&)callback=/) < 0) {            f += (f.indexOf("?") < 0 ? "?" : "&");            f += "callback=" + j        }    }    l.setAttribute("type", "text/javascript");    d && l.setAttribute("charset", d);    l.setAttribute("src", f);    document.getElementsByTagName("head")[0].appendChild(l)};baidu.swf = baidu.swf || {};baidu.swf.version = (function() { var c = navigator; if (c.plugins && c.mimeTypes.length) { var g = c.plugins["Shockwave Flash"]; if (g && g.description) { return g.description.replace(/([a-zA-Z]|\s)+/, "").replace(/(\s)+r/, ".") + ".0" } } else { if (window.ActiveXObject && !window.opera) { for (var h = 10; h >= 2; h--) { try { var d = new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + h); if (d) { var a = d.GetVariable("$version"); return a.replace(/WIN/g, "").replace(/,/g, ".") } } catch (f) {} } } } })();baidu.swf.createHTML = function(g) {    g = g || {};    var o = baidu.swf.version,        q = g.ver || "6.0.0",        r, a, s, c, p, h, f = {};    for (c in g) { f[c] = g[c] }    g = f;    if (o) {        o = o.split(".");        q = q.split(".");        for (s = 0; s < 3; s++) {            r = parseInt(o[s], 10);            a = parseInt(q[s], 10);            if (a < r) { break } else { if (a > r) { return "" } }        }    } else { return "" }    var m = g.vars,        n = ["classid", "codebase", "id", "width", "height", "align"];    g.align = g.align || "middle";    g.classid = "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000";    g.codebase = "http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0";    g.movie = g.url || "";    delete g.vars;    delete g.url;    if ("string" == typeof m) { g.flashvars = m } else {        var k = [];        for (c in m) { h = m[c]; if (h) { k.push(c + "=" + encodeURIComponent(h)) } }        g.flashvars = k.join("&")    }    var l = ["<object "];    for (s = 0, p = n.length; s < p; s++) {        h = n[s];        l.push(" ", h, '="', g[h], '"')    }    l.push(">");    var d = { wmode: 1, scale: 1, quality: 1, play: 1, loop: 1, menu: 1, salign: 1, bgcolor: 1, base: 1, allowscriptaccess: 1, allownetworking: 1, allowfullscreen: 1, seamlesstabbing: 1, devicefont: 1, swliveconnect: 1, flashvars: 1, movie: 1 };    for (c in g) {        h = g[c];        c = c.toLowerCase();        if (d[c] && h) { l.push('<param name="' + c + '" value="' + h + '" />') }    }    g.src = g.movie;    g.name = g.id;    delete g.id;    delete g.movie;    delete g.classid;    delete g.codebase;    g.type = "application/x-shockwave-flash";    g.pluginspage = "http://www.macromedia.com/go/getflashplayer";    l.push("<embed");    var j;    for (c in g) {        h = g[c];        if (h) {            if ((new RegExp("^salign\x24", "i")).test(c)) { j = h; continue }            l.push(" ", c, '="', h, '"')        }    }    if (j) { l.push(' salign="', j, '"') }    l.push("></embed></object>");    return l.join("")};baidu.swf.getMovie = function(a) { return document[a] || window[a] };baidu.swf.create = function(a, c) { a = a || {}; var d = baidu.swf.createHTML(a) || a.errorMessage || ""; if (c && "string" == typeof c) { c = document.getElementById(c) } if (c) { c.innerHTML = d } else { document.write(d) } };baidu.object = baidu.object || {};baidu.object.extend = function(c, a) { for (var d in a) { if (a.hasOwnProperty(d)) { c[d] = a[d] } } return c };baidu.extend = baidu.object.extend;baidu.object.each = function(c, f) {    var g, a, d;    if ("function" == typeof f) {        for (a in c) {            if (c.hasOwnProperty(a)) {                d = c[a];                g = f.call(c, d, a);                if (g === false) { break }            }        }    }    return c};baidu.object.keys = function(c) {    var a = [],        d = 0,        f;    for (f in c) { if (c.hasOwnProperty(f)) { a[d++] = f } }    return a};baidu.object.values = function(c) {    var a = [],        d = 0,        f;    for (f in c) { if (c.hasOwnProperty(f)) { a[d++] = c[f] } }    return a};baidu.object.clone = (function(a) {    return function(c) {        var g = c,            f, h;        if (!c || c instanceof Number || c instanceof String || c instanceof Boolean) { return g } else {            if (c instanceof Array) { g = []; var d = 0; for (f = 0, h = c.length; f < h; f++) { g[d++] = baidu.object.clone(c[f]) } } else {                if ("object" == typeof c) {                    if (a[Object.prototype.toString.call(c)]) { return g }                    g = {};                    for (f in c) { if (c.hasOwnProperty(f)) { g[f] = baidu.object.clone(c[f]) } }                }            }        }        return g    }})({ "[object Function]": 1, "[object RegExp]": 1, "[object Date]": 1, "[object Error]": 1 });baidu.string.getByteLength = function(a) { return String(a).replace(/[^\x00-\xff]/g, "ci").length };baidu.string.decodeHTML = function(a) { var c = String(a).replace(/&quot;/g, '"').replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&"); return c.replace(/&#([\d]+);/g, function(d, f) { return String.fromCharCode(parseInt(f, 10)) }) };baidu.decodeHTML = baidu.string.decodeHTML;baidu.string.format = function(d, a) {    d = String(d);    var f = Array.prototype.slice.call(arguments, 1),        c = Object.prototype.toString;    if (f.length) { f = f.length == 1 ? (a !== null && (/\[object Array\]|\[object Object\]/.test(c.call(a))) ? a : f) : f; return d.replace(/#\{(.+?)\}/g, function(j, g) { var h = f[g]; if ("[object Function]" == c.call(h)) { h = h(g) } return ("undefined" == typeof h ? "" : h) }) }    return d};baidu.format = baidu.string.format;baidu.string.wbr = function(a) { return String(a).replace(/(?:<[^>]+>)|(?:&#?[0-9a-z]{2,6};)|(.{1})/gi, "$&<wbr>").replace(/><wbr>/g, ">") };baidu.string.subByte = function(c, a) {    c = String(c);    if (a < 0 || baidu.string.getByteLength(c) <= a) { return c }    c = c.substr(0, a).replace(/([^\x00-\xff])/g, "\x241 ").substr(0, a).replace(/[^\x00-\xff]$/, "").replace(/([^\x00-\xff]) /g, "\x241");    return c};baidu.string.toHalfWidth = function(a) { return String(a).replace(/[\uFF01-\uFF5E]/g, function(c) { return String.fromCharCode(c.charCodeAt(0) - 65248) }).replace(/\u3000/g, " ") };baidu.string.encodeHTML = function(a) { return String(a).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") };baidu.encodeHTML = baidu.string.encodeHTML;baidu.page = baidu.page || {};baidu.page.getHeight = function() {    var c = document,        a = c.body,        d = c.documentElement,        f = c.compatMode == "BackCompat" ? a : c.documentElement;    return Math.max(d.scrollHeight, a.scrollHeight, f.clientHeight)};baidu.page.loadCssFile = function(c) {    var a = document.createElement("link");    a.setAttribute("rel", "stylesheet");    a.setAttribute("type", "text/css");    a.setAttribute("href", c);    document.getElementsByTagName("head")[0].appendChild(a)};baidu.page.getScrollLeft = function() { var a = document; return a.documentElement.scrollLeft || a.body.scrollLeft };baidu.page.getViewWidth = function() {    var c = document,        a = c.compatMode == "BackCompat" ? c.body : c.documentElement;    return a.clientWidth};baidu.page.loadJsFile = function(c) {    var a = document.createElement("script");    a.setAttribute("type", "text/javascript");    a.setAttribute("src", c);    a.setAttribute("defer", "defer");    document.getElementsByTagName("head")[0].appendChild(a)};baidu.page.getWidth = function() {    var c = document,        a = c.body,        d = c.documentElement,        f = c.compatMode == "BackCompat" ? a : c.documentElement;    return Math.max(d.scrollWidth, a.scrollWidth, f.clientWidth)};baidu.page.getScrollTop = function() { var a = document; return a.documentElement.scrollTop || a.body.scrollTop };baidu.page.getViewHeight = function() {    var c = document,        a = c.compatMode == "BackCompat" ? c.body : c.documentElement;    return a.clientHeight};baidu.array = baidu.array || {};baidu.array.filter = function(c, f) {    var h = [],        j = 0,        a = c.length,        d, g;    if ("function" == typeof f) { for (g = 0; g < a; g++) { d = c[g]; if (true === f.call(c, d, g)) { h[j++] = d } } }    return h};baidu.array.unique = function(d, c) {    var h = d.length,        a = d.slice(0),        f, g;    if ("function" != typeof c) { c = function(j, k) { return j === k } }    while (--h > 0) {        g = a[h];        f = h;        while (f--) { if (c(g, a[f])) { a.splice(h, 1); break } }    }    return a};baidu.array.indexOf = function(d, c, g) {    var a = d.length,        f = c;    g = Number(g) || 0;    g = g < 0 ? Math.ceil(g) : Math.floor(g);    g = Math.min(Math.max(g, 0), a);    if ("function" != typeof c) { f = function(h) { return c === h } }    for (; g < a; g++) { if (true === f.call(d, d[g], g)) { return g } }    return -1};baidu.array.remove = function(d, c) {    var a = d.length,        f = c;    if ("function" != typeof c) { f = function(g) { return c === g } }    while (a--) { if (true === f.call(d, d[a], a)) { d.splice(a, 1) } }};baidu.array.each = function(c, f) {    var g, d, h, a = c.length;    if ("function" == typeof f) {        for (h = 0; h < a; h++) {            d = c[h];            g = f.call(c, d, h);            if (g === false) { break }        }    }    return c};baidu.each = baidu.array.each;baidu.array.find = function(c, f) { var d, g, a = c.length; if ("function" == typeof f) { for (g = 0; g < a; g++) { d = c[g]; if (true === f.call(c, d, g)) { return d } } } return null };baidu.array.lastIndexOf = function(d, c) {    var a = d.length,        f = c;    if ("function" != typeof c) { f = function(g) { return c === g } }    while (a--) { if (true === f.call(d, d[a], a)) { return a } }    return -1};baidu.array.removeAt = function(c, a) { return c.splice(a, 1)[0] };baidu.lang.createClass = function(f, k) {    k = k || {};    var g = k.superClass || baidu.lang.Class;    var h = function() {        g.call(this);        f.apply(this, arguments);        for (var m = 0, l = h["\x06r"].length; m < l; m++) { h["\x06r"][m](this) }    };    h.options = k.options || {};    h["\x06r"] = [];    h.regist = function(l) { if (typeof l == "function") { h["\x06r"].push(l) } };    var c = function() {},        d = f.prototype;    c.prototype = g.prototype;    var a = h.prototype = new c();    for (var j in d) { a[j] = d[j] }    typeof k.className == "string" && (a._className = k.className);    a.constructor = d.constructor;    h.extend = function(l) { for (var m in l) { h.prototype[m] = l[m] } return h };    return h};baidu.lang.createSingle = function(d) { var c = new baidu.lang.Class(); for (var a in d) { c[a] = d[a] } return c };baidu.string.filterFormat = function(d, a) {    var f = Array.prototype.slice.call(arguments, 1),        c = Object.prototype.toString;    if (f.length) {        f = f.length == 1 ? (a !== null && (/\[object Array\]|\[object Object\]/.test(c.call(a))) ? a : f) : f;        return d.replace(/#\{(.+?)\}/g, function(m, j) {            var g, k, l, n, h;            if (!f) { return "" }            g = j.split("|");            k = f[g[0]];            if ("[object Function]" == c.call(k)) { k = k(g[0]) }            for (l = 1, n = g.length; l < n; ++l) { h = baidu.string.filterFormat[g[l]]; if ("[object Function]" == c.call(h)) { k = h(k) } }            return (("undefined" == typeof k || k === null) ? "" : k)        })    }    return d};baidu.string.filterFormat.escapeJs = function(c) { if (!c || "string" != typeof c) { return c } var d, a, g, f = []; for (d = 0, a = c.length; d < a; ++d) { g = c.charCodeAt(d); if (g > 255) { f.push(c.charAt(d)) } else { f.push("\\x" + g.toString(16)) } } return f.join("") };baidu.string.filterFormat.js = baidu.string.filterFormat.escapeJs;baidu.string.filterFormat.escapeString = function(a) { if (!a || "string" != typeof a) { return a } return a.replace(/"/g, "&#34;").replace(/'/g, "&#39;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\\/g, "&#92;").replace(/\//g, "&#47;") };baidu.string.filterFormat.e = baidu.string.filterFormat.escapeString;baidu.string.filterFormat.toInt = function(a) { return parseInt(a, 10) || 0 };baidu.string.filterFormat.i = baidu.string.filterFormat.toInt;(function() {    baidu.page.getMousePosition = function() { return { x: baidu.page.getScrollLeft() + a.x, y: baidu.page.getScrollTop() + a.y } };    var a = { x: 0, y: 0 };    baidu.event.on(document, "onmousemove", function(c) {        c = window.event || c;        a.x = c.clientX;        a.y = c.clientY    })})();(function() {    var k, l, a, c, d, h, o, g;    baidu.dom.drag = function(q, r) {        if (!(k = baidu.dom.g(q))) { return false }        l = baidu.object.extend({ autoStop: true, capture: true, interval: 20 }, r);        h = parseInt(baidu.dom.getStyle(k, "top")) || 0;        o = parseInt(baidu.dom.getStyle(k, "left")) || 0;        var p = baidu.page.getMousePosition();        a = p.x;        c = p.y;        clearTimeout(d);        d = setInterval(f, l.interval);        l.autoStop && baidu.event.on(document, "mouseup", m);        baidu.event.on(document.body, "selectstart", n);        if (l.capture && k.setCapture) { k.setCapture() } else { if (l.capture && window.captureEvents) { window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP) } }        g = document.body.style.MozUserSelect;        document.body.style.MozUserSelect = "none";        typeof l.ondragstart == "function" && l.ondragstart(k, l);        return { stop: j }    };    function j() {        clearTimeout(d);        if (l.capture && k.releaseCapture) { k.releaseCapture() } else { if (l.capture && window.captureEvents) { window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP) } }        document.body.style.MozUserSelect = g;        baidu.event.un(document.body, "selectstart", n);        typeof l.ondragend == "function" && l.ondragend(k, l)    }    function f(p) {        var t = l.range,            q = baidu.page.getMousePosition(),            s = o + q.x - a,            r = h + q.y - c;        if (typeof t == "object" && t && t.length == 4) {            s = Math.max(t[3], s);            s = Math.min(t[1] - k.offsetWidth, s);            r = Math.max(t[0], r);            r = Math.min(t[2] - k.offsetHeight, r)        }        k.style.top = r + "px";        k.style.left = s + "px";        typeof l.ondrag == "function" && l.ondrag(k, l)    }    function m(p) {        j();        baidu.event.un(document, "mouseup", m)    }    function n(p) { return baidu.event.preventDefault(p, false) }})();baidu.dom.draggable = function(c, a) {    a = baidu.object.extend({ toggle: function() { return true } }, a || {});    a.autoStop = true;    if ((c = baidu.dom.g(c)) && baidu.dom.getStyle(c, "position") != "static") {        baidu.event.on(a.handler || c, "onmousedown", function() {            if (typeof a.toggle == "function" && !a.toggle()) { return }            baidu.dom.drag(c, a)        })    }    return c};(function() {    var h = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,        o = 0,        a = Object.prototype.toString,        j = false,        p = true;    [0, 0].sort(function() { p = false; return 0 });    var d = function(x, E, u, t) {        u = u || [];        E = E || document;        var I = E;        if (E.nodeType !== 1 && E.nodeType !== 9) { return [] }        if (!x || typeof x !== "string") { return u }        var w = [],            B, G, A, C, y = true,            z = d.isXML(E),            J = x,            H, D, F, v;        do {            h.exec("");            B = h.exec(J);            if (B) {                J = B[3];                w.push(B[1]);                if (B[2]) { C = B[3]; break }            }        } while (B);        if (w.length > 1 && n.exec(x)) {            if (w.length === 2 && s.relative[w[0]]) { G = q(w[0] + w[1], E) } else {                G = s.relative[w[0]] ? [E] : d(w.shift(), E);                while (w.length) {                    x = w.shift();                    if (s.relative[x]) { x += w.shift() }                    G = q(x, G)                }            }        } else {            if (!t && w.length > 1 && E.nodeType === 9 && !z && s.match.ID.test(w[0]) && !s.match.ID.test(w[w.length - 1])) {                H = d.find(w.shift(), E, z);                E = H.expr ? d.filter(H.expr, H.set)[0] : H.set[0]            }            if (E) {                H = t ? { expr: w.pop(), set: f(t) } : d.find(w.pop(), w.length === 1 && (w[0] === "~" || w[0] === "+") && E.parentNode ? E.parentNode : E, z);                G = H.expr ? d.filter(H.expr, H.set) : H.set;                if (w.length > 0) { A = f(G) } else { y = false }                while (w.length) {                    D = w.pop();                    F = D;                    if (!s.relative[D]) { D = "" } else { F = w.pop() }                    if (F == null) { F = E }                    s.relative[D](A, F, z)                }            } else { A = w = [] }        }        if (!A) { A = G }        if (!A) { d.error(D || x) }        if (a.call(A) === "[object Array]") { if (!y) { u.push.apply(u, A) } else { if (E && E.nodeType === 1) { for (v = 0; A[v] != null; v++) { if (A[v] && (A[v] === true || A[v].nodeType === 1 && d.contains(E, A[v]))) { u.push(G[v]) } } } else { for (v = 0; A[v] != null; v++) { if (A[v] && A[v].nodeType === 1) { u.push(G[v]) } } } } } else { f(A, u) }        if (C) {            d(C, I, u, t);            d.uniqueSort(u)        }        return u    };    d.uniqueSort = function(t) {        if (c) {            j = p;            t.sort(c);            if (j) { for (var u = 1; u < t.length; u++) { if (t[u] === t[u - 1]) { t.splice(u--, 1) } } }        }        return t    };    d.matches = function(u, t) { return d(u, null, null, t) };    d.find = function(u, B, t) {        var v;        if (!u) { return [] }        for (var y = 0, z = s.order.length; y < z; y++) {            var w = s.order[y],                x;            if ((x = s.leftMatch[w].exec(u))) {                var A = x[1];                x.splice(1, 1);                if (A.substr(A.length - 1) !== "\\") {                    x[1] = (x[1] || "").replace(/\\/g, "");                    v = s.find[w](x, B, t);                    if (v != null) { u = u.replace(s.match[w], ""); break }                }            }        }        if (!v) { v = B.getElementsByTagName("*") }        return { set: v, expr: u }    };    d.filter = function(I, J, F, y) {        var A = I,            B = [],            u = J,            w, E, v = J && J[0] && d.isXML(J[0]);        while (I && J.length) {            for (var t in s.filter) {                if ((w = s.leftMatch[t].exec(I)) != null && w[2]) {                    var C = s.filter[t],                        D, G, z = w[1];                    E = false;                    w.splice(1, 1);                    if (z.substr(z.length - 1) === "\\") { continue }                    if (u === B) { B = [] }                    if (s.preFilter[t]) { w = s.preFilter[t](w, u, F, B, y, v); if (!w) { E = D = true } else { if (w === true) { continue } } }                    if (w) {                        for (var x = 0;                            (G = u[x]) != null; x++) {                            if (G) {                                D = C(G, w, x, u);                                var H = y ^ !!D;                                if (F && D != null) { if (H) { E = true } else { u[x] = false } } else {                                    if (H) {                                        B.push(G);                                        E = true                                    }                                }                            }                        }                    }                    if (D !== undefined) {                        if (!F) { u = B }                        I = I.replace(s.match[t], "");                        if (!E) { return [] }                        break                    }                }            }            if (I === A) { if (E == null) { d.error(I) } else { break } }            A = I        }        return u    };    d.error = function(t) { throw "Syntax error, unrecognized expression: " + t };    var s = d.selectors = {        order: ["ID", "NAME", "TAG"],        match: { ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/, CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/, NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/, ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/, TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/, CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+\-]*)\))?/, POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/, PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/ },        leftMatch: {},        attrMap: { "class": "className", "for": "htmlFor" },        attrHandle: { href: function(t) { return t.getAttribute("href") } },        relative: {            "+": function(t, y) {                var w = typeof y === "string",                    u = w && !/\W/.test(y),                    A = w && !u;                if (u) { y = y.toLowerCase() }                for (var x = 0, z = t.length, v; x < z; x++) {                    if ((v = t[x])) {                        while ((v = v.previousSibling) && v.nodeType !== 1) {}                        t[x] = A || v && v.nodeName.toLowerCase() === y ? v || false : v === y                    }                }                if (A) { d.filter(y, t, true) }            },            ">": function(t, y) {                var v = typeof y === "string",                    u, x = 0,                    z = t.length;                if (v && !/\W/.test(y)) {                    y = y.toLowerCase();                    for (; x < z; x++) {                        u = t[x];                        if (u) {                            var w = u.parentNode;                            t[x] = w.nodeName.toLowerCase() === y ? w : false                        }                    }                } else { for (; x < z; x++) { u = t[x]; if (u) { t[x] = v ? u.parentNode : u.parentNode === y } } if (v) { d.filter(y, t, true) } }            },            "": function(v, x, t) {                var w = o++,                    y = g,                    u;                if (typeof x === "string" && !/\W/.test(x)) {                    x = x.toLowerCase();                    u = x;                    y = k                }                y("parentNode", x, w, v, u, t)            },            "~": function(v, x, t) {                var w = o++,                    y = g,                    u;                if (typeof x === "string" && !/\W/.test(x)) {                    x = x.toLowerCase();                    u = x;                    y = k                }                y("previousSibling", x, w, v, u, t)            }        },        find: {            ID: function(v, u, t) { if (typeof u.getElementById !== "undefined" && !t) { var w = u.getElementById(v[1]); return w ? [w] : [] } },            NAME: function(w, t) {                if (typeof t.getElementsByName !== "undefined") {                    var x = [],                        u = t.getElementsByName(w[1]);                    for (var v = 0, y = u.length; v < y; v++) { if (u[v].getAttribute("name") === w[1]) { x.push(u[v]) } }                    return x.length === 0 ? null : x                }            },            TAG: function(u, t) { return t.getElementsByTagName(u[1]) }        },        preFilter: {            CLASS: function(w, y, x, z, t, A) {                w = " " + w[1].replace(/\\/g, "") + " ";                if (A) { return w }                for (var v = 0, u;                    (u = y[v]) != null; v++) { if (u) { if (t ^ (u.className && (" " + u.className + " ").replace(/[\t\n]/g, " ").indexOf(w) >= 0)) { if (!x) { z.push(u) } } else { if (x) { y[v] = false } } } }                return false            },            ID: function(t) { return t[1].replace(/\\/g, "") },            TAG: function(t, u) { return t[1].toLowerCase() },            CHILD: function(u) {                if (u[1] === "nth") {                    var t = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(u[2] === "even" && "2n" || u[2] === "odd" && "2n+1" || !/\D/.test(u[2]) && "0n+" + u[2] || u[2]);                    u[2] = (t[1] + (t[2] || 1)) - 0;                    u[3] = t[3] - 0                }                u[0] = o++;                return u            },            ATTR: function(v, y, x, z, u, t) { var w = v[1].replace(/\\/g, ""); if (!t && s.attrMap[w]) { v[1] = s.attrMap[w] } if (v[2] === "~=") { v[4] = " " + v[4] + " " } return v },            PSEUDO: function(u, x, w, y, t) { if (u[1] === "not") { if ((h.exec(u[3]) || "").length > 1 || /^\w/.test(u[3])) { u[3] = d(u[3], null, null, x) } else { var v = d.filter(u[3], x, w, true ^ t); if (!w) { y.push.apply(y, v) } return false } } else { if (s.match.POS.test(u[0]) || s.match.CHILD.test(u[0])) { return true } } return u },            POS: function(t) { t.unshift(true); return t }        },        filters: { enabled: function(t) { return t.disabled === false && t.type !== "hidden" }, disabled: function(t) { return t.disabled === true }, checked: function(t) { return t.checked === true }, selected: function(t) { t.parentNode.selectedIndex; return t.selected === true }, parent: function(t) { return !!t.firstChild }, empty: function(t) { return !t.firstChild }, has: function(t, u, v) { return !!d(v[3], t).length }, header: function(t) { return (/h\d/i).test(t.nodeName) }, text: function(t) { return "text" === t.type }, radio: function(t) { return "radio" === t.type }, checkbox: function(t) { return "checkbox" === t.type }, file: function(t) { return "file" === t.type }, password: function(t) { return "password" === t.type }, submit: function(t) { return "submit" === t.type }, image: function(t) { return "image" === t.type }, reset: function(t) { return "reset" === t.type }, button: function(t) { return "button" === t.type || t.nodeName.toLowerCase() === "button" }, input: function(t) { return (/input|select|textarea|button/i).test(t.nodeName) } },        setFilters: { first: function(t, u) { return u === 0 }, last: function(u, v, w, t) { return v === t.length - 1 }, even: function(t, u) { return u % 2 === 0 }, odd: function(t, u) { return u % 2 === 1 }, lt: function(t, u, v) { return u < v[3] - 0 }, gt: function(t, u, v) { return u > v[3] - 0 }, nth: function(t, u, v) { return v[3] - 0 === u }, eq: function(t, u, v) { return v[3] - 0 === u } },        filter: {            PSEUDO: function(z, u, v, t) {                var B = u[1],                    A = s.filters[B];                if (A) { return A(z, v, u, t) } else { if (B === "contains") { return (z.textContent || z.innerText || d.getText([z]) || "").indexOf(u[3]) >= 0 } else { if (B === "not") { var y = u[3]; for (var w = 0, x = y.length; w < x; w++) { if (y[w] === z) { return false } } return true } else { d.error("Syntax error, unrecognized expression: " + B) } } }            },            CHILD: function(C, z) {                var w = z[1],                    B = C;                switch (w) {                    case "only":                    case "first":                        while ((B = B.previousSibling)) { if (B.nodeType === 1) { return false } }                        if (w === "first") { return true }                        B = C;                    case "last":                        while ((B = B.nextSibling)) { if (B.nodeType === 1) { return false } }                        return true;                    case "nth":                        var A = z[2],                            t = z[3];                        if (A === 1 && t === 0) { return true }                        var x = z[0],                            u = C.parentNode;                        if (u && (u.sizcache !== x || !C.nodeIndex)) {                            var y = 0;                            for (B = u.firstChild; B; B = B.nextSibling) { if (B.nodeType === 1) { B.nodeIndex = ++y } }                            u.sizcache = x                        }                        var v = C.nodeIndex - t;                        if (A === 0) { return v === 0 } else { return (v % A === 0 && v / A >= 0) }                }            },            ID: function(t, u) { return t.nodeType === 1 && t.getAttribute("id") === u },            TAG: function(t, u) { return (u === "*" && t.nodeType === 1) || t.nodeName.toLowerCase() === u },            CLASS: function(t, u) { return (" " + (t.className || t.getAttribute("class")) + " ").indexOf(u) > -1 },            ATTR: function(u, w) {                var x = w[1],                    z = s.attrHandle[x] ? s.attrHandle[x](u) : u[x] != null ? u[x] : u.getAttribute(x),                    t = z + "",                    v = w[2],                    y = w[4];                return z == null ? v === "!=" : v === "=" ? t === y : v === "*=" ? t.indexOf(y) >= 0 : v === "~=" ? (" " + t + " ").indexOf(y) >= 0 : !y ? t && z !== false : v === "!=" ? t !== y : v === "^=" ? t.indexOf(y) === 0 : v === "$=" ? t.substr(t.length - y.length) === y : v === "|=" ? t === y || t.substr(0, y.length + 1) === y + "-" : false            },            POS: function(u, x, w, t) {                var y = x[2],                    v = s.setFilters[y];                if (v) { return v(u, w, x, t) }            }        }    };    var n = s.match.POS,        r = function(t, u) { return "\\" + (u - 0 + 1) };    for (var l in s.match) {        s.match[l] = new RegExp(s.match[l].source + (/(?![^\[]*\])(?![^\(]*\))/.source));        s.leftMatch[l] = new RegExp(/(^(?:.|\r|\n)*?)/.source + s.match[l].source.replace(/\\(\d+)/g, r))    }    var f = function(t, u) { t = Array.prototype.slice.call(t, 0); if (u) { u.push.apply(u, t); return u } return t };    try { Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType } catch (m) {        f = function(t, u) {            var w = u || [],                v = 0;            if (a.call(t) === "[object Array]") { Array.prototype.push.apply(w, t) } else { if (typeof t.length === "number") { for (var x = t.length; v < x; v++) { w.push(t[v]) } } else { for (; t[v]; v++) { w.push(t[v]) } } }            return w        }    }    var c;    if (document.documentElement.compareDocumentPosition) { c = function(u, v) { if (!u.compareDocumentPosition || !v.compareDocumentPosition) { if (u == v) { j = true } return u.compareDocumentPosition ? -1 : 1 } var t = u.compareDocumentPosition(v) & 4 ? -1 : u === v ? 0 : 1; if (t === 0) { j = true } return t } } else {        if ("sourceIndex" in document.documentElement) { c = function(u, v) { if (!u.sourceIndex || !v.sourceIndex) { if (u == v) { j = true } return u.sourceIndex ? -1 : 1 } var t = u.sourceIndex - v.sourceIndex; if (t === 0) { j = true } return t } } else {            if (document.createRange) {                c = function(u, w) {                    if (!u.ownerDocument || !w.ownerDocument) { if (u == w) { j = true } return u.ownerDocument ? -1 : 1 }                    var v = u.ownerDocument.createRange(),                        x = w.ownerDocument.createRange();                    v.setStart(u, 0);                    v.setEnd(u, 0);                    x.setStart(w, 0);                    x.setEnd(w, 0);                    var t = v.compareBoundaryPoints(Range.START_TO_END, x);                    if (t === 0) { j = true }                    return t                }            }        }    }    d.getText = function(w) {        var v = "",            t;        for (var u = 0; w[u]; u++) { t = w[u]; if (t.nodeType === 3 || t.nodeType === 4) { v += t.nodeValue } else { if (t.nodeType !== 8) { v += d.getText(t.childNodes) } } }        return v    };    (function() {        var u = document.createElement("div"),            t = "script" + (new Date()).getTime();        u.innerHTML = "<a name='" + t + "'/>";        var v = document.documentElement;        v.insertBefore(u, v.firstChild);        if (document.getElementById(t)) {            s.find.ID = function(y, x, w) { if (typeof x.getElementById !== "undefined" && !w) { var z = x.getElementById(y[1]); return z ? z.id === y[1] || typeof z.getAttributeNode !== "undefined" && z.getAttributeNode("id").nodeValue === y[1] ? [z] : undefined : [] } };            s.filter.ID = function(w, y) { var x = typeof w.getAttributeNode !== "undefined" && w.getAttributeNode("id"); return w.nodeType === 1 && x && x.nodeValue === y }        }        v.removeChild(u);        v = u = null    })();    (function() {        var t = document.createElement("div");        t.appendChild(document.createComment(""));        if (t.getElementsByTagName("*").length > 0) {            s.find.TAG = function(y, u) {                var v = u.getElementsByTagName(y[1]);                if (y[1] === "*") {                    var w = [];                    for (var x = 0; v[x]; x++) { if (v[x].nodeType === 1) { w.push(v[x]) } }                    v = w                }                return v            }        }        t.innerHTML = "<a href='#'></a>";        if (t.firstChild && typeof t.firstChild.getAttribute !== "undefined" && t.firstChild.getAttribute("href") !== "#") { s.attrHandle.href = function(u) { return u.getAttribute("href", 2) } }        t = null    })();    if (document.querySelectorAll) {        (function() {            var v = d,                t = document.createElement("div");            t.innerHTML = "<p class='TEST'></p>";            if (t.querySelectorAll && t.querySelectorAll(".TEST").length === 0) { return }            d = function(w, x, z, y) { x = x || document; if (!y && x.nodeType === 9 && !d.isXML(x)) { try { return f(x.querySelectorAll(w), z) } catch (A) {} } return v(w, x, z, y) };            for (var u in v) { d[u] = v[u] }            t = null        })()    }(function() {        var t = document.createElement("div");        t.innerHTML = "<div class='test e'></div><div class='test'></div>";        if (!t.getElementsByClassName || t.getElementsByClassName("e").length === 0) { return }        t.lastChild.className = "e";        if (t.getElementsByClassName("e").length === 1) { return }        s.order.splice(1, 0, "CLASS");        s.find.CLASS = function(w, v, u) { if (typeof v.getElementsByClassName !== "undefined" && !u) { return v.getElementsByClassName(w[1]) } };        t = null    })();    function k(B, w, x, t, v, u) {        for (var z = 0, A = t.length; z < A; z++) {            var C = t[z];            if (C) {                C = C[B];                var y = false;                while (C) {                    if (C.sizcache === x) { y = t[C.sizset]; break }                    if (C.nodeType === 1 && !u) {                        C.sizcache = x;                        C.sizset = z                    }                    if (C.nodeName.toLowerCase() === w) { y = C; break }                    C = C[B]                }                t[z] = y            }        }    }    function g(B, w, x, t, v, u) {        for (var z = 0, A = t.length; z < A; z++) {            var C = t[z];            if (C) {                C = C[B];                var y = false;                while (C) {                    if (C.sizcache === x) { y = t[C.sizset]; break }                    if (C.nodeType === 1) {                        if (!u) {                            C.sizcache = x;                            C.sizset = z                        }                        if (typeof w !== "string") { if (C === w) { y = true; break } } else { if (d.filter(w, [C]).length > 0) { y = C; break } }                    }                    C = C[B]                }                t[z] = y            }        }    }    d.contains = document.compareDocumentPosition ? function(t, u) { return !!(t.compareDocumentPosition(u) & 16) } : function(t, u) { return t !== u && (t.contains ? t.contains(u) : true) };    d.isXML = function(u) { var t = (u ? u.ownerDocument || u : 0).documentElement; return t ? t.nodeName !== "HTML" : false };    var q = function(z, A) {        var w = [],            v = "",            u, x = A.nodeType ? [A] : A;        while ((u = s.match.PSEUDO.exec(z))) {            v += u[0];            z = z.replace(s.match.PSEUDO, "")        }        z = s.relative[z] ? z + "*" : z;        for (var t = 0, y = x.length; t < y; t++) { d(z, x[t], w) }        return d.filter(v, w)    };    baidu.dom.query = d})();baidu.page.createStyleSheet = function(a) {    var c = a || {},        f = c.document || document,        g;    if (baidu.browser.ie) { return f.createStyleSheet(c.url, c.index) } else {        g = "<style type='text/css'></style>";        c.url && (g = "<link type='text/css' rel='stylesheet' href='" + c.url + "'/>");        baidu.dom.insertHTML(f.getElementsByTagName("HEAD")[0], "beforeEnd", g);        if (c.url) { return null }        var h = f.styleSheets[f.styleSheets.length - 1],            d = h.rules || h.cssRules;        return {            self: h,            rules: h.rules || h.cssRules,            addRule: function(l, j, k) { if (h.addRule) { return h.addRule(l, j, k) } else { if (h.insertRule) { isNaN(k) && (k = d.length); return h.insertRule(l + "{" + j + "}", k) } } },            removeRule: function(j) {                if (h.removeRule) { h.removeRule(j) } else {                    if (h.deleteRule) {                        isNaN(j) && (j = 0);                        h.deleteRule(j)                    }                }            }        }    }};baidu.lang.isFunction = function(a) { return "[object Function]" == Object.prototype.toString.call(a) };baidu.dom.create = function(d, a) { a = a || {}; var c = document.createElement(d); return baidu.dom.setAttrs(c, a) };baidu.dom.empty = function(a) { a = baidu.dom.g(a); while (a.firstChild) { a.removeChild(a.firstChild) } return a };baidu.dom.getText = function(d) {    var g = "",        c, f = 0,        a;    d = baidu._g(d);    if (d.nodeType === 3 || d.nodeType === 4) { g += d.nodeValue } else { if (d.nodeType !== 8) { c = d.childNodes; for (a = c.length; f < a; f++) { g += baidu.dom.getText(c[f]) } } }    return g};baidu.dom.hasAttr = function(c, d) { c = baidu.g(c); var a = c.attributes.getNamedItem(d); return !!(a && a.specified) };baidu.dom.toggleClass = function(a, c) { if (baidu.dom.hasClass(a, c)) { baidu.dom.removeClass(a, c) } else { baidu.dom.addClass(a, c) } };(function() {    var c = {},        h = baidu.lang.isArray,        d = baidu.lang.isElement,        g = function(j) { var k = this; if (h(j)) { baidu.each(j, function(l, m) { k[m] = l }) } else { k[0] = j } };    c.each = function(j) { baidu.object.each(this, function(k) { j.call(this, (new g(k))) }) };    baidu.each(("addClass draggable empty hide show insertAfter insertBefore insertHTML removeClass setAttr setAttrs setStyle setStyles show toggleClass toggle children next first getAncestorByClass getAncestorBy getAncestorByTag getDocument getParent getWindow last next prev contains getAttr getPosition getStyle g q query hasClass intersect remove").split(" "), function(j) { c[j] = c[j.replace(/^get[A-Z]/g, f)] = a(j, "dom") });    baidu.each(("on un").split(" "), function(j) { c[j] = a(j, "event") });    baidu.each(("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error").split(" "), function(j) { c[j] = function(k) { return this.on(j, k) } });    g.prototype = c;    function a(j, k) {        return function() {            var l = [],                m = arguments;            baidu.object.each(this, function(n, o) {                Array.prototype.unshift.call(m, n);                if (!baidu.lang.isFunction(k)) { k = baidu[k][j] }                l.push(k.apply(this, m));                Array.prototype.shift.call(m, n)            });            return (d(l) || (h(l) && d(l[0]))) ? new g(l) : l        }    }    function f(j) { return j.charAt(3).toLowerCase() }    baidu.e = baidu.element = function(j) { return new g(baidu.g(j)) };    baidu.element.extend = function(j) { baidu.object.each(j, function(k, l) { g.prototype[l] = a(l, k) }) }})();baidu.lang.toArray = function(d) {    if (d === null || d === undefined) { return [] }    if (baidu.lang.isArray(d)) { return d }    if (typeof d.length !== "number" || typeof d === "string" || baidu.lang.isFunction(d)) { return [d] }    if (d.item) {        var a = d.length,            c = new Array(a);        while (a--) { c[a] = d[a] }        return c    }    return [].slice.call(d)};baidu.lang.Class.prototype.addEventListeners = function(f, d) {    if (typeof d == "undefined") { for (var g in f) { this.addEventListener(g, f[g]) } } else {        f = f.split(",");        var g = 0,            a = f.length,            c;        for (; g < a; g++) { this.addEventListener(baidu.trim(f[g]), d) }    }};var CONFIG_HOST_URL = "baohe.baidu.com";var CONFIG_HOST_PORT = "80";var CONFIG_PASSPORT_URL = "passport.baidu.com";var CONFIG_PASSPORT_URL_JS = "http://" + CONFIG_PASSPORT_URL;var DOWNLOAD_URL = ["http://issuecdn.baidupcs.com/issue/netdisk/yunguanjia/BaiduYunGuanjia_5.4.4.exe", "http://issuecdn.baidupcs.com/issue/netdisk/apk/BaiduYun_7.13.0.apk", "http://itunes.apple.com/cn/app/bai-du-wang-pan/id547166701?mt=8", "http://itunes.apple.com/cn/app/bai-du-yun-hd/id554602005?mt=8", "http://www.windowsphone.com/zh-cn/store/app/%E7%99%BE%E5%BA%A6%E4%BA%91/59bf5640-85ae-4a6e-84f1-a61c074e667c", "", "http://issuecdn.baidupcs.com/issue/netdisk/macapk/BaiduYun_2.4.4.dmg"];var DOWNLOAD_URL_LOGIN = ["", "http://itunes.apple.com/cn/app/bai-du-wang-pan/id547166701?mt=8", "http://itunes.apple.com/cn/app/bai-du-yun-hd/id554602005?mt=8", "http://www.windowsphone.com/zh-cn/store/app/%E7%99%BE%E5%BA%A6%E4%BA%91/59bf5640-85ae-4a6e-84f1-a61c074e667c", ""];var DOWNLOAD_DES = [    ["大小：5.78MB", "版本：PC版 V2.0.0", "适应系统：windows XP/vista/win7/win8", "更新时间：2013-02-25"],    ["大小：1.6M", "版本：Android版3.0.0", "适应系统：Android2.2、Android2.3<br/><i>Android4.0</i>", "更新时间：2012/6/13"],    ["大小：2.5M", "版本：Iphone版2.0.0", "适应系统：IOS 4.0 及以上<br/><i>（需越狱后才能安装）</i>", "更新时间：2012/6/7"],    ["大小：5.6M", "版本：iPad版 V2.0.0", "适应系统：IOS 4.3 及以上<br/><i>（需越狱后才能安装）</i>", "更新时间：2012/8/15"],    ["大小：5M", "版本：WinPhone版v2.0.0", "适应系统：Windows Phone 7.5 及以上", "更新时间：2013/03/29"],    ["大小：5.51MB", "版本：Window版3.0.0", "适应系统：windows XP/vista/win7", "更新时间：2012/6/19"],    ["大小：5M", "版本：Mac版 V2.0.0", "适应系统：Mac OS 10.7 及以上", "更新时间：2013/04/25"]];var DOWNLOAD_UPDATE = [false, false, false, false, false, false, false];var DOWNLOAD_LIST = ["windows", "android", "iphone", "ipad", "wphone", "tongbupan", "linux"];var CO_APK = [{ src: "http://s1.pan.bdstatic.com/static/images/plug/fex48.png?r=202111255531", width: "56px", title: "ES文件浏览器百度云特别版", desc: "一键备份，简单方便，有条有理，永不丢失。", level: 5, url: "http://bs.baidu.com/appstore/apk_c5a8e927c1768f0778ede7d4b40ee535.apk" }, { src: "http://s1.pan.bdstatic.com/static/images/plug/icon.png?r=202111255531", title: "文件大师", width: "56px", desc: "最佳Android资源管理文件同步解决方案。", level: 5, url: "http://www.xageek.com/software/FileExpertLatest.apk" }, { src: "http://s1.pan.bdstatic.com/static/images/plug/icon72.png?r=202111255531", width: "54px", title: "云舟浏览器", desc: "云舟浏览器，让上网变得简洁快速。", level: 5, url: "http://www.yzbrowser.com/download/boatcn.apk" }];var T, baidu = T = baidu || { version: "1.3.9" };baidu.guid = "$BAIDU$";window[baidu.guid] = window[baidu.guid] || {};baidu.fx = baidu.fx || {};baidu.lang = baidu.lang || {};(function() {    var c = window[baidu.guid];    baidu.lang.guid = function() { return "TANGRAM__" + (c._counter++).toString(36) };    c._counter = c._counter || 1})();window[baidu.guid]._instances = window[baidu.guid]._instances || {};baidu.lang.isFunction = function(c) { return "[object Function]" == Object.prototype.toString.call(c) };baidu.lang.Class = function(c) {    this.guid = c || baidu.lang.guid();    window[baidu.guid]._instances[this.guid] = this};window[baidu.guid]._instances = window[baidu.guid]._instances || {};baidu.lang.Class.prototype.dispose = function() {    delete window[baidu.guid]._instances[this.guid];    for (var c in this) { if (!baidu.lang.isFunction(this[c])) { delete this[c] } }    this.disposed = true};baidu.lang.Class.prototype.toString = function() { return "[object " + (this._className || "Object") + "]" };baidu.lang.isString = function(c) { return "[object String]" == Object.prototype.toString.call(c) };baidu.isString = baidu.lang.isString;baidu.lang.Event = function(d, c) {    this.type = d;    this.returnValue = true;    this.target = c || null;    this.currentTarget = null};baidu.lang.Class.prototype.addEventListener = function(j, k, f) {    if (!baidu.lang.isFunction(k)) { return }!this.__listeners && (this.__listeners = {});    var g = this.__listeners,        h;    if (typeof f == "string" && f) {        if (/[^\w\-]/.test(f)) { throw ("nonstandard key:" + f) } else {            k.hashCode = f;            h = f        }    }    j.indexOf("on") != 0 && (j = "on" + j);    typeof g[j] != "object" && (g[j] = {});    h = h || baidu.lang.guid();    k.hashCode = h;    g[j][h] = k};baidu.lang.Class.prototype.removeEventListener = function(h, j) {    if (typeof j != "undefined") { if ((baidu.lang.isFunction(j) && !(j = j.hashCode)) || (!baidu.lang.isString(j))) { return } }!this.__listeners && (this.__listeners = {});    h.indexOf("on") != 0 && (h = "on" + h);    var f = this.__listeners;    if (!f[h]) { return }    if (typeof j != "undefined") { f[h][j] && delete f[h][j] } else { for (var g in f[h]) { delete f[h][g] } }};baidu.lang.Class.prototype.dispatchEvent = function(j, g) {    if (baidu.lang.isString(j)) { j = new baidu.lang.Event(j) }!this.__listeners && (this.__listeners = {});    g = g || {};    for (var k in g) { j[k] = g[k] }    var k, f = this.__listeners,        h = j.type;    j.target = j.target || this;    j.currentTarget = this;    h.indexOf("on") != 0 && (h = "on" + h);    baidu.lang.isFunction(this[h]) && this[h].apply(this, arguments);    if (typeof f[h] == "object") { for (k in f[h]) { f[h][k].apply(this, arguments) } }    return j.returnValue};baidu.lang.createClass = function(n, j) {    j = j || {};    var o = j.superClass || baidu.lang.Class;    var p = function() {        if (o != baidu.lang.Class) { o.apply(this, arguments) } else { o.call(this) }        n.apply(this, arguments)    };    p.options = j.options || {};    var l = function() {},        m = n.prototype;    l.prototype = o.prototype;    var k = p.prototype = new l();    for (var q in m) { k[q] = m[q] }    typeof j.className == "string" && (k._className = j.className);    k.constructor = m.constructor;    p.extend = function(a) { for (var c in a) { p.prototype[c] = a[c] } return p };    return p};baidu.object = baidu.object || {};baidu.extend = baidu.object.extend = function(g, f) { for (var d in f) { if (f.hasOwnProperty(d)) { g[d] = f[d] } } return g };baidu.fx.Timeline = baidu.lang.createClass(function(c) {    baidu.object.extend(this, baidu.fx.Timeline.options);    baidu.object.extend(this, c)}, { className: "baidu.fx.Timeline", options: { interval: 16, duration: 500, dynamic: true } }).extend({    launch: function() {        var c = this;        c.dispatchEvent("onbeforestart");        typeof c.initialize == "function" && c.initialize();        c["\x06btime"] = new Date().getTime();        c["\x06etime"] = c["\x06btime"] + (c.dynamic ? c.duration : 0);        c["\x06pulsed"]();        return c    },    "\x06pulsed": function() {        var c = this;        var d = new Date().getTime();        c.percent = (d - c["\x06btime"]) / c.duration;        c.dispatchEvent("onbeforeupdate");        if (d >= c["\x06etime"]) {            typeof c.render == "function" && c.render(c.transition(c.percent = 1));            typeof c.finish == "function" && c.finish();            c.dispatchEvent("onafterfinish");            c.dispose();            return        }        typeof c.render == "function" && c.render(c.transition(c.percent));        c.dispatchEvent("onafterupdate");        c["\x06timer"] = setTimeout(function() { c["\x06pulsed"]() }, c.interval)    },    transition: function(c) { return c },    cancel: function() {        this["\x06timer"] && clearTimeout(this["\x06timer"]);        this["\x06etime"] = this["\x06btime"];        typeof this.restore == "function" && this.restore();        this.dispatchEvent("oncancel");        this.dispose()    },    end: function() {        this["\x06timer"] && clearTimeout(this["\x06timer"]);        this["\x06etime"] = this["\x06btime"];        this["\x06pulsed"]()    }});baidu.dom = baidu.dom || {};baidu.dom.g = function(c) { if ("string" == typeof c || c instanceof String) { return document.getElementById(c) } else { if (c && c.nodeName && (c.nodeType == 1 || c.nodeType == 9)) { return c } } return null };baidu.g = baidu.G = baidu.dom.g;baidu.dom.hide = function(c) {    c = baidu.dom.g(c);    c.style.display = "none";    return c};baidu.hide = baidu.dom.hide;baidu.fx.create = function(j, f, k) {    var h = new baidu.fx.Timeline(f);    h.element = j;    h._className = k || h._className;    h["\x06original"] = {};    var g = "baidu_current_effect";    h.addEventListener("onbeforestart", function() {        var a = this,            c;        a.attribName = "att_" + a._className.replace(/\W/g, "_");        c = a.element.getAttribute(g);        a.element.setAttribute(g, (c || "") + "|" + a.guid + "|", 0);        if (!a.overlapping) {            (c = a.element.getAttribute(a.attribName)) && window[baidu.guid]._instances[c].cancel();            a.element.setAttribute(a.attribName, a.guid, 0)        }    });    h["\x06clean"] = function(a) {        var c = this,            d;        if (a = c.element) {            a.removeAttribute(c.attribName);            d = a.getAttribute(g);            d = d.replace("|" + c.guid + "|", "");            if (!d) { a.removeAttribute(g) } else { a.setAttribute(g, d, 0) }        }    };    h.addEventListener("oncancel", function() {        this["\x06clean"]();        this["\x06restore"]()    });    h.addEventListener("onafterfinish", function() {        this["\x06clean"]();        this.restoreAfterFinish && this["\x06restore"]()    });    h.protect = function(a) { this["\x06original"][a] = this.element.style[a] };    h["\x06restore"] = function() {        var a = this["\x06original"],            c = this.element.style,            l;        for (var d in a) {            l = a[d];            if (typeof l == "undefined") { continue }            c[d] = l;            if (!l && c.removeAttribute) { c.removeAttribute(d) } else { if (!l && c.removeProperty) { c.removeProperty(d) } }        }    };    return h};baidu.fx.collapse = function(p, j) {    if (!(p = baidu.dom.g(p))) { return null }    var l = p,        n, k, m = { vertical: { value: "height", offset: "offsetHeight", stylesValue: ["paddingBottom", "paddingTop", "borderTopWidth", "borderBottomWidth"] }, horizontal: { value: "width", offset: "offsetWidth", stylesValue: ["paddingLeft", "paddingRight", "borderLeftWidth", "borderRightWidth"] } };    var o = baidu.fx.create(l, baidu.object.extend({        orientation: "vertical",        initialize: function() {            k = m[this.orientation];            this.protect(k.value);            this.protect("overflow");            this.restoreAfterFinish = true;            n = l[k.offset];            l.style.overflow = "hidden"        },        transition: function(a) { return Math.pow(1 - a, 2) },        render: function(a) { l.style[k.value] = Math.floor(a * n) + "px" },        finish: function() { baidu.dom.hide(l) }    }, j || {}), "baidu.fx.expand_collapse");    return o.launch()};baidu.fx.current = function(j) {    if (!(j = baidu.dom.g(j))) { return null }    var a, g, h = /\|([^\|]+)\|/g;    do { if (g = j.getAttribute("baidu_current_effect")) { break } } while ((j = j.parentNode) && j.nodeType == 1);    if (!g) { return null }    if ((a = g.match(h))) {        h = /\|([^\|]+)\|/;        for (var k = 0; k < a.length; k++) {            h.test(a[k]);            a[k] = window[baidu.guid]._instances[RegExp["\x241"]]        }    }    return a};baidu.dom.show = function(c) {    c = baidu.dom.g(c);    c.style.display = "";    return c};baidu.show = baidu.dom.show;baidu.array = baidu.array || {};baidu.each = baidu.array.forEach = baidu.array.each = function(k, m, h) {    var n, l, o, j = k.length;    if ("function" == typeof m) {        for (o = 0; o < j; o++) {            l = k[o];            n = m.call(h || k, l, o);            if (n === false) { break }        }    }    return k};baidu.dom._g = function(c) { if (baidu.lang.isString(c)) { return document.getElementById(c) } return c };baidu._g = baidu.dom._g;baidu.dom.getDocument = function(c) { c = baidu.dom.g(c); return c.nodeType == 9 ? c : c.ownerDocument || c.document };baidu.browser = baidu.browser || {};if (/msie (\d+\.\d)/i.test(navigator.userAgent)) { baidu.browser.ie = baidu.ie = document.documentMode || +RegExp["\x241"] }baidu.dom.getComputedStyle = function(f, g) {    f = baidu.dom._g(f);    var h = baidu.dom.getDocument(f),        j;    if (h.defaultView && h.defaultView.getComputedStyle) { j = h.defaultView.getComputedStyle(f, null); if (j) { return j[g] || j.getPropertyValue(g) } }    return ""};baidu.dom._styleFixer = baidu.dom._styleFixer || {};baidu.dom._styleFilter = baidu.dom._styleFilter || [];baidu.dom._styleFilter.filter = function(g, k, j) { for (var h = 0, l = baidu.dom._styleFilter, m; m = l[h]; h++) { if (m = m[j]) { k = m(g, k) } } return k };baidu.string = baidu.string || {};baidu.string.toCamelCase = function(c) { if (c.indexOf("-") < 0 && c.indexOf("_") < 0) { return c } return c.replace(/[-_][^-_]/g, function(a) { return a.charAt(1).toUpperCase() }) };baidu.dom.getStyle = function(k, f) {    var h = baidu.dom;    k = h.g(k);    f = baidu.string.toCamelCase(f);    var j = k.style[f] || (k.currentStyle ? k.currentStyle[f] : "") || h.getComputedStyle(k, f);    if (!j) { var g = h._styleFixer[f]; if (g) { j = g.get ? g.get(k) : baidu.dom.getStyle(k, g) } }    if (g = h._styleFilter) { j = g.filter(f, j, "get") }    return j};baidu.getStyle = baidu.dom.getStyle;baidu.lang.isNumber = function(c) { return "[object Number]" == Object.prototype.toString.call(c) && isFinite(c) };baidu.fx.expand = function(p, j) {    if (!(p = baidu.dom.g(p))) { return null }    var l = p,        n, k, m = { vertical: { value: "height", offset: "offsetHeight", stylesValue: ["paddingBottom", "paddingTop", "borderTopWidth", "borderBottomWidth"] }, horizontal: { value: "width", offset: "offsetWidth", stylesValue: ["paddingLeft", "paddingRight", "borderLeftWidth", "borderRightWidth"] } };    var o = baidu.fx.create(l, baidu.object.extend({        orientation: "vertical",        initialize: function() {            k = m[this.orientation];            baidu.dom.show(l);            this.protect(k.value);            this.protect("overflow");            this.restoreAfterFinish = true;            n = l[k.offset];            function a(c, d) {                var f = parseInt(baidu.getStyle(c, d));                f = isNaN(f) ? 0 : f;                f = baidu.lang.isNumber(f) ? f : 0;                return f            }            baidu.each(k.stylesValue, function(c) { n -= a(l, c) });            l.style.overflow = "hidden";            l.style[k.value] = "1px"        },        transition: function(a) { return Math.sqrt(a) },        render: function(a) { l.style[k.value] = Math.floor(a * n) + "px" }    }, j || {}), "baidu.fx.expand_collapse");    return o.launch()};baidu.fx.opacity = function(f, g) {    if (!(f = baidu.dom.g(f))) { return null }    g = baidu.object.extend({ from: 0, to: 1 }, g || {});    var h = f;    var j = baidu.fx.create(h, baidu.object.extend({        initialize: function() {            baidu.dom.show(f);            if (baidu.browser.ie) { this.protect("filter") } else {                this.protect("opacity");                this.protect("KHTMLOpacity")            }            this.distance = this.to - this.from        },        render: function(c) {            var a = this.distance * c + this.from;            if (!baidu.browser.ie) {                h.style.opacity = a;                h.style.KHTMLOpacity = a            } else { h.style.filter = "progid:DXImageTransform.Microsoft.Alpha(opacity:" + Math.floor(a * 100) + ")" }        }    }, g), "baidu.fx.opacity");    return j.launch()};baidu.fx.fadeIn = function(d, f) {    if (!(d = baidu.dom.g(d))) { return null }    var g = baidu.fx.opacity(d, baidu.object.extend({ from: 0, to: 1, restoreAfterFinish: true }, f || {}));    g._className = "baidu.fx.fadeIn";    return g};baidu.fx.fadeOut = function(d, f) {    if (!(d = baidu.dom.g(d))) { return null }    var g = baidu.fx.opacity(d, baidu.object.extend({ from: 1, to: 0, restoreAfterFinish: true }, f || {}));    g.addEventListener("onafterfinish", function() { baidu.dom.hide(this.element) });    g._className = "baidu.fx.fadeOut";    return g};baidu.fx.getTransition = function(d) { var a = baidu.fx.transitions; if (!d || typeof a[d] != "string") { d = "linear" } return new Function("percent", a[d]) };baidu.fx.transitions = { none: "return 0", full: "return 1", linear: "return percent", reverse: "return 1 - percent", parabola: "return Math.pow(percent, 2)", antiparabola: "return 1 - Math.pow(1 - percent, 2)", sinoidal: "return (-Math.cos(percent * Math.PI)/2) + 0.5", wobble: "return (-Math.cos(percent * Math.PI * (9 * percent))/2) + 0.5", spring: "return 1 - (Math.cos(percent * 4.5 * Math.PI) * Math.exp(-percent * 6))" };(function() {    var g = /^\#[\da-f]{6}$/i,        d = /^rgb\((\d+), (\d+), (\d+)\)$/,        f = { black: "#000000", silver: "#c0c0c0", gray: "#808080", white: "#ffffff", maroon: "#800000", red: "#ff0000", purple: "#800080", fuchsia: "#ff00ff", green: "#008000", lime: "#00ff00", olive: "#808000", yellow: "#ffff0", navy: "#000080", blue: "#0000ff", teal: "#008080", aqua: "#00ffff" };    baidu.string.formatColor = function(m) {        if (g.test(m)) { return m } else {            if (d.test(m)) {                for (var a, c = 1, m = "#"; c < 4; c++) {                    a = parseInt(RegExp["\x24" + c]).toString(16);                    m += ("00" + a).substr(a.length)                }                return m            } else {                if (/^\#[\da-f]{3}$/.test(m)) {                    var k = m.charAt(1),                        l = m.charAt(2),                        n = m.charAt(3);                    return "#" + k + k + l + l + n + n                } else { if (f[m]) { return f[m] } }            }        }        return ""    }})();baidu.fx.highlight = function(f, g) {    if (!(f = baidu.dom.g(f))) { return null }    var h = f;    var j = baidu.fx.create(h, baidu.object.extend({        initialize: function() {            var c = this,                d = baidu.dom.getStyle,                m = baidu.string.formatColor,                o = m(d(h, "color")) || "#000000",                p = m(d(h, "backgroundColor"));            c.beginColor = c.beginColor || p || "#FFFF00";            c.endColor = c.endColor || p || "#FFFFFF";            c.finalColor = c.finalColor || c.endColor || c.element.style.backgroundColor;            c.textColor == o && (c.textColor = "");            this.protect("color");            this.protect("backgroundColor");            c.c_b = [];            c.c_d = [];            c.t_b = [];            c.t_d = [];            for (var a, n = 0; n < 3; n++) {                a = 2 * n + 1;                c.c_b[n] = parseInt(c.beginColor.substr(a, 2), 16);                c.c_d[n] = parseInt(c.endColor.substr(a, 2), 16) - c.c_b[n];                if (c.textColor) {                    c.t_b[n] = parseInt(o.substr(a, 2), 16);                    c.t_d[n] = parseInt(c.textColor.substr(a, 2), 16) - c.t_b[n]                }            }        },        render: function(c) {            for (var d = this, m = "#", n = "#", a, l = 0; l < 3; l++) {                a = Math.round(d.c_b[l] + d.c_d[l] * c).toString(16);                m += ("00" + a).substr(a.length);                if (d.textColor) {                    a = Math.round(d.t_b[l] + d.t_d[l] * c).toString(16);                    n += ("00" + a).substr(a.length)                }            }            h.style.backgroundColor = m;            d.textColor && (h.style.color = n)        },        finish: function() {            this.textColor && (h.style.color = this.textColor);            h.style.backgroundColor = this.finalColor        }    }, g || {}), "baidu.fx.highlight");    return j.launch()};baidu.fx.mask = function(n, j) {    if (!(n = baidu.dom.g(n)) || baidu.dom.getStyle(n, "position") != "absolute") { return null }    var k = n,        h = {};    j = j || {};    var l = /^(\d+px|\d?\d(\.\d+)?%|100%|left|center|right)(\s+(\d+px|\d?\d(\.\d+)?%|100%|top|center|bottom))?/i;    !l.test(j.startOrigin) && (j.startOrigin = "0px 0px");    var j = baidu.object.extend({ restoreAfterFinish: true, from: 0, to: 1 }, j || {});    var m = baidu.fx.create(k, baidu.object.extend({        initialize: function() {            k.style.display = "";            this.protect("clip");            h.width = k.offsetWidth;            h.height = k.offsetHeight;            l.test(this.startOrigin);            var c = RegExp["\x241"].toLowerCase(),                d = RegExp["\x244"].toLowerCase(),                f = this.element.offsetWidth,                a = this.element.offsetHeight,                g, o;            if (/\d+%/.test(c)) { g = parseInt(c, 10) / 100 * f } else { if (/\d+px/.test(c)) { g = parseInt(c) } else { if (c == "left") { g = 0 } else { if (c == "center") { g = f / 2 } else { if (c == "right") { g = f } } } } }            if (!d) { o = a / 2 } else { if (/\d+%/.test(d)) { o = parseInt(d, 10) / 100 * a } else { if (/\d+px/.test(d)) { o = parseInt(d) } else { if (d == "top") { o = 0 } else { if (d == "center") { o = a / 2 } else { if (d == "bottom") { o = a } } } } } }            h.x = g;            h.y = o        },        render: function(c) {            var a = this.to * c + this.from * (1 - c),                d = h.y * (1 - a) + "px ",                f = h.x * (1 - a) + "px ",                g = h.x * (1 - a) + h.width * a + "px ",                o = h.y * (1 - a) + h.height * a + "px ";            k.style.clip = "rect(" + d + g + o + f + ")"        },        finish: function() { if (this.to < this.from) { k.style.display = "none" } }    }, j), "baidu.fx.mask");    return m.launch()};baidu.fx.move = function(d, f) {    if (!(d = baidu.dom.g(d)) || baidu.dom.getStyle(d, "position") == "static") { return null }    f = baidu.object.extend({ x: 0, y: 0 }, f || {});    if (f.x == 0 && f.y == 0) { return null }    var g = baidu.fx.create(d, baidu.object.extend({        initialize: function() {            this.protect("top");            this.protect("left");            this.originX = parseInt(baidu.dom.getStyle(d, "left")) || 0;            this.originY = parseInt(baidu.dom.getStyle(d, "top")) || 0        },        transition: function(a) { return 1 - Math.pow(1 - a, 2) },        render: function(a) {            d.style.top = (this.y * a + this.originY) + "px";            d.style.left = (this.x * a + this.originX) + "px"        }    }, f), "baidu.fx.move");    return g.launch()};baidu.fx.moveBy = function(d, h, g) {    if (!(d = baidu.dom.g(d)) || baidu.dom.getStyle(d, "position") == "static" || typeof h != "object") { return null }    var j = {};    j.x = h[0] || h.x || 0;    j.y = h[1] || h.y || 0;    var k = baidu.fx.move(d, baidu.object.extend(j, g || {}));    return k};baidu.fx.moveTo = function(n, h, o) { if (!(n = baidu.dom.g(n)) || baidu.dom.getStyle(n, "position") == "static" || typeof h != "object") { return null } var l = [h[0] || h.x || 0, h[1] || h.y || 0]; var j = parseInt(baidu.dom.getStyle(n, "left")) || 0; var k = parseInt(baidu.dom.getStyle(n, "top")) || 0; var m = baidu.fx.move(n, baidu.object.extend({ x: l[0] - j, y: l[1] - k }, o || {})); return m };baidu.fx.scale = function(k, g) {    if (!(k = baidu.dom.g(k))) { return null }    g = baidu.object.extend({ from: 0.1, to: 1 }, g || {});    var h = /^(-?\d+px|\d?\d(\.\d+)?%|100%|left|center|right)(\s+(-?\d+px|\d?\d(\.\d+)?%|100%|top|center|bottom))?/i;    !h.test(g.transformOrigin) && (g.transformOrigin = "0px 0px");    var f = {},        j = baidu.fx.create(k, baidu.object.extend({            fade: true,            initialize: function() {                baidu.dom.show(k);                var q = this,                    v = f,                    a = k.style,                    r = function(l) { q.protect(l) };                if (baidu.browser.ie) {                    r("top");                    r("left");                    r("position");                    r("zoom");                    r("filter");                    this.offsetX = parseInt(baidu.dom.getStyle(k, "left")) || 0;                    this.offsetY = parseInt(baidu.dom.getStyle(k, "top")) || 0;                    if (baidu.dom.getStyle(k, "position") == "static") { a.position = "relative" }                    h.test(this.transformOrigin);                    var s = RegExp["\x241"].toLowerCase(),                        t = RegExp["\x244"].toLowerCase(),                        o = this.element.offsetWidth,                        u = this.element.offsetHeight,                        c, d;                    if (/\d+%/.test(s)) { c = parseInt(s, 10) / 100 * o } else { if (/\d+px/.test(s)) { c = parseInt(s) } else { if (s == "left") { c = 0 } else { if (s == "center") { c = o / 2 } else { if (s == "right") { c = o } } } } }                    if (!t) { d = u / 2 } else { if (/\d+%/.test(t)) { d = parseInt(t, 10) / 100 * u } else { if (/\d+px/.test(t)) { d = parseInt(t) } else { if (t == "top") { d = 0 } else { if (t == "center") { d = u / 2 } else { if (t == "bottom") { d = u } } } } } }                    a.zoom = this.from;                    v.cx = c;                    v.cy = d                } else {                    r("WebkitTransform");                    r("WebkitTransformOrigin");                    r("MozTransform");                    r("MozTransformOrigin");                    r("OTransform");                    r("OTransformOrigin");                    r("transform");                    r("transformOrigin");                    r("opacity");                    r("KHTMLOpacity");                    a.WebkitTransform = a.MozTransform = a.OTransform = a.transform = "scale(" + this.from + ")";                    a.WebkitTransformOrigin = a.MozTransformOrigin = a.OTransformOrigin = a.transformOrigin = this.transformOrigin                }            },            render: function(c) {                var l = k.style,                    m = this.to == 1,                    m = typeof this.opacityTrend == "boolean" ? this.opacityTrend : m,                    d = m ? this.percent : 1 - this.percent,                    a = this.to * c + this.from * (1 - c);                if (baidu.browser.ie) {                    l.zoom = a;                    if (this.fade) { l.filter = "progid:DXImageTransform.Microsoft.Alpha(opacity:" + Math.floor(d * 100) + ")" }                    l.top = this.offsetY + f.cy * (1 - a);                    l.left = this.offsetX + f.cx * (1 - a)                } else { l.WebkitTransform = l.MozTransform = l.OTransform = l.transform = "scale(" + a + ")"; if (this.fade) { l.KHTMLOpacity = l.opacity = d } }            }        }, g), "baidu.fx.scale");    return j.launch()};baidu.fx.zoomOut = function(d, f) {    if (!(d = baidu.dom.g(d))) { return null }    f = baidu.object.extend({ to: 0.1, from: 1, opacityTrend: false, restoreAfterFinish: true, transition: function(a) { return 1 - Math.pow(1 - a, 2) } }, f || {});    var g = baidu.fx.scale(d, f);    g.addEventListener("onafterfinish", function() { baidu.dom.hide(this.element) });    return g};baidu.fx.puff = function(c, d) { return baidu.fx.zoomOut(c, baidu.object.extend({ to: 1.8, duration: 800, transformOrigin: "50% 50%" }, d || {})) };baidu.fx.pulsate = function(l, h, g) { if (!(l = baidu.dom.g(l))) { return null } if (isNaN(h) || h == 0) { return null } var j = l; var k = baidu.fx.create(j, baidu.object.extend({ initialize: function() { this.protect("visibility") }, transition: function(a) { return Math.cos(2 * Math.PI * a) }, render: function(a) { j.style.visibility = a > 0 ? "visible" : "hidden" }, finish: function() { setTimeout(function() { baidu.fx.pulsate(l, --h, g) }, 10) } }, g), "baidu.fx.pulsate"); return k.launch() };baidu.dom.remove = function(d) {    d = baidu.dom._g(d);    var c = d.parentNode;    c && c.removeChild(d)};baidu.fx.remove = function(d, f) {    var g = f.onafterfinish ? f.onafterfinish : new Function();    return baidu.fx.fadeOut(d, baidu.object.extend(f || {}, {        onafterfinish: function() {            baidu.dom.remove(this.element);            g.call(this)        }    }))};baidu.fx.scrollBy = function(d, j, h) {    if (!(d = baidu.dom.g(d)) || typeof j != "object") { return null }    var k = {},        l = {};    k.x = j[0] || j.x || 0;    k.y = j[1] || j.y || 0;    var m = baidu.fx.create(d, baidu.object.extend({        initialize: function() {            var a = l.sTop = d.scrollTop;            var c = l.sLeft = d.scrollLeft;            l.sx = Math.min(d.scrollWidth - d.clientWidth - c, k.x);            l.sy = Math.min(d.scrollHeight - d.clientHeight - a, k.y)        },        transition: function(a) { return 1 - Math.pow(1 - a, 2) },        render: function(a) {            d.scrollTop = (l.sy * a + l.sTop);            d.scrollLeft = (l.sx * a + l.sLeft)        },        restore: function() {            d.scrollTop = l.sTop;            d.scrollLeft = l.sLeft        }    }, h), "baidu.fx.scroll");    return m.launch()};baidu.fx.scrollTo = function(h, f, d) {    if (!(h = baidu.dom.g(h)) || typeof f != "object") { return null }    var g = {};    g.x = (f[0] || f.x || 0) - h.scrollLeft;    g.y = (f[1] || f.y || 0) - h.scrollTop;    return baidu.fx.scrollBy(h, g, d)};baidu.fx.shake = function(h, k, j) {    if (!(h = baidu.dom.g(h))) { return null }    var l = h;    k = k || [];    function n() { for (var a = 0; a < arguments.length; a++) { if (!isNaN(arguments[a])) { return arguments[a] } } }    var m = baidu.fx.create(l, baidu.object.extend({        initialize: function() {            this.protect("top");            this.protect("left");            this.protect("position");            this.restoreAfterFinish = true;            if (baidu.dom.getStyle(l, "position") == "static") { l.style.position = "relative" }            var a = this["\x06original"];            this.originX = parseInt(a.left || 0);            this.originY = parseInt(a.top || 0);            this.offsetX = n(k[0], k.x, 16);            this.offsetY = n(k[1], k.y, 5)        },        transition: function(a) { var c = 1 - a; return Math.floor(c * 16) % 2 == 1 ? c : a - 1 },        render: function(a) {            l.style.top = (this.offsetY * a + this.originY) + "px";            l.style.left = (this.offsetX * a + this.originX) + "px"        }    }, j || {}), "baidu.fx.shake");    return m.launch()};baidu.fx.zoomIn = function(c, d) {    if (!(c = baidu.dom.g(c))) { return null }    d = baidu.object.extend({ to: 1, from: 0.1, restoreAfterFinish: true, transition: function(a) { return Math.pow(a, 2) } }, d || {});    return baidu.fx.scale(c, d)};/*! jQuery v1.7.1 jquery.com | jquery.org/license */(function(a, b) {    function cy(a) { return f.isWindow(a) ? a : a.nodeType === 9 ? a.defaultView || a.parentWindow : !1 }    function cv(a) {        if (!ck[a]) {            var b = c.body,                d = f("<" + a + ">").appendTo(b),                e = d.css("display");            d.remove();            if (e === "none" || e === "") {                cl || (cl = c.createElement("iframe"), cl.frameBorder = cl.width = cl.height = 0), b.appendChild(cl);                if (!cm || !cl.createElement) { cm = (cl.contentWindow || cl.contentDocument).document, cm.write((c.compatMode === "CSS1Compat" ? "<!doctype html>" : "") + "<html><body>"), cm.close() }                d = cm.createElement(a), cm.body.appendChild(d), e = f.css(d, "display"), b.removeChild(cl)            }            ck[a] = e        }        return ck[a]    }    function cu(a, b) {        var c = {};        f.each(cq.concat.apply([], cq.slice(0, b)), function() { c[this] = a });        return c    }    function ct() { cr = b }    function cs() { setTimeout(ct, 0); return cr = f.now() }    function cj() { try { return new a.ActiveXObject("Microsoft.XMLHTTP") } catch (b) {} }    function ci() { try { return new a.XMLHttpRequest } catch (b) {} }    function cc(a, c) {        a.dataFilter && (c = a.dataFilter(c, a.dataType));        var d = a.dataTypes,            e = {},            g, h, i = d.length,            j, k = d[0],            l, m, n, o, p;        for (g = 1; g < i; g++) {            if (g === 1) { for (h in a.converters) { typeof h == "string" && (e[h.toLowerCase()] = a.converters[h]) } }            l = k, k = d[g];            if (k === "*") { k = l } else { if (l !== "*" && l !== k) { m = l + " " + k, n = e[m] || e["* " + k]; if (!n) { p = b; for (o in e) { j = o.split(" "); if (j[0] === l || j[0] === "*") { p = e[j[1] + " " + k]; if (p) { o = e[o], o === !0 ? n = p : p === !0 && (n = o); break } } } }!n && !p && f.error("No conversion from " + m.replace(" ", " to ")), n !== !0 && (c = n ? n(c) : p(o(c))) } }        }        return c    }    function cb(a, c, d) {        var e = a.contents,            f = a.dataTypes,            g = a.responseFields,            h, i, j, k;        for (i in g) { i in d && (c[g[i]] = d[i]) }        while (f[0] === "*") { f.shift(), h === b && (h = a.mimeType || c.getResponseHeader("content-type")) }        if (h) { for (i in e) { if (e[i] && e[i].test(h)) { f.unshift(i); break } } }        if (f[0] in d) { j = f[0] } else {            for (i in d) {                if (!f[0] || a.converters[i + " " + f[0]]) { j = i; break }                k || (k = i)            }            j = j || k        }        if (j) { j !== f[0] && f.unshift(j); return d[j] }    }    function ca(a, b, c, d) { if (f.isArray(b)) { f.each(b, function(b, e) { c || bE.test(a) ? d(a, e) : ca(a + "[" + (typeof e == "object" || f.isArray(e) ? b : "") + "]", e, c, d) }) } else { if (!c && b != null && typeof b == "object") { for (var e in b) { ca(a + "[" + e + "]", b[e], c, d) } } else { d(a, b) } } }    function b_(a, c) {        var d, e, g = f.ajaxSettings.flatOptions || {};        for (d in c) { c[d] !== b && ((g[d] ? a : e || (e = {}))[d] = c[d]) }        e && f.extend(!0, a, e)    }    function b$(a, c, d, e, f, g) {        f = f || c.dataTypes[0], g = g || {}, g[f] = !0;        var h = a[f],            i = 0,            j = h ? h.length : 0,            k = a === bT,            l;        for (; i < j && (k || !l); i++) { l = h[i](c, d, e), typeof l == "string" && (!k || g[l] ? l = b : (c.dataTypes.unshift(l), l = b$(a, c, d, e, l, g))) }(k || !l) && !g["*"] && (l = b$(a, c, d, e, "*", g));        return l    }    function bZ(a) {        return function(b, c) {            typeof b != "string" && (c = b, b = "*");            if (f.isFunction(c)) {                var d = b.toLowerCase().split(bP),                    e = 0,                    g = d.length,                    h, i, j;                for (; e < g; e++) { h = d[e], j = /^\+/.test(h), j && (h = h.substr(1) || "*"), i = a[h] = a[h] || [], i[j ? "unshift" : "push"](c) }            }        }    }    function bC(a, b, c) {        var d = b === "width" ? a.offsetWidth : a.offsetHeight,            e = b === "width" ? bx : by,            g = 0,            h = e.length;        if (d > 0) { if (c !== "border") { for (; g < h; g++) { c || (d -= parseFloat(f.css(a, "padding" + e[g])) || 0), c === "margin" ? d += parseFloat(f.css(a, c + e[g])) || 0 : d -= parseFloat(f.css(a, "border" + e[g] + "Width")) || 0 } } return d + "px" }        d = bz(a, b, b);        if (d < 0 || d == null) { d = a.style[b] || 0 }        d = parseFloat(d) || 0;        if (c) { for (; g < h; g++) { d += parseFloat(f.css(a, "padding" + e[g])) || 0, c !== "padding" && (d += parseFloat(f.css(a, "border" + e[g] + "Width")) || 0), c === "margin" && (d += parseFloat(f.css(a, c + e[g])) || 0) } }        return d + "px"    }    function bp(a, b) { b.src ? f.ajax({ url: b.src, async: !1, dataType: "script" }) : f.globalEval((b.text || b.textContent || b.innerHTML || "").replace(bf, "/*$0*/")), b.parentNode && b.parentNode.removeChild(b) }    function bo(a) {        var b = c.createElement("div");        bh.appendChild(b), b.innerHTML = a.outerHTML;        return b.firstChild    }    function bn(a) {        var b = (a.nodeName || "").toLowerCase();        b === "input" ? bm(a) : b !== "script" && typeof a.getElementsByTagName != "undefined" && f.grep(a.getElementsByTagName("input"), bm)    }    function bm(a) { if (a.type === "checkbox" || a.type === "radio") { a.defaultChecked = a.checked } }    function bl(a) { return typeof a.getElementsByTagName != "undefined" ? a.getElementsByTagName("*") : typeof a.querySelectorAll != "undefined" ? a.querySelectorAll("*") : [] }    function bk(a, b) {        var c;        if (b.nodeType === 1) {            b.clearAttributes && b.clearAttributes(), b.mergeAttributes && b.mergeAttributes(a), c = b.nodeName.toLowerCase();            if (c === "object") { b.outerHTML = a.outerHTML } else { if (c !== "input" || a.type !== "checkbox" && a.type !== "radio") { if (c === "option") { b.selected = a.defaultSelected } else { if (c === "input" || c === "textarea") { b.defaultValue = a.defaultValue } } } else { a.checked && (b.defaultChecked = b.checked = a.checked), b.value !== a.value && (b.value = a.value) } }            b.removeAttribute(f.expando)        }    }    function bj(a, b) {        if (b.nodeType === 1 && !!f.hasData(a)) {            var c, d, e, g = f._data(a),                h = f._data(b, g),                i = g.events;            if (i) { delete h.handle, h.events = {}; for (c in i) { for (d = 0, e = i[c].length; d < e; d++) { f.event.add(b, c + (i[c][d].namespace ? "." : "") + i[c][d].namespace, i[c][d], i[c][d].data) } } }            h.data && (h.data = f.extend({}, h.data))        }    }    function bi(a, b) { return f.nodeName(a, "table") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a }    function U(a) {        var b = V.split("|"),            c = a.createDocumentFragment();        if (c.createElement) { while (b.length) { c.createElement(b.pop()) } }        return c    }    function T(a, b, c) {        b = b || 0;        if (f.isFunction(b)) { return f.grep(a, function(a, d) { var e = !!b.call(a, d, a); return e === c }) }        if (b.nodeType) { return f.grep(a, function(a, d) { return a === b === c }) }        if (typeof b == "string") {            var d = f.grep(a, function(a) { return a.nodeType === 1 });            if (O.test(b)) { return f.filter(b, d, !c) }            b = f.filter(b, d)        }        return f.grep(a, function(a, d) { return f.inArray(a, b) >= 0 === c })    }    function S(a) { return !a || !a.parentNode || a.parentNode.nodeType === 11 }    function K() { return !0 }    function J() { return !1 }    function n(a, b, c) {        var d = b + "defer",            e = b + "queue",            g = b + "mark",            h = f._data(a, d);        h && (c === "queue" || !f._data(a, e)) && (c === "mark" || !f._data(a, g)) && setTimeout(function() {!f._data(a, e) && !f._data(a, g) && (f.removeData(a, d, !0), h.fire()) }, 0)    }    function m(a) { for (var b in a) { if (b === "data" && f.isEmptyObject(a[b])) { continue } if (b !== "toJSON") { return !1 } } return !0 }    function l(a, c, d) {        if (d === b && a.nodeType === 1) {            var e = "data-" + c.replace(k, "-$1").toLowerCase();            d = a.getAttribute(e);            if (typeof d == "string") {                try { d = d === "true" ? !0 : d === "false" ? !1 : d === "null" ? null : f.isNumeric(d) ? parseFloat(d) : j.test(d) ? f.parseJSON(d) : d } catch (g) {}                f.data(a, c, d)            } else { d = b }        }        return d    }    function h(a) {        var b = g[a] = {},            c, d;        a = a.split(/\s+/);        for (c = 0, d = a.length; c < d; c++) { b[a[c]] = !0 }        return b    }    var c = a.document,        d = a.navigator,        e = a.location,        f = function() {            function J() {                if (!e.isReady) {                    try { c.documentElement.doScroll("left") } catch (a) { setTimeout(J, 1); return }                    e.ready()                }            }            var e = function(a, b) { return new e.fn.init(a, b, h) },                f = a.jQuery,                g = a.$,                h, i = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,                j = /\S/,                k = /^\s+/,                l = /\s+$/,                m = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,                n = /^[\],:{}\s]*$/,                o = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,                p = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,                q = /(?:^|:|,)(?:\s*\[)+/g,                r = /(webkit)[ \/]([\w.]+)/,                s = /(opera)(?:.*version)?[ \/]([\w.]+)/,                t = /(msie) ([\w.]+)/,                u = /(mozilla)(?:.*? rv:([\w.]+))?/,                v = /-([a-z]|[0-9])/ig,                w = /^-ms-/,                x = function(a, b) { return (b + "").toUpperCase() },                y = d.userAgent,                z, A, B, C = Object.prototype.toString,                D = Object.prototype.hasOwnProperty,                E = Array.prototype.push,                F = Array.prototype.slice,                G = String.prototype.trim,                H = Array.prototype.indexOf,                I = {};            e.fn = e.prototype = {                constructor: e,                init: function(a, d, f) {                    var g, h, j, k;                    if (!a) { return this }                    if (a.nodeType) { this.context = this[0] = a, this.length = 1; return this }                    if (a === "body" && !d && c.body) { this.context = c, this[0] = c.body, this.selector = a, this.length = 1; return this }                    if (typeof a == "string") {                        a.charAt(0) !== "<" || a.charAt(a.length - 1) !== ">" || a.length < 3 ? g = i.exec(a) : g = [null, a, null];                        if (g && (g[1] || !d)) {                            if (g[1]) { d = d instanceof e ? d[0] : d, k = d ? d.ownerDocument || d : c, j = m.exec(a), j ? e.isPlainObject(d) ? (a = [c.createElement(j[1])], e.fn.attr.call(a, d, !0)) : a = [k.createElement(j[1])] : (j = e.buildFragment([g[1]], [k]), a = (j.cacheable ? e.clone(j.fragment) : j.fragment).childNodes); return e.merge(this, a) }                            h = c.getElementById(g[2]);                            if (h && h.parentNode) {                                if (h.id !== g[2]) { return f.find(a) }                                this.length = 1, this[0] = h                            }                            this.context = c, this.selector = a;                            return this                        }                        return !d || d.jquery ? (d || f).find(a) : this.constructor(d).find(a)                    }                    if (e.isFunction(a)) { return f.ready(a) }                    a.selector !== b && (this.selector = a.selector, this.context = a.context);                    return e.makeArray(a, this)                },                selector: "",                jquery: "1.7.1",                length: 0,                size: function() { return this.length },                toArray: function() { return F.call(this, 0) },                get: function(a) { return a == null ? this.toArray() : a < 0 ? this[this.length + a] : this[a] },                pushStack: function(a, b, c) {                    var d = this.constructor();                    e.isArray(a) ? E.apply(d, a) : e.merge(d, a), d.prevObject = this, d.context = this.context, b === "find" ? d.selector = this.selector + (this.selector ? " " : "") + c : b && (d.selector = this.selector + "." + b + "(" + c + ")");                    return d                },                each: function(a, b) { return e.each(this, a, b) },                ready: function(a) { e.bindReady(), A.add(a); return this },                eq: function(a) { a = +a; return a === -1 ? this.slice(a) : this.slice(a, a + 1) },                first: function() { return this.eq(0) },                last: function() { return this.eq(-1) },                slice: function() { return this.pushStack(F.apply(this, arguments), "slice", F.call(arguments).join(",")) },                map: function(a) { return this.pushStack(e.map(this, function(b, c) { return a.call(b, c, b) })) },                end: function() { return this.prevObject || this.constructor(null) },                push: E,                sort: [].sort,                splice: [].splice            }, e.fn.init.prototype = e.fn, e.extend = e.fn.extend = function() {                var a, c, d, f, g, h, i = arguments[0] || {},                    j = 1,                    k = arguments.length,                    l = !1;                typeof i == "boolean" && (l = i, i = arguments[1] || {}, j = 2), typeof i != "object" && !e.isFunction(i) && (i = {}), k === j && (i = this, --j);                for (; j < k; j++) {                    if ((a = arguments[j]) != null) {                        for (c in a) {                            d = i[c], f = a[c];                            if (i === f) { continue }                            l && f && (e.isPlainObject(f) || (g = e.isArray(f))) ? (g ? (g = !1, h = d && e.isArray(d) ? d : []) : h = d && e.isPlainObject(d) ? d : {}, i[c] = e.extend(l, h, f)) : f !== b && (i[c] = f)                        }                    }                }                return i            }, e.extend({                noConflict: function(b) { a.$ === e && (a.$ = g), b && a.jQuery === e && (a.jQuery = f); return e },                isReady: !1,                readyWait: 1,                holdReady: function(a) { a ? e.readyWait++ : e.ready(!0) },                ready: function(a) {                    if (a === !0 && !--e.readyWait || a !== !0 && !e.isReady) {                        if (!c.body) { return setTimeout(e.ready, 1) }                        e.isReady = !0;                        if (a !== !0 && --e.readyWait > 0) { return }                        A.fireWith(c, [e]), e.fn.trigger && e(c).trigger("ready").off("ready")                    }                },                bindReady: function() {                    if (!A) {                        A = e.Callbacks("once memory");                        if (c.readyState === "complete") { return setTimeout(e.ready, 1) }                        if (c.addEventListener) { c.addEventListener("DOMContentLoaded", B, !1), a.addEventListener("load", e.ready, !1) } else {                            if (c.attachEvent) {                                c.attachEvent("onreadystatechange", B), a.attachEvent("onload", e.ready);                                var b = !1;                                try { b = a.frameElement == null } catch (d) {}                                c.documentElement.doScroll && b && J()                            }                        }                    }                },                isFunction: function(a) { return e.type(a) === "function" },                isArray: Array.isArray || function(a) { return e.type(a) === "array" },                isWindow: function(a) { return a && typeof a == "object" && "setInterval" in a },                isNumeric: function(a) { return !isNaN(parseFloat(a)) && isFinite(a) },                type: function(a) { return a == null ? String(a) : I[C.call(a)] || "object" },                isPlainObject: function(a) { if (!a || e.type(a) !== "object" || a.nodeType || e.isWindow(a)) { return !1 } try { if (a.constructor && !D.call(a, "constructor") && !D.call(a.constructor.prototype, "isPrototypeOf")) { return !1 } } catch (c) { return !1 } var d; for (d in a) {} return d === b || D.call(a, d) },                isEmptyObject: function(a) { for (var b in a) { return !1 } return !0 },                error: function(a) { throw new Error(a) },                parseJSON: function(b) {                    if (typeof b != "string" || !b) { return null }                    b = e.trim(b);                    if (a.JSON && a.JSON.parse) { return a.JSON.parse(b) }                    if (n.test(b.replace(o, "@").replace(p, "]").replace(q, ""))) { return (new Function("return " + b))() }                    e.error("Invalid JSON: " + b)                },                parseXML: function(c) { var d, f; try { a.DOMParser ? (f = new DOMParser, d = f.parseFromString(c, "text/xml")) : (d = new ActiveXObject("Microsoft.XMLDOM"), d.async = "false", d.loadXML(c)) } catch (g) { d = b }(!d || !d.documentElement || d.getElementsByTagName("parsererror").length) && e.error("Invalid XML: " + c); return d },                noop: function() {},                globalEval: function(b) { b && j.test(b) && (a.execScript || function(b) { a.eval.call(a, b) })(b) },                camelCase: function(a) { return a.replace(w, "ms-").replace(v, x) },                nodeName: function(a, b) { return a.nodeName && a.nodeName.toUpperCase() === b.toUpperCase() },                each: function(a, c, d) {                    var f, g = 0,                        h = a.length,                        i = h === b || e.isFunction(a);                    if (d) { if (i) { for (f in a) { if (c.apply(a[f], d) === !1) { break } } } else { for (; g < h;) { if (c.apply(a[g++], d) === !1) { break } } } } else { if (i) { for (f in a) { if (c.call(a[f], f, a[f]) === !1) { break } } } else { for (; g < h;) { if (c.call(a[g], g, a[g++]) === !1) { break } } } }                    return a                },                trim: G ? function(a) { return a == null ? "" : G.call(a) } : function(a) { return a == null ? "" : (a + "").replace(k, "").replace(l, "") },                makeArray: function(a, b) {                    var c = b || [];                    if (a != null) {                        var d = e.type(a);                        a.length == null || d === "string" || d === "function" || d === "regexp" || e.isWindow(a) ? E.call(c, a) : e.merge(c, a)                    }                    return c                },                inArray: function(a, b, c) {                    var d;                    if (b) {                        if (H) { return H.call(b, a, c) }                        d = b.length, c = c ? c < 0 ? Math.max(0, d + c) : c : 0;                        for (; c < d; c++) { if (c in b && b[c] === a) { return c } }                    }                    return -1                },                merge: function(a, c) {                    var d = a.length,                        e = 0;                    if (typeof c.length == "number") { for (var f = c.length; e < f; e++) { a[d++] = c[e] } } else { while (c[e] !== b) { a[d++] = c[e++] } }                    a.length = d;                    return a                },                grep: function(a, b, c) {                    var d = [],                        e;                    c = !!c;                    for (var f = 0, g = a.length; f < g; f++) { e = !!b(a[f], f), c !== e && d.push(a[f]) }                    return d                },                map: function(a, c, d) {                    var f, g, h = [],                        i = 0,                        j = a.length,                        k = a instanceof e || j !== b && typeof j == "number" && (j > 0 && a[0] && a[j - 1] || j === 0 || e.isArray(a));                    if (k) { for (; i < j; i++) { f = c(a[i], i, d), f != null && (h[h.length] = f) } } else { for (g in a) { f = c(a[g], g, d), f != null && (h[h.length] = f) } }                    return h.concat.apply([], h)                },                guid: 1,                proxy: function(a, c) {                    if (typeof c == "string") {                        var d = a[c];                        c = a, a = d                    }                    if (!e.isFunction(a)) { return b }                    var f = F.call(arguments, 2),                        g = function() { return a.apply(c, f.concat(F.call(arguments))) };                    g.guid = a.guid = a.guid || g.guid || e.guid++;                    return g                },                access: function(a, c, d, f, g, h) { var i = a.length; if (typeof c == "object") { for (var j in c) { e.access(a, j, c[j], f, g, d) } return a } if (d !== b) { f = !h && f && e.isFunction(d); for (var k = 0; k < i; k++) { g(a[k], c, f ? d.call(a[k], k, g(a[k], c)) : d, h) } return a } return i ? g(a[0], c) : b },                now: function() { return (new Date).getTime() },                uaMatch: function(a) { a = a.toLowerCase(); var b = r.exec(a) || s.exec(a) || t.exec(a) || a.indexOf("compatible") < 0 && u.exec(a) || []; return { browser: b[1] || "", version: b[2] || "0" } },                sub: function() {                    function a(b, c) { return new a.fn.init(b, c) }                    e.extend(!0, a, this), a.superclass = this, a.fn = a.prototype = this(), a.fn.constructor = a, a.sub = this.sub, a.fn.init = function(d, f) { f && f instanceof e && !(f instanceof a) && (f = a(f)); return e.fn.init.call(this, d, f, b) }, a.fn.init.prototype = a.fn;                    var b = a(c);                    return a                },                browser: {}            }), e.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(a, b) { I["[object " + b + "]"] = b.toLowerCase() }), z = e.uaMatch(y), z.browser && (e.browser[z.browser] = !0, e.browser.version = z.version), e.browser.webkit && (e.browser.safari = !0), j.test(" ") && (k = /^[\s\xA0]+/, l = /[\s\xA0]+$/), h = e(c), c.addEventListener ? B = function() { c.removeEventListener("DOMContentLoaded", B, !1), e.ready() } : c.attachEvent && (B = function() { c.readyState === "complete" && (c.detachEvent("onreadystatechange", B), e.ready()) });            return e        }(),        g = {};    f.Callbacks = function(a) {        a = a ? g[a] || h(a) : {};        var c = [],            d = [],            e, i, j, k, l, m = function(b) { var d, e, g, h, i; for (d = 0, e = b.length; d < e; d++) { g = b[d], h = f.type(g), h === "array" ? m(g) : h === "function" && (!a.unique || !o.has(g)) && c.push(g) } },            n = function(b, f) {                f = f || [], e = !a.memory || [b, f], i = !0, l = j || 0, j = 0, k = c.length;                for (; c && l < k; l++) { if (c[l].apply(b, f) === !1 && a.stopOnFalse) { e = !0; break } }                i = !1, c && (a.once ? e === !0 ? o.disable() : c = [] : d && d.length && (e = d.shift(), o.fireWith(e[0], e[1])))            },            o = {                add: function() {                    if (c) {                        var a = c.length;                        m(arguments), i ? k = c.length : e && e !== !0 && (j = a, n(e[0], e[1]))                    }                    return this                },                remove: function() {                    if (c) {                        var b = arguments,                            d = 0,                            e = b.length;                        for (; d < e; d++) { for (var f = 0; f < c.length; f++) { if (b[d] === c[f]) { i && f <= k && (k--, f <= l && l--), c.splice(f--, 1); if (a.unique) { break } } } }                    }                    return this                },                has: function(a) {                    if (c) {                        var b = 0,                            d = c.length;                        for (; b < d; b++) { if (a === c[b]) { return !0 } }                    }                    return !1                },                empty: function() { c = []; return this },                disable: function() { c = d = e = b; return this },                disabled: function() { return !c },                lock: function() { d = b, (!e || e === !0) && o.disable(); return this },                locked: function() { return !d },                fireWith: function(b, c) { d && (i ? a.once || d.push([b, c]) : (!a.once || !e) && n(b, c)); return this },                fire: function() { o.fireWith(this, arguments); return this },                fired: function() { return !!e }            };        return o    };    var i = [].slice;    f.extend({        Deferred: function(a) {            var b = f.Callbacks("once memory"),                c = f.Callbacks("once memory"),                d = f.Callbacks("memory"),                e = "pending",                g = { resolve: b, reject: c, notify: d },                h = {                    done: b.add,                    fail: c.add,                    progress: d.add,                    state: function() { return e },                    isResolved: b.fired,                    isRejected: c.fired,                    then: function(a, b, c) { i.done(a).fail(b).progress(c); return this },                    always: function() { i.done.apply(i, arguments).fail.apply(i, arguments); return this },                    pipe: function(a, b, c) {                        return f.Deferred(function(d) {                            f.each({ done: [a, "resolve"], fail: [b, "reject"], progress: [c, "notify"] }, function(a, b) {                                var c = b[0],                                    e = b[1],                                    g;                                f.isFunction(c) ? i[a](function() { g = c.apply(this, arguments), g && f.isFunction(g.promise) ? g.promise().then(d.resolve, d.reject, d.notify) : d[e + "With"](this === i ? d : this, [g]) }) : i[a](d[e])                            })                        }).promise()                    },                    promise: function(a) { if (a == null) { a = h } else { for (var b in h) { a[b] = h[b] } } return a }                },                i = h.promise({}),                j;            for (j in g) { i[j] = g[j].fire, i[j + "With"] = g[j].fireWith }            i.done(function() { e = "resolved" }, c.disable, d.lock).fail(function() { e = "rejected" }, b.disable, d.lock), a && a.call(i, i);            return i        },        when: function(a) {            function m(a) { return function(b) { e[a] = arguments.length > 1 ? i.call(arguments, 0) : b, j.notifyWith(k, e) } }            function l(a) { return function(c) { b[a] = arguments.length > 1 ? i.call(arguments, 0) : c, --g || j.resolveWith(j, b) } }            var b = i.call(arguments, 0),                c = 0,                d = b.length,                e = Array(d),                g = d,                h = d,                j = d <= 1 && a && f.isFunction(a.promise) ? a : f.Deferred(),                k = j.promise();            if (d > 1) {                for (; c < d; c++) { b[c] && b[c].promise && f.isFunction(b[c].promise) ? b[c].promise().then(l(c), j.reject, m(c)) : --g }                g || j.resolveWith(j, b)            } else { j !== a && j.resolveWith(j, d ? [a] : []) }            return k        }    }), f.support = function() {        var b, d, e, g, h, i, j, k, l, m, n, o, p, q = c.createElement("div"),            r = c.documentElement;        q.setAttribute("className", "t"), q.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>", d = q.getElementsByTagName("*"), e = q.getElementsByTagName("a")[0];        if (!d || !d.length || !e) { return {} }        g = c.createElement("select"), h = g.appendChild(c.createElement("option")), i = q.getElementsByTagName("input")[0], b = { leadingWhitespace: q.firstChild.nodeType === 3, tbody: !q.getElementsByTagName("tbody").length, htmlSerialize: !!q.getElementsByTagName("link").length, style: /top/.test(e.getAttribute("style")), hrefNormalized: e.getAttribute("href") === "/a", opacity: /^0.55/.test(e.style.opacity), cssFloat: !!e.style.cssFloat, checkOn: i.value === "on", optSelected: h.selected, getSetAttribute: q.className !== "t", enctype: !!c.createElement("form").enctype, html5Clone: c.createElement("nav").cloneNode(!0).outerHTML !== "<:nav></:nav>", submitBubbles: !0, changeBubbles: !0, focusinBubbles: !1, deleteExpando: !0, noCloneEvent: !0, inlineBlockNeedsLayout: !1, shrinkWrapBlocks: !1, reliableMarginRight: !0 }, i.checked = !0, b.noCloneChecked = i.cloneNode(!0).checked, g.disabled = !0, b.optDisabled = !h.disabled;        try { delete q.test } catch (s) { b.deleteExpando = !1 }!q.addEventListener && q.attachEvent && q.fireEvent && (q.attachEvent("onclick", function() { b.noCloneEvent = !1 }), q.cloneNode(!0).fireEvent("onclick")), i = c.createElement("input"), i.value = "t", i.setAttribute("type", "radio"), b.radioValue = i.value === "t", i.setAttribute("checked", "checked"), q.appendChild(i), k = c.createDocumentFragment(), k.appendChild(q.lastChild), b.checkClone = k.cloneNode(!0).cloneNode(!0).lastChild.checked, b.appendChecked = i.checked, k.removeChild(i), k.appendChild(q), q.innerHTML = "", a.getComputedStyle && (j = c.createElement("div"), j.style.width = "0", j.style.marginRight = "0", q.style.width = "2px", q.appendChild(j), b.reliableMarginRight = (parseInt((a.getComputedStyle(j, null) || { marginRight: 0 }).marginRight, 10) || 0) === 0);        if (q.attachEvent) { for (o in { submit: 1, change: 1, focusin: 1 }) { n = "on" + o, p = n in q, p || (q.setAttribute(n, "return;"), p = typeof q[n] == "function"), b[o + "Bubbles"] = p } }        k.removeChild(q), k = g = h = j = q = i = null, f(function() { var a, d, e, g, h, i, j, k, m, n, o, r = c.getElementsByTagName("body")[0];!r || (j = 1, k = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;", m = "visibility:hidden;border:0;", n = "style='" + k + "border:5px solid #000;padding:0;'", o = "<div " + n + "><div></div></div><table " + n + " cellpadding='0' cellspacing='0'><tr><td></td></tr></table>", a = c.createElement("div"), a.style.cssText = m + "width:0;height:0;position:static;top:0;margin-top:" + j + "px", r.insertBefore(a, r.firstChild), q = c.createElement("div"), a.appendChild(q), q.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>", l = q.getElementsByTagName("td"), p = l[0].offsetHeight === 0, l[0].style.display = "", l[1].style.display = "none", b.reliableHiddenOffsets = p && l[0].offsetHeight === 0, q.innerHTML = "", q.style.width = q.style.paddingLeft = "1px", f.boxModel = b.boxModel = q.offsetWidth === 2, typeof q.style.zoom != "undefined" && (q.style.display = "inline", q.style.zoom = 1, b.inlineBlockNeedsLayout = q.offsetWidth === 2, q.style.display = "", q.innerHTML = "<div style='width:4px;'></div>", b.shrinkWrapBlocks = q.offsetWidth !== 2), q.style.cssText = k + m, q.innerHTML = o, d = q.firstChild, e = d.firstChild, h = d.nextSibling.firstChild.firstChild, i = { doesNotAddBorder: e.offsetTop !== 5, doesAddBorderForTableAndCells: h.offsetTop === 5 }, e.style.position = "fixed", e.style.top = "20px", i.fixedPosition = e.offsetTop === 20 || e.offsetTop === 15, e.style.position = e.style.top = "", d.style.overflow = "hidden", d.style.position = "relative", i.subtractsBorderForOverflowNotVisible = e.offsetTop === -5, i.doesNotIncludeMarginInBodyOffset = r.offsetTop !== j, r.removeChild(a), q = a = null, f.extend(b, i)) });        return b    }();    var j = /^(?:\{.*\}|\[.*\])$/,        k = /([A-Z])/g;    f.extend({        cache: {},        uuid: 0,        expando: "jQuery" + (f.fn.jquery + Math.random()).replace(/\D/g, ""),        noData: { embed: !0, object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000", applet: !0 },        hasData: function(a) { a = a.nodeType ? f.cache[a[f.expando]] : a[f.expando]; return !!a && !m(a) },        data: function(a, c, d, e) {            if (!!f.acceptData(a)) {                var g, h, i, j = f.expando,                    k = typeof c == "string",                    l = a.nodeType,                    m = l ? f.cache : a,                    n = l ? a[j] : a[j] && j,                    o = c === "events";                if ((!n || !m[n] || !o && !e && !m[n].data) && k && d === b) { return }                n || (l ? a[j] = n = ++f.uuid : n = j), m[n] || (m[n] = {}, l || (m[n].toJSON = f.noop));                if (typeof c == "object" || typeof c == "function") { e ? m[n] = f.extend(m[n], c) : m[n].data = f.extend(m[n].data, c) }                g = h = m[n], e || (h.data || (h.data = {}), h = h.data), d !== b && (h[f.camelCase(c)] = d);                if (o && !h[c]) { return g.events }                k ? (i = h[c], i == null && (i = h[f.camelCase(c)])) : i = h;                return i            }        },        removeData: function(a, b, c) {            if (!!f.acceptData(a)) {                var d, e, g, h = f.expando,                    i = a.nodeType,                    j = i ? f.cache : a,                    k = i ? a[h] : h;                if (!j[k]) { return }                if (b) { d = c ? j[k] : j[k].data; if (d) { f.isArray(b) || (b in d ? b = [b] : (b = f.camelCase(b), b in d ? b = [b] : b = b.split(" "))); for (e = 0, g = b.length; e < g; e++) { delete d[b[e]] } if (!(c ? m : f.isEmptyObject)(d)) { return } } }                if (!c) { delete j[k].data; if (!m(j[k])) { return } }                f.support.deleteExpando || !j.setInterval ? delete j[k] : j[k] = null, i && (f.support.deleteExpando ? delete a[h] : a.removeAttribute ? a.removeAttribute(h) : a[h] = null)            }        },        _data: function(a, b, c) { return f.data(a, b, c, !0) },        acceptData: function(a) { if (a.nodeName) { var b = f.noData[a.nodeName.toLowerCase()]; if (b) { return b !== !0 && a.getAttribute("classid") === b } } return !0 }    }), f.fn.extend({        data: function(a, c) {            var d, e, g, h = null;            if (typeof a == "undefined") {                if (this.length) {                    h = f.data(this[0]);                    if (this[0].nodeType === 1 && !f._data(this[0], "parsedAttrs")) {                        e = this[0].attributes;                        for (var i = 0, j = e.length; i < j; i++) { g = e[i].name, g.indexOf("data-") === 0 && (g = f.camelCase(g.substring(5)), l(this[0], g, h[g])) }                        f._data(this[0], "parsedAttrs", !0)                    }                }                return h            }            if (typeof a == "object") { return this.each(function() { f.data(this, a) }) }            d = a.split("."), d[1] = d[1] ? "." + d[1] : "";            if (c === b) { h = this.triggerHandler("getData" + d[1] + "!", [d[0]]), h === b && this.length && (h = f.data(this[0], a), h = l(this[0], a, h)); return h === b && d[1] ? this.data(d[0]) : h }            return this.each(function() {                var b = f(this),                    e = [d[0], c];                b.triggerHandler("setData" + d[1] + "!", e), f.data(this, a, c), b.triggerHandler("changeData" + d[1] + "!", e)            })        },        removeData: function(a) { return this.each(function() { f.removeData(this, a) }) }    }), f.extend({        _mark: function(a, b) { a && (b = (b || "fx") + "mark", f._data(a, b, (f._data(a, b) || 0) + 1)) },        _unmark: function(a, b, c) {            a !== !0 && (c = b, b = a, a = !1);            if (b) {                c = c || "fx";                var d = c + "mark",                    e = a ? 0 : (f._data(b, d) || 1) - 1;                e ? f._data(b, d, e) : (f.removeData(b, d, !0), n(b, c, "mark"))            }        },        queue: function(a, b, c) { var d; if (a) { b = (b || "fx") + "queue", d = f._data(a, b), c && (!d || f.isArray(c) ? d = f._data(a, b, f.makeArray(c)) : d.push(c)); return d || [] } },        dequeue: function(a, b) {            b = b || "fx";            var c = f.queue(a, b),                d = c.shift(),                e = {};            d === "inprogress" && (d = c.shift()), d && (b === "fx" && c.unshift("inprogress"), f._data(a, b + ".run", e), d.call(a, function() { f.dequeue(a, b) }, e)), c.length || (f.removeData(a, b + "queue " + b + ".run", !0), n(a, b, "queue"))        }    }), f.fn.extend({        queue: function(a, c) {            typeof a != "string" && (c = a, a = "fx");            if (c === b) { return f.queue(this[0], a) }            return this.each(function() {                var b = f.queue(this, a, c);                a === "fx" && b[0] !== "inprogress" && f.dequeue(this, a)            })        },        dequeue: function(a) { return this.each(function() { f.dequeue(this, a) }) },        delay: function(a, b) {            a = f.fx ? f.fx.speeds[a] || a : a, b = b || "fx";            return this.queue(b, function(b, c) {                var d = setTimeout(b, a);                c.stop = function() { clearTimeout(d) }            })        },        clearQueue: function(a) { return this.queue(a || "fx", []) },        promise: function(a, c) {            function m() {--h || d.resolveWith(e, [e]) }            typeof a != "string" && (c = a, a = b), a = a || "fx";            var d = f.Deferred(),                e = this,                g = e.length,                h = 1,                i = a + "defer",                j = a + "queue",                k = a + "mark",                l;            while (g--) { if (l = f.data(e[g], i, b, !0) || (f.data(e[g], j, b, !0) || f.data(e[g], k, b, !0)) && f.data(e[g], i, f.Callbacks("once memory"), !0)) { h++, l.add(m) } }            m();            return d.promise()        }    });    var o = /[\n\t\r]/g,        p = /\s+/,        q = /\r/g,        r = /^(?:button|input)$/i,        s = /^(?:button|input|object|select|textarea)$/i,        t = /^a(?:rea)?$/i,        u = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,        v = f.support.getSetAttribute,        w, x, y;    f.fn.extend({        attr: function(a, b) { return f.access(this, a, b, !0, f.attr) },        removeAttr: function(a) { return this.each(function() { f.removeAttr(this, a) }) },        prop: function(a, b) { return f.access(this, a, b, !0, f.prop) },        removeProp: function(a) { a = f.propFix[a] || a; return this.each(function() { try { this[a] = b, delete this[a] } catch (c) {} }) },        addClass: function(a) {            var b, c, d, e, g, h, i;            if (f.isFunction(a)) { return this.each(function(b) { f(this).addClass(a.call(this, b, this.className)) }) }            if (a && typeof a == "string") {                b = a.split(p);                for (c = 0, d = this.length; c < d; c++) {                    e = this[c];                    if (e.nodeType === 1) {                        if (!e.className && b.length === 1) { e.className = a } else {                            g = " " + e.className + " ";                            for (h = 0, i = b.length; h < i; h++) {~g.indexOf(" " + b[h] + " ") || (g += b[h] + " ") }                            e.className = f.trim(g)                        }                    }                }            }            return this        },        removeClass: function(a) {            var c, d, e, g, h, i, j;            if (f.isFunction(a)) { return this.each(function(b) { f(this).removeClass(a.call(this, b, this.className)) }) }            if (a && typeof a == "string" || a === b) {                c = (a || "").split(p);                for (d = 0, e = this.length; d < e; d++) {                    g = this[d];                    if (g.nodeType === 1 && g.className) {                        if (a) {                            h = (" " + g.className + " ").replace(o, " ");                            for (i = 0, j = c.length; i < j; i++) { h = h.replace(" " + c[i] + " ", " ") }                            g.className = f.trim(h)                        } else { g.className = "" }                    }                }            }            return this        },        toggleClass: function(a, b) {            var c = typeof a,                d = typeof b == "boolean";            if (f.isFunction(a)) { return this.each(function(c) { f(this).toggleClass(a.call(this, c, this.className, b), b) }) }            return this.each(function() {                if (c === "string") {                    var e, g = 0,                        h = f(this),                        i = b,                        j = a.split(p);                    while (e = j[g++]) { i = d ? i : !h.hasClass(e), h[i ? "addClass" : "removeClass"](e) }                } else { if (c === "undefined" || c === "boolean") { this.className && f._data(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : f._data(this, "__className__") || "" } }            })        },        hasClass: function(a) {            var b = " " + a + " ",                c = 0,                d = this.length;            for (; c < d; c++) { if (this[c].nodeType === 1 && (" " + this[c].className + " ").replace(o, " ").indexOf(b) > -1) { return !0 } }            return !1        },        val: function(a) {            var c, d, e, g = this[0];            if (!!arguments.length) {                e = f.isFunction(a);                return this.each(function(d) {                    var g = f(this),                        h;                    if (this.nodeType === 1) { e ? h = a.call(this, d, g.val()) : h = a, h == null ? h = "" : typeof h == "number" ? h += "" : f.isArray(h) && (h = f.map(h, function(a) { return a == null ? "" : a + "" })), c = f.valHooks[this.nodeName.toLowerCase()] || f.valHooks[this.type]; if (!c || !("set" in c) || c.set(this, h, "value") === b) { this.value = h } }                })            }            if (g) {                c = f.valHooks[g.nodeName.toLowerCase()] || f.valHooks[g.type];                if (c && "get" in c && (d = c.get(g, "value")) !== b) { return d }                d = g.value;                return typeof d == "string" ? d.replace(q, "") : d == null ? "" : d            }        }    }), f.extend({        valHooks: {            option: { get: function(a) { var b = a.attributes.value; return !b || b.specified ? a.value : a.text } },            select: {                get: function(a) {                    var b, c, d, e, g = a.selectedIndex,                        h = [],                        i = a.options,                        j = a.type === "select-one";                    if (g < 0) { return null }                    c = j ? g : 0, d = j ? g + 1 : i.length;                    for (; c < d; c++) {                        e = i[c];                        if (e.selected && (f.support.optDisabled ? !e.disabled : e.getAttribute("disabled") === null) && (!e.parentNode.disabled || !f.nodeName(e.parentNode, "optgroup"))) {                            b = f(e).val();                            if (j) { return b }                            h.push(b)                        }                    }                    if (j && !h.length && i.length) { return f(i[g]).val() }                    return h                },                set: function(a, b) {                    var c = f.makeArray(b);                    f(a).find("option").each(function() { this.selected = f.inArray(f(this).val(), c) >= 0 }), c.length || (a.selectedIndex = -1);                    return c                }            }        },        attrFn: { val: !0, css: !0, html: !0, text: !0, data: !0, width: !0, height: !0, offset: !0 },        attr: function(a, c, d, e) {            var g, h, i, j = a.nodeType;            if (!!a && j !== 3 && j !== 8 && j !== 2) {                if (e && c in f.attrFn) { return f(a)[c](d) }                if (typeof a.getAttribute == "undefined") { return f.prop(a, c, d) }                i = j !== 1 || !f.isXMLDoc(a), i && (c = c.toLowerCase(), h = f.attrHooks[c] || (u.test(c) ? x : w));                if (d !== b) {                    if (d === null) { f.removeAttr(a, c); return }                    if (h && "set" in h && i && (g = h.set(a, d, c)) !== b) { return g }                    a.setAttribute(c, "" + d);                    return d                }                if (h && "get" in h && i && (g = h.get(a, c)) !== null) { return g }                g = a.getAttribute(c);                return g === null ? b : g            }        },        removeAttr: function(a, b) { var c, d, e, g, h = 0; if (b && a.nodeType === 1) { d = b.toLowerCase().split(p), g = d.length; for (; h < g; h++) { e = d[h], e && (c = f.propFix[e] || e, f.attr(a, e, ""), a.removeAttribute(v ? e : c), u.test(e) && c in a && (a[c] = !1)) } } },        attrHooks: {            type: {                set: function(a, b) {                    if (r.test(a.nodeName) && a.parentNode) { f.error("type property can't be changed") } else {                        if (!f.support.radioValue && b === "radio" && f.nodeName(a, "input")) {                            var c = a.value;                            a.setAttribute("type", b), c && (a.value = c);                            return b                        }                    }                }            },            value: {                get: function(a, b) { if (w && f.nodeName(a, "button")) { return w.get(a, b) } return b in a ? a.value : null },                set: function(a, b, c) {                    if (w && f.nodeName(a, "button")) { return w.set(a, b, c) }                    a.value = b                }            }        },        propFix: { tabindex: "tabIndex", readonly: "readOnly", "for": "htmlFor", "class": "className", maxlength: "maxLength", cellspacing: "cellSpacing", cellpadding: "cellPadding", rowspan: "rowSpan", colspan: "colSpan", usemap: "useMap", frameborder: "frameBorder", contenteditable: "contentEditable" },        prop: function(a, c, d) { var e, g, h, i = a.nodeType; if (!!a && i !== 3 && i !== 8 && i !== 2) { h = i !== 1 || !f.isXMLDoc(a), h && (c = f.propFix[c] || c, g = f.propHooks[c]); return d !== b ? g && "set" in g && (e = g.set(a, d, c)) !== b ? e : a[c] = d : g && "get" in g && (e = g.get(a, c)) !== null ? e : a[c] } },        propHooks: { tabIndex: { get: function(a) { var c = a.getAttributeNode("tabindex"); return c && c.specified ? parseInt(c.value, 10) : s.test(a.nodeName) || t.test(a.nodeName) && a.href ? 0 : b } } }    }), f.attrHooks.tabindex = f.propHooks.tabIndex, x = {        get: function(a, c) { var d, e = f.prop(a, c); return e === !0 || typeof e != "boolean" && (d = a.getAttributeNode(c)) && d.nodeValue !== !1 ? c.toLowerCase() : b },        set: function(a, b, c) {            var d;            b === !1 ? f.removeAttr(a, c) : (d = f.propFix[c] || c, d in a && (a[d] = !0), a.setAttribute(c, c.toLowerCase()));            return c        }    }, v || (y = { name: !0, id: !0 }, w = f.valHooks.button = {        get: function(a, c) {            var d;            d = a.getAttributeNode(c);            return d && (y[c] ? d.nodeValue !== "" : d.specified) ? d.nodeValue : b        },        set: function(a, b, d) {            var e = a.getAttributeNode(d);            e || (e = c.createAttribute(d), a.setAttributeNode(e));            return e.nodeValue = b + ""        }    }, f.attrHooks.tabindex.set = w.set, f.each(["width", "height"], function(a, b) { f.attrHooks[b] = f.extend(f.attrHooks[b], { set: function(a, c) { if (c === "") { a.setAttribute(b, "auto"); return c } } }) }), f.attrHooks.contenteditable = { get: w.get, set: function(a, b, c) { b === "" && (b = "false"), w.set(a, b, c) } }), f.support.hrefNormalized || f.each(["href", "src", "width", "height"], function(a, c) { f.attrHooks[c] = f.extend(f.attrHooks[c], { get: function(a) { var d = a.getAttribute(c, 2); return d === null ? b : d } }) }), f.support.style || (f.attrHooks.style = { get: function(a) { return a.style.cssText.toLowerCase() || b }, set: function(a, b) { return a.style.cssText = "" + b } }), f.support.optSelected || (f.propHooks.selected = f.extend(f.propHooks.selected, {        get: function(a) {            var b = a.parentNode;            b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);            return null        }    })), f.support.enctype || (f.propFix.enctype = "encoding"), f.support.checkOn || f.each(["radio", "checkbox"], function() { f.valHooks[this] = { get: function(a) { return a.getAttribute("value") === null ? "on" : a.value } } }), f.each(["radio", "checkbox"], function() { f.valHooks[this] = f.extend(f.valHooks[this], { set: function(a, b) { if (f.isArray(b)) { return a.checked = f.inArray(f(a).val(), b) >= 0 } } }) });    var z = /^(?:textarea|input|select)$/i,        A = /^([^\.]*)?(?:\.(.+))?$/,        B = /\bhover(\.\S+)?\b/,        C = /^key/,        D = /^(?:mouse|contextmenu)|click/,        E = /^(?:focusinfocus|focusoutblur)$/,        F = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,        G = function(a) {            var b = F.exec(a);            b && (b[1] = (b[1] || "").toLowerCase(), b[3] = b[3] && new RegExp("(?:^|\\s)" + b[3] + "(?:\\s|$)"));            return b        },        H = function(a, b) { var c = a.attributes || {}; return (!b[1] || a.nodeName.toLowerCase() === b[1]) && (!b[2] || (c.id || {}).value === b[2]) && (!b[3] || b[3].test((c["class"] || {}).value)) },        I = function(a) { return f.event.special.hover ? a : a.replace(B, "mouseenter$1 mouseleave$1") };    f.event = {            add: function(a, c, d, e, g) {                var h, i, j, k, l, m, n, o, p, q, r, s;                if (!(a.nodeType === 3 || a.nodeType === 8 || !c || !d || !(h = f._data(a)))) {                    d.handler && (p = d, d = p.handler), d.guid || (d.guid = f.guid++), j = h.events, j || (h.events = j = {}), i = h.handle, i || (h.handle = i = function(a) { return typeof f != "undefined" && (!a || f.event.triggered !== a.type) ? f.event.dispatch.apply(i.elem, arguments) : b }, i.elem = a), c = f.trim(I(c)).split(" ");                    for (k = 0; k < c.length; k++) {                        l = A.exec(c[k]) || [], m = l[1], n = (l[2] || "").split(".").sort(), s = f.event.special[m] || {}, m = (g ? s.delegateType : s.bindType) || m, s = f.event.special[m] || {}, o = f.extend({ type: m, origType: l[1], data: e, handler: d, guid: d.guid, selector: g, quick: G(g), namespace: n.join(".") }, p), r = j[m];                        if (!r) { r = j[m] = [], r.delegateCount = 0; if (!s.setup || s.setup.call(a, e, n, i) === !1) { a.addEventListener ? a.addEventListener(m, i, !1) : a.attachEvent && a.attachEvent("on" + m, i) } }                        s.add && (s.add.call(a, o), o.handler.guid || (o.handler.guid = d.guid)), g ? r.splice(r.delegateCount++, 0, o) : r.push(o), f.event.global[m] = !0                    }                    a = null                }            },            global: {},            remove: function(a, b, c, d, e) {                var g = f.hasData(a) && f._data(a),                    h, i, j, k, l, m, n, o, p, q, r, s;                if (!!g && !!(o = g.events)) {                    b = f.trim(I(b || "")).split(" ");                    for (h = 0; h < b.length; h++) {                        i = A.exec(b[h]) || [], j = k = i[1], l = i[2];                        if (!j) { for (j in o) { f.event.remove(a, j + b[h], c, d, !0) } continue }                        p = f.event.special[j] || {}, j = (d ? p.delegateType : p.bindType) || j, r = o[j] || [], m = r.length, l = l ? new RegExp("(^|\\.)" + l.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;                        for (n = 0; n < r.length; n++) { s = r[n], (e || k === s.origType) && (!c || c.guid === s.guid) && (!l || l.test(s.namespace)) && (!d || d === s.selector || d === "**" && s.selector) && (r.splice(n--, 1), s.selector && r.delegateCount--, p.remove && p.remove.call(a, s)) }                        r.length === 0 && m !== r.length && ((!p.teardown || p.teardown.call(a, l) === !1) && f.removeEvent(a, j, g.handle), delete o[j])                    }                    f.isEmptyObject(o) && (q = g.handle, q && (q.elem = null), f.removeData(a, ["events", "handle"], !0))                }            },            customEvent: { getData: !0, setData: !0, changeData: !0 },            trigger: function(c, d, e, g) {                if (!e || e.nodeType !== 3 && e.nodeType !== 8) {                    var h = c.type || c,                        i = [],                        j, k, l, m, n, o, p, q, r, s;                    if (E.test(h + f.event.triggered)) { return }                    h.indexOf("!") >= 0 && (h = h.slice(0, -1), k = !0), h.indexOf(".") >= 0 && (i = h.split("."), h = i.shift(), i.sort());                    if ((!e || f.event.customEvent[h]) && !f.event.global[h]) { return }                    c = typeof c == "object" ? c[f.expando] ? c : new f.Event(h, c) : new f.Event(h), c.type = h, c.isTrigger = !0, c.exclusive = k, c.namespace = i.join("."), c.namespace_re = c.namespace ? new RegExp("(^|\\.)" + i.join("\\.(?:.*\\.)?") + "(\\.|$)") : null, o = h.indexOf(":") < 0 ? "on" + h : "";                    if (!e) { j = f.cache; for (l in j) { j[l].events && j[l].events[h] && f.event.trigger(c, d, j[l].handle.elem, !0) } return }                    c.result = b, c.target || (c.target = e), d = d != null ? f.makeArray(d) : [], d.unshift(c), p = f.event.special[h] || {};                    if (p.trigger && p.trigger.apply(e, d) === !1) { return }                    r = [                        [e, p.bindType || h]                    ];                    if (!g && !p.noBubble && !f.isWindow(e)) {                        s = p.delegateType || h, m = E.test(s + h) ? e : e.parentNode, n = null;                        for (; m; m = m.parentNode) { r.push([m, s]), n = m }                        n && n === e.ownerDocument && r.push([n.defaultView || n.parentWindow || a, s])                    }                    for (l = 0; l < r.length && !c.isPropagationStopped(); l++) { m = r[l][0], c.type = r[l][1], q = (f._data(m, "events") || {})[c.type] && f._data(m, "handle"), q && q.apply(m, d), q = o && m[o], q && f.acceptData(m) && q.apply(m, d) === !1 && c.preventDefault() }                    c.type = h, !g && !c.isDefaultPrevented() && (!p._default || p._default.apply(e.ownerDocument, d) === !1) && (h !== "click" || !f.nodeName(e, "a")) && f.acceptData(e) && o && e[h] && (h !== "focus" && h !== "blur" || c.target.offsetWidth !== 0) && !f.isWindow(e) && (n = e[o], n && (e[o] = null), f.event.triggered = h, e[h](), f.event.triggered = b, n && (e[o] = n));                    return c.result                }            },            dispatch: function(c) {                c = f.event.fix(c || a.event);                var d = (f._data(this, "events") || {})[c.type] || [],                    e = d.delegateCount,                    g = [].slice.call(arguments, 0),                    h = !c.exclusive && !c.namespace,                    i = [],                    j, k, l, m, n, o, p, q, r, s, t;                g[0] = c, c.delegateTarget = this;                if (e && !c.target.disabled && (!c.button || c.type !== "click")) {                    m = f(this), m.context = this.ownerDocument || this;                    for (l = c.target; l != this; l = l.parentNode || this) {                        o = {}, q = [], m[0] = l;                        for (j = 0; j < e; j++) { r = d[j], s = r.selector, o[s] === b && (o[s] = r.quick ? H(l, r.quick) : m.is(s)), o[s] && q.push(r) }                        q.length && i.push({ elem: l, matches: q })                    }                }                d.length > e && i.push({ elem: this, matches: d.slice(e) });                for (j = 0; j < i.length && !c.isPropagationStopped(); j++) { p = i[j], c.currentTarget = p.elem; for (k = 0; k < p.matches.length && !c.isImmediatePropagationStopped(); k++) { r = p.matches[k]; if (h || !c.namespace && !r.namespace || c.namespace_re && c.namespace_re.test(r.namespace)) { c.data = r.data, c.handleObj = r, n = ((f.event.special[r.origType] || {}).handle || r.handler).apply(p.elem, g), n !== b && (c.result = n, n === !1 && (c.preventDefault(), c.stopPropagation())) } } }                return c.result            },            props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),            fixHooks: {},            keyHooks: { props: "char charCode key keyCode".split(" "), filter: function(a, b) { a.which == null && (a.which = b.charCode != null ? b.charCode : b.keyCode); return a } },            mouseHooks: {                props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),                filter: function(a, d) {                    var e, f, g, h = d.button,                        i = d.fromElement;                    a.pageX == null && d.clientX != null && (e = a.target.ownerDocument || c, f = e.documentElement, g = e.body, a.pageX = d.clientX + (f && f.scrollLeft || g && g.scrollLeft || 0) - (f && f.clientLeft || g && g.clientLeft || 0), a.pageY = d.clientY + (f && f.scrollTop || g && g.scrollTop || 0) - (f && f.clientTop || g && g.clientTop || 0)), !a.relatedTarget && i && (a.relatedTarget = i === a.target ? d.toElement : i), !a.which && h !== b && (a.which = h & 1 ? 1 : h & 2 ? 3 : h & 4 ? 2 : 0);                    return a                }            },            fix: function(a) {                if (a[f.expando]) { return a }                var d, e, g = a,                    h = f.event.fixHooks[a.type] || {},                    i = h.props ? this.props.concat(h.props) : this.props;                a = f.Event(g);                for (d = i.length; d;) { e = i[--d], a[e] = g[e] }                a.target || (a.target = g.srcElement || c), a.target.nodeType === 3 && (a.target = a.target.parentNode), a.metaKey === b && (a.metaKey = a.ctrlKey);                return h.filter ? h.filter(a, g) : a            },            special: { ready: { setup: f.bindReady }, load: { noBubble: !0 }, focus: { delegateType: "focusin" }, blur: { delegateType: "focusout" }, beforeunload: { setup: function(a, b, c) { f.isWindow(this) && (this.onbeforeunload = c) }, teardown: function(a, b) { this.onbeforeunload === b && (this.onbeforeunload = null) } } },            simulate: function(a, b, c, d) {                var e = f.extend(new f.Event, c, { type: a, isSimulated: !0, originalEvent: {} });                d ? f.event.trigger(e, null, b) : f.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault()            }        }, f.event.handle = f.event.dispatch, f.removeEvent = c.removeEventListener ? function(a, b, c) { a.removeEventListener && a.removeEventListener(b, c, !1) } : function(a, b, c) { a.detachEvent && a.detachEvent("on" + b, c) }, f.Event = function(a, b) {            if (!(this instanceof f.Event)) { return new f.Event(a, b) }            a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || a.returnValue === !1 || a.getPreventDefault && a.getPreventDefault() ? K : J) : this.type = a, b && f.extend(this, b), this.timeStamp = a && a.timeStamp || f.now(), this[f.expando] = !0        }, f.Event.prototype = { preventDefault: function() { this.isDefaultPrevented = K; var a = this.originalEvent;!a || (a.preventDefault ? a.preventDefault() : a.returnValue = !1) }, stopPropagation: function() { this.isPropagationStopped = K; var a = this.originalEvent;!a || (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0) }, stopImmediatePropagation: function() { this.isImmediatePropagationStopped = K, this.stopPropagation() }, isDefaultPrevented: J, isPropagationStopped: J, isImmediatePropagationStopped: J }, f.each({ mouseenter: "mouseover", mouseleave: "mouseout" }, function(a, b) {            f.event.special[a] = {                delegateType: b,                bindType: b,                handle: function(a) {                    var c = this,                        d = a.relatedTarget,                        e = a.handleObj,                        g = e.selector,                        h;                    if (!d || d !== c && !f.contains(c, d)) { a.type = e.origType, h = e.handler.apply(this, arguments), a.type = b }                    return h                }            }        }), f.support.submitBubbles || (f.event.special.submit = {            setup: function() {                if (f.nodeName(this, "form")) { return !1 }                f.event.add(this, "click._submit keypress._submit", function(a) {                    var c = a.target,                        d = f.nodeName(c, "input") || f.nodeName(c, "button") ? c.form : b;                    d && !d._submit_attached && (f.event.add(d, "submit._submit", function(a) { this.parentNode && !a.isTrigger && f.event.simulate("submit", this.parentNode, a, !0) }), d._submit_attached = !0)                })            },            teardown: function() {                if (f.nodeName(this, "form")) { return !1 }                f.event.remove(this, "._submit")            }        }), f.support.changeBubbles || (f.event.special.change = {            setup: function() {                if (z.test(this.nodeName)) { if (this.type === "checkbox" || this.type === "radio") { f.event.add(this, "propertychange._change", function(a) { a.originalEvent.propertyName === "checked" && (this._just_changed = !0) }), f.event.add(this, "click._change", function(a) { this._just_changed && !a.isTrigger && (this._just_changed = !1, f.event.simulate("change", this, a, !0)) }) } return !1 }                f.event.add(this, "beforeactivate._change", function(a) {                    var b = a.target;                    z.test(b.nodeName) && !b._change_attached && (f.event.add(b, "change._change", function(a) { this.parentNode && !a.isSimulated && !a.isTrigger && f.event.simulate("change", this.parentNode, a, !0) }), b._change_attached = !0)                })            },            handle: function(a) { var b = a.target; if (this !== b || a.isSimulated || a.isTrigger || b.type !== "radio" && b.type !== "checkbox") { return a.handleObj.handler.apply(this, arguments) } },            teardown: function() { f.event.remove(this, "._change"); return z.test(this.nodeName) }        }), f.support.focusinBubbles || f.each({ focus: "focusin", blur: "focusout" }, function(a, b) {            var d = 0,                e = function(a) { f.event.simulate(b, a.target, f.event.fix(a), !0) };            f.event.special[b] = { setup: function() { d++ === 0 && c.addEventListener(a, e, !0) }, teardown: function() {--d === 0 && c.removeEventListener(a, e, !0) } }        }), f.fn.extend({            on: function(a, c, d, e, g) {                var h, i;                if (typeof a == "object") { typeof c != "string" && (d = c, c = b); for (i in a) { this.on(i, c, d, a[i], g) } return this }                d == null && e == null ? (e = c, d = c = b) : e == null && (typeof c == "string" ? (e = d, d = b) : (e = d, d = c, c = b));                if (e === !1) { e = J } else { if (!e) { return this } }                g === 1 && (h = e, e = function(a) { f().off(a); return h.apply(this, arguments) }, e.guid = h.guid || (h.guid = f.guid++));                return this.each(function() { f.event.add(this, a, e, d, c) })            },            one: function(a, b, c, d) { return this.on.call(this, a, b, c, d, 1) },            off: function(a, c, d) {                if (a && a.preventDefault && a.handleObj) {                    var e = a.handleObj;                    f(a.delegateTarget).off(e.namespace ? e.type + "." + e.namespace : e.type, e.selector, e.handler);                    return this                }                if (typeof a == "object") { for (var g in a) { this.off(g, c, a[g]) } return this }                if (c === !1 || typeof c == "function") { d = c, c = b }                d === !1 && (d = J);                return this.each(function() { f.event.remove(this, a, d, c) })            },            bind: function(a, b, c) { return this.on(a, null, b, c) },            unbind: function(a, b) { return this.off(a, null, b) },            live: function(a, b, c) { f(this.context).on(a, this.selector, b, c); return this },            die: function(a, b) { f(this.context).off(a, this.selector || "**", b); return this },            delegate: function(a, b, c, d) { return this.on(b, a, c, d) },            undelegate: function(a, b, c) { return arguments.length == 1 ? this.off(a, "**") : this.off(b, a, c) },            trigger: function(a, b) { return this.each(function() { f.event.trigger(a, b, this) }) },            triggerHandler: function(a, b) { if (this[0]) { return f.event.trigger(a, b, this[0], !0) } },            toggle: function(a) {                var b = arguments,                    c = a.guid || f.guid++,                    d = 0,                    e = function(c) {                        var e = (f._data(this, "lastToggle" + a.guid) || 0) % d;                        f._data(this, "lastToggle" + a.guid, e + 1), c.preventDefault();                        return b[e].apply(this, arguments) || !1                    };                e.guid = c;                while (d < b.length) { b[d++].guid = c }                return this.click(e)            },            hover: function(a, b) { return this.mouseenter(a).mouseleave(b || a) }        }), f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(a, b) { f.fn[b] = function(a, c) { c == null && (c = a, a = null); return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b) }, f.attrFn && (f.attrFn[b] = !0), C.test(b) && (f.event.fixHooks[b] = f.event.keyHooks), D.test(b) && (f.event.fixHooks[b] = f.event.mouseHooks) }),        function() {            function x(a, b, c, e, f, g) {                for (var h = 0, i = e.length; h < i; h++) {                    var j = e[h];                    if (j) {                        var k = !1;                        j = j[a];                        while (j) {                            if (j[d] === c) { k = e[j.sizset]; break }                            if (j.nodeType === 1) { g || (j[d] = c, j.sizset = h); if (typeof b != "string") { if (j === b) { k = !0; break } } else { if (m.filter(b, [j]).length > 0) { k = j; break } } }                            j = j[a]                        }                        e[h] = k                    }                }            }            function w(a, b, c, e, f, g) {                for (var h = 0, i = e.length; h < i; h++) {                    var j = e[h];                    if (j) {                        var k = !1;                        j = j[a];                        while (j) {                            if (j[d] === c) { k = e[j.sizset]; break }                            j.nodeType === 1 && !g && (j[d] = c, j.sizset = h);                            if (j.nodeName.toLowerCase() === b) { k = j; break }                            j = j[a]                        }                        e[h] = k                    }                }            }            var a = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,                d = "sizcache" + (Math.random() + "").replace(".", ""),                e = 0,                g = Object.prototype.toString,                h = !1,                i = !0,                j = /\\/g,                k = /\r\n/g,                l = /\W/;            [0, 0].sort(function() { i = !1; return 0 });            var m = function(b, d, e, f) {                e = e || [], d = d || c;                var h = d;                if (d.nodeType !== 1 && d.nodeType !== 9) { return [] }                if (!b || typeof b != "string") { return e }                var i, j, k, l, n, q, r, t, u = !0,                    v = m.isXML(d),                    w = [],                    x = b;                do { a.exec(""), i = a.exec(x); if (i) { x = i[3], w.push(i[1]); if (i[2]) { l = i[3]; break } } } while (i);                if (w.length > 1 && p.exec(b)) { if (w.length === 2 && o.relative[w[0]]) { j = y(w[0] + w[1], d, f) } else { j = o.relative[w[0]] ? [d] : m(w.shift(), d); while (w.length) { b = w.shift(), o.relative[b] && (b += w.shift()), j = y(b, j, f) } } } else {!f && w.length > 1 && d.nodeType === 9 && !v && o.match.ID.test(w[0]) && !o.match.ID.test(w[w.length - 1]) && (n = m.find(w.shift(), d, v), d = n.expr ? m.filter(n.expr, n.set)[0] : n.set[0]); if (d) { n = f ? { expr: w.pop(), set: s(f) } : m.find(w.pop(), w.length === 1 && (w[0] === "~" || w[0] === "+") && d.parentNode ? d.parentNode : d, v), j = n.expr ? m.filter(n.expr, n.set) : n.set, w.length > 0 ? k = s(j) : u = !1; while (w.length) { q = w.pop(), r = q, o.relative[q] ? r = w.pop() : q = "", r == null && (r = d), o.relative[q](k, r, v) } } else { k = w = [] } }                k || (k = j), k || m.error(q || b);                if (g.call(k) === "[object Array]") { if (!u) { e.push.apply(e, k) } else { if (d && d.nodeType === 1) { for (t = 0; k[t] != null; t++) { k[t] && (k[t] === !0 || k[t].nodeType === 1 && m.contains(d, k[t])) && e.push(j[t]) } } else { for (t = 0; k[t] != null; t++) { k[t] && k[t].nodeType === 1 && e.push(j[t]) } } } } else { s(k, e) }                l && (m(l, h, e, f), m.uniqueSort(e));                return e            };            m.uniqueSort = function(a) { if (u) { h = i, a.sort(u); if (h) { for (var b = 1; b < a.length; b++) { a[b] === a[b - 1] && a.splice(b--, 1) } } } return a }, m.matches = function(a, b) { return m(a, null, null, b) }, m.matchesSelector = function(a, b) { return m(b, null, null, [a]).length > 0 }, m.find = function(a, b, c) {                var d, e, f, g, h, i;                if (!a) { return [] }                for (e = 0, f = o.order.length; e < f; e++) { h = o.order[e]; if (g = o.leftMatch[h].exec(a)) { i = g[1], g.splice(1, 1); if (i.substr(i.length - 1) !== "\\") { g[1] = (g[1] || "").replace(j, ""), d = o.find[h](g, b, c); if (d != null) { a = a.replace(o.match[h], ""); break } } } }                d || (d = typeof b.getElementsByTagName != "undefined" ? b.getElementsByTagName("*") : []);                return { set: d, expr: a }            }, m.filter = function(a, c, d, e) {                var f, g, h, i, j, k, l, n, p, q = a,                    r = [],                    s = c,                    t = c && c[0] && m.isXML(c[0]);                while (a && c.length) {                    for (h in o.filter) {                        if ((f = o.leftMatch[h].exec(a)) != null && f[2]) {                            k = o.filter[h], l = f[1], g = !1, f.splice(1, 1);                            if (l.substr(l.length - 1) === "\\") { continue }                            s === r && (r = []);                            if (o.preFilter[h]) { f = o.preFilter[h](f, s, d, r, e, t); if (!f) { g = i = !0 } else { if (f === !0) { continue } } }                            if (f) {                                for (n = 0;                                    (j = s[n]) != null; n++) { j && (i = k(j, f, n, s), p = e ^ i, d && i != null ? p ? g = !0 : s[n] = !1 : p && (r.push(j), g = !0)) }                            }                            if (i !== b) { d || (s = r), a = a.replace(o.match[h], ""); if (!g) { return [] } break }                        }                    }                    if (a === q) { if (g == null) { m.error(a) } else { break } }                    q = a                }                return s            }, m.error = function(a) { throw new Error("Syntax error, unrecognized expression: " + a) };            var n = m.getText = function(a) {                    var b, c, d = a.nodeType,                        e = "";                    if (d) { if (d === 1 || d === 9) { if (typeof a.textContent == "string") { return a.textContent } if (typeof a.innerText == "string") { return a.innerText.replace(k, "") } for (a = a.firstChild; a; a = a.nextSibling) { e += n(a) } } else { if (d === 3 || d === 4) { return a.nodeValue } } } else { for (b = 0; c = a[b]; b++) { c.nodeType !== 8 && (e += n(c)) } }                    return e                },                o = m.selectors = {                    order: ["ID", "NAME", "TAG"],                    match: { ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/, CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/, NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/, ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/, TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/, CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/, POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/, PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/ },                    leftMatch: {},                    attrMap: { "class": "className", "for": "htmlFor" },                    attrHandle: { href: function(a) { return a.getAttribute("href") }, type: function(a) { return a.getAttribute("type") } },                    relative: {                        "+": function(a, b) {                            var c = typeof b == "string",                                d = c && !l.test(b),                                e = c && !d;                            d && (b = b.toLowerCase());                            for (var f = 0, g = a.length, h; f < g; f++) {                                if (h = a[f]) {                                    while ((h = h.previousSibling) && h.nodeType !== 1) {}                                    a[f] = e || h && h.nodeName.toLowerCase() === b ? h || !1 : h === b                                }                            }                            e && m.filter(b, a, !0)                        },                        ">": function(a, b) {                            var c, d = typeof b == "string",                                e = 0,                                f = a.length;                            if (d && !l.test(b)) {                                b = b.toLowerCase();                                for (; e < f; e++) {                                    c = a[e];                                    if (c) {                                        var g = c.parentNode;                                        a[e] = g.nodeName.toLowerCase() === b ? g : !1                                    }                                }                            } else {                                for (; e < f; e++) { c = a[e], c && (a[e] = d ? c.parentNode : c.parentNode === b) }                                d && m.filter(b, a, !0)                            }                        },                        "": function(a, b, c) {                            var d, f = e++,                                g = x;                            typeof b == "string" && !l.test(b) && (b = b.toLowerCase(), d = b, g = w), g("parentNode", b, f, a, d, c)                        },                        "~": function(a, b, c) {                            var d, f = e++,                                g = x;                            typeof b == "string" && !l.test(b) && (b = b.toLowerCase(), d = b, g = w), g("previousSibling", b, f, a, d, c)                        }                    },                    find: {                        ID: function(a, b, c) { if (typeof b.getElementById != "undefined" && !c) { var d = b.getElementById(a[1]); return d && d.parentNode ? [d] : [] } },                        NAME: function(a, b) {                            if (typeof b.getElementsByName != "undefined") {                                var c = [],                                    d = b.getElementsByName(a[1]);                                for (var e = 0, f = d.length; e < f; e++) { d[e].getAttribute("name") === a[1] && c.push(d[e]) }                                return c.length === 0 ? null : c                            }                        },                        TAG: function(a, b) { if (typeof b.getElementsByTagName != "undefined") { return b.getElementsByTagName(a[1]) } }                    },                    preFilter: {                        CLASS: function(a, b, c, d, e, f) {                            a = " " + a[1].replace(j, "") + " ";                            if (f) { return a }                            for (var g = 0, h;                                (h = b[g]) != null; g++) { h && (e ^ (h.className && (" " + h.className + " ").replace(/[\t\n\r]/g, " ").indexOf(a) >= 0) ? c || d.push(h) : c && (b[g] = !1)) }                            return !1                        },                        ID: function(a) { return a[1].replace(j, "") },                        TAG: function(a, b) { return a[1].replace(j, "").toLowerCase() },                        CHILD: function(a) {                            if (a[1] === "nth") {                                a[2] || m.error(a[0]), a[2] = a[2].replace(/^\+|\s*/g, "");                                var b = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2] === "even" && "2n" || a[2] === "odd" && "2n+1" || !/\D/.test(a[2]) && "0n+" + a[2] || a[2]);                                a[2] = b[1] + (b[2] || 1) - 0, a[3] = b[3] - 0                            } else { a[2] && m.error(a[0]) }                            a[0] = e++;                            return a                        },                        ATTR: function(a, b, c, d, e, f) { var g = a[1] = a[1].replace(j, "");!f && o.attrMap[g] && (a[1] = o.attrMap[g]), a[4] = (a[4] || a[5] || "").replace(j, ""), a[2] === "~=" && (a[4] = " " + a[4] + " "); return a },                        PSEUDO: function(b, c, d, e, f) {                            if (b[1] === "not") {                                if ((a.exec(b[3]) || "").length > 1 || /^\w/.test(b[3])) { b[3] = m(b[3], null, null, c) } else {                                    var g = m.filter(b[3], c, d, !0 ^ f);                                    d || e.push.apply(e, g);                                    return !1                                }                            } else { if (o.match.POS.test(b[0]) || o.match.CHILD.test(b[0])) { return !0 } }                            return b                        },                        POS: function(a) { a.unshift(!0); return a }                    },                    filters: {                        enabled: function(a) { return a.disabled === !1 && a.type !== "hidden" },                        disabled: function(a) { return a.disabled === !0 },                        checked: function(a) { return a.checked === !0 },                        selected: function(a) { a.parentNode && a.parentNode.selectedIndex; return a.selected === !0 },                        parent: function(a) { return !!a.firstChild },                        empty: function(a) { return !a.firstChild },                        has: function(a, b, c) { return !!m(c[3], a).length },                        header: function(a) { return /h\d/i.test(a.nodeName) },                        text: function(a) {                            var b = a.getAttribute("type"),                                c = a.type;                            return a.nodeName.toLowerCase() === "input" && "text" === c && (b === c || b === null)                        },                        radio: function(a) { return a.nodeName.toLowerCase() === "input" && "radio" === a.type },                        checkbox: function(a) { return a.nodeName.toLowerCase() === "input" && "checkbox" === a.type },                        file: function(a) { return a.nodeName.toLowerCase() === "input" && "file" === a.type },                        password: function(a) { return a.nodeName.toLowerCase() === "input" && "password" === a.type },                        submit: function(a) { var b = a.nodeName.toLowerCase(); return (b === "input" || b === "button") && "submit" === a.type },                        image: function(a) { return a.nodeName.toLowerCase() === "input" && "image" === a.type },                        reset: function(a) { var b = a.nodeName.toLowerCase(); return (b === "input" || b === "button") && "reset" === a.type },                        button: function(a) { var b = a.nodeName.toLowerCase(); return b === "input" && "button" === a.type || b === "button" },                        input: function(a) { return /input|select|textarea|button/i.test(a.nodeName) },                        focus: function(a) { return a === a.ownerDocument.activeElement }                    },                    setFilters: { first: function(a, b) { return b === 0 }, last: function(a, b, c, d) { return b === d.length - 1 }, even: function(a, b) { return b % 2 === 0 }, odd: function(a, b) { return b % 2 === 1 }, lt: function(a, b, c) { return b < c[3] - 0 }, gt: function(a, b, c) { return b > c[3] - 0 }, nth: function(a, b, c) { return c[3] - 0 === b }, eq: function(a, b, c) { return c[3] - 0 === b } },                    filter: {                        PSEUDO: function(a, b, c, d) {                            var e = b[1],                                f = o.filters[e];                            if (f) { return f(a, c, b, d) }                            if (e === "contains") { return (a.textContent || a.innerText || n([a]) || "").indexOf(b[3]) >= 0 }                            if (e === "not") { var g = b[3]; for (var h = 0, i = g.length; h < i; h++) { if (g[h] === a) { return !1 } } return !0 }                            m.error(e)                        },                        CHILD: function(a, b) {                            var c, e, f, g, h, i, j, k = b[1],                                l = a;                            switch (k) {                                case "only":                                case "first":                                    while (l = l.previousSibling) { if (l.nodeType === 1) { return !1 } }                                    if (k === "first") { return !0 }                                    l = a;                                case "last":                                    while (l = l.nextSibling) { if (l.nodeType === 1) { return !1 } }                                    return !0;                                case "nth":                                    c = b[2], e = b[3];                                    if (c === 1 && e === 0) { return !0 }                                    f = b[0], g = a.parentNode;                                    if (g && (g[d] !== f || !a.nodeIndex)) {                                        i = 0;                                        for (l = g.firstChild; l; l = l.nextSibling) { l.nodeType === 1 && (l.nodeIndex = ++i) }                                        g[d] = f                                    }                                    j = a.nodeIndex - e;                                    return c === 0 ? j === 0 : j % c === 0 && j / c >= 0                            }                        },                        ID: function(a, b) { return a.nodeType === 1 && a.getAttribute("id") === b },                        TAG: function(a, b) { return b === "*" && a.nodeType === 1 || !!a.nodeName && a.nodeName.toLowerCase() === b },                        CLASS: function(a, b) { return (" " + (a.className || a.getAttribute("class")) + " ").indexOf(b) > -1 },                        ATTR: function(a, b) {                            var c = b[1],                                d = m.attr ? m.attr(a, c) : o.attrHandle[c] ? o.attrHandle[c](a) : a[c] != null ? a[c] : a.getAttribute(c),                                e = d + "",                                f = b[2],                                g = b[4];                            return d == null ? f === "!=" : !f && m.attr ? d != null : f === "=" ? e === g : f === "*=" ? e.indexOf(g) >= 0 : f === "~=" ? (" " + e + " ").indexOf(g) >= 0 : g ? f === "!=" ? e !== g : f === "^=" ? e.indexOf(g) === 0 : f === "$=" ? e.substr(e.length - g.length) === g : f === "|=" ? e === g || e.substr(0, g.length + 1) === g + "-" : !1 : e && d !== !1                        },                        POS: function(a, b, c, d) {                            var e = b[2],                                f = o.setFilters[e];                            if (f) { return f(a, c, b, d) }                        }                    }                },                p = o.match.POS,                q = function(a, b) { return "\\" + (b - 0 + 1) };            for (var r in o.match) { o.match[r] = new RegExp(o.match[r].source + /(?![^\[]*\])(?![^\(]*\))/.source), o.leftMatch[r] = new RegExp(/(^(?:.|\r|\n)*?)/.source + o.match[r].source.replace(/\\(\d+)/g, q)) }            var s = function(a, b) { a = Array.prototype.slice.call(a, 0); if (b) { b.push.apply(b, a); return b } return a };            try { Array.prototype.slice.call(c.documentElement.childNodes, 0)[0].nodeType } catch (t) {                s = function(a, b) {                    var c = 0,                        d = b || [];                    if (g.call(a) === "[object Array]") { Array.prototype.push.apply(d, a) } else { if (typeof a.length == "number") { for (var e = a.length; c < e; c++) { d.push(a[c]) } } else { for (; a[c]; c++) { d.push(a[c]) } } }                    return d                }            }            var u, v;            c.documentElement.compareDocumentPosition ? u = function(a, b) { if (a === b) { h = !0; return 0 } if (!a.compareDocumentPosition || !b.compareDocumentPosition) { return a.compareDocumentPosition ? -1 : 1 } return a.compareDocumentPosition(b) & 4 ? -1 : 1 } : (u = function(a, b) {                    if (a === b) { h = !0; return 0 }                    if (a.sourceIndex && b.sourceIndex) { return a.sourceIndex - b.sourceIndex }                    var c, d, e = [],                        f = [],                        g = a.parentNode,                        i = b.parentNode,                        j = g;                    if (g === i) { return v(a, b) }                    if (!g) { return -1 }                    if (!i) { return 1 }                    while (j) { e.unshift(j), j = j.parentNode }                    j = i;                    while (j) { f.unshift(j), j = j.parentNode }                    c = e.length, d = f.length;                    for (var k = 0; k < c && k < d; k++) { if (e[k] !== f[k]) { return v(e[k], f[k]) } }                    return k === c ? v(a, f[k], -1) : v(e[k], b, 1)                }, v = function(a, b, c) {                    if (a === b) { return c }                    var d = a.nextSibling;                    while (d) {                        if (d === b) { return -1 }                        d = d.nextSibling                    }                    return 1                }),                function() {                    var a = c.createElement("div"),                        d = "script" + (new Date).getTime(),                        e = c.documentElement;                    a.innerHTML = "<a name='" + d + "'/>", e.insertBefore(a, e.firstChild), c.getElementById(d) && (o.find.ID = function(a, c, d) { if (typeof c.getElementById != "undefined" && !d) { var e = c.getElementById(a[1]); return e ? e.id === a[1] || typeof e.getAttributeNode != "undefined" && e.getAttributeNode("id").nodeValue === a[1] ? [e] : b : [] } }, o.filter.ID = function(a, b) { var c = typeof a.getAttributeNode != "undefined" && a.getAttributeNode("id"); return a.nodeType === 1 && c && c.nodeValue === b }), e.removeChild(a), e = a = null                }(),                function() {                    var a = c.createElement("div");                    a.appendChild(c.createComment("")), a.getElementsByTagName("*").length > 0 && (o.find.TAG = function(a, b) {                        var c = b.getElementsByTagName(a[1]);                        if (a[1] === "*") {                            var d = [];                            for (var e = 0; c[e]; e++) { c[e].nodeType === 1 && d.push(c[e]) }                            c = d                        }                        return c                    }), a.innerHTML = "<a href='#'></a>", a.firstChild && typeof a.firstChild.getAttribute != "undefined" && a.firstChild.getAttribute("href") !== "#" && (o.attrHandle.href = function(a) { return a.getAttribute("href", 2) }), a = null                }(), c.querySelectorAll && function() {                    var a = m,                        b = c.createElement("div"),                        d = "__sizzle__";                    b.innerHTML = "<p class='TEST'></p>";                    if (!b.querySelectorAll || b.querySelectorAll(".TEST").length !== 0) {                        m = function(b, e, f, g) {                            e = e || c;                            if (!g && !m.isXML(e)) {                                var h = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);                                if (h && (e.nodeType === 1 || e.nodeType === 9)) { if (h[1]) { return s(e.getElementsByTagName(b), f) } if (h[2] && o.find.CLASS && e.getElementsByClassName) { return s(e.getElementsByClassName(h[2]), f) } }                                if (e.nodeType === 9) { if (b === "body" && e.body) { return s([e.body], f) } if (h && h[3]) { var i = e.getElementById(h[3]); if (!i || !i.parentNode) { return s([], f) } if (i.id === h[3]) { return s([i], f) } } try { return s(e.querySelectorAll(b), f) } catch (j) {} } else {                                    if (e.nodeType === 1 && e.nodeName.toLowerCase() !== "object") {                                        var k = e,                                            l = e.getAttribute("id"),                                            n = l || d,                                            p = e.parentNode,                                            q = /^\s*[+~]/.test(b);                                        l ? n = n.replace(/'/g, "\\$&") : e.setAttribute("id", n), q && p && (e = e.parentNode);                                        try { if (!q || p) { return s(e.querySelectorAll("[id='" + n + "'] " + b), f) } } catch (r) {} finally { l || k.removeAttribute("id") }                                    }                                }                            }                            return a(b, e, f, g)                        };                        for (var e in a) { m[e] = a[e] }                        b = null                    }                }(),                function() {                    var a = c.documentElement,                        b = a.matchesSelector || a.mozMatchesSelector || a.webkitMatchesSelector || a.msMatchesSelector;                    if (b) {                        var d = !b.call(c.createElement("div"), "div"),                            e = !1;                        try { b.call(c.documentElement, "[test!='']:sizzle") } catch (f) { e = !0 }                        m.matchesSelector = function(a, c) { c = c.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']"); if (!m.isXML(a)) { try { if (e || !o.match.PSEUDO.test(c) && !/!=/.test(c)) { var f = b.call(a, c); if (f || !d || a.document && a.document.nodeType !== 11) { return f } } } catch (g) {} } return m(c, null, null, [a]).length > 0 }                    }                }(),                function() {                    var a = c.createElement("div");                    a.innerHTML = "<div class='test e'></div><div class='test'></div>";                    if (!!a.getElementsByClassName && a.getElementsByClassName("e").length !== 0) {                        a.lastChild.className = "e";                        if (a.getElementsByClassName("e").length === 1) { return }                        o.order.splice(1, 0, "CLASS"), o.find.CLASS = function(a, b, c) { if (typeof b.getElementsByClassName != "undefined" && !c) { return b.getElementsByClassName(a[1]) } }, a = null                    }                }(), c.documentElement.contains ? m.contains = function(a, b) { return a !== b && (a.contains ? a.contains(b) : !0) } : c.documentElement.compareDocumentPosition ? m.contains = function(a, b) { return !!(a.compareDocumentPosition(b) & 16) } : m.contains = function() { return !1 }, m.isXML = function(a) { var b = (a ? a.ownerDocument || a : 0).documentElement; return b ? b.nodeName !== "HTML" : !1 };            var y = function(a, b, c) {                var d, e = [],                    f = "",                    g = b.nodeType ? [b] : b;                while (d = o.match.PSEUDO.exec(a)) { f += d[0], a = a.replace(o.match.PSEUDO, "") }                a = o.relative[a] ? a + "*" : a;                for (var h = 0, i = g.length; h < i; h++) { m(a, g[h], e, c) }                return m.filter(f, e)            };            m.attr = f.attr, m.selectors.attrMap = {}, f.find = m, f.expr = m.selectors, f.expr[":"] = f.expr.filters, f.unique = m.uniqueSort, f.text = m.getText, f.isXMLDoc = m.isXML, f.contains = m.contains        }();    var L = /Until$/,        M = /^(?:parents|prevUntil|prevAll)/,        N = /,/,        O = /^.[^:#\[\.,]*$/,        P = Array.prototype.slice,        Q = f.expr.match.POS,        R = { children: !0, contents: !0, next: !0, prev: !0 };    f.fn.extend({        find: function(a) {            var b = this,                c, d;            if (typeof a != "string") { return f(a).filter(function() { for (c = 0, d = b.length; c < d; c++) { if (f.contains(b[c], this)) { return !0 } } }) }            var e = this.pushStack("", "find", a),                g, h, i;            for (c = 0, d = this.length; c < d; c++) { g = e.length, f.find(a, this[c], e); if (c > 0) { for (h = g; h < e.length; h++) { for (i = 0; i < g; i++) { if (e[i] === e[h]) { e.splice(h--, 1); break } } } } }            return e        },        has: function(a) { var b = f(a); return this.filter(function() { for (var a = 0, c = b.length; a < c; a++) { if (f.contains(this, b[a])) { return !0 } } }) },        not: function(a) { return this.pushStack(T(this, a, !1), "not", a) },        filter: function(a) { return this.pushStack(T(this, a, !0), "filter", a) },        is: function(a) { return !!a && (typeof a == "string" ? Q.test(a) ? f(a, this.context).index(this[0]) >= 0 : f.filter(a, this).length > 0 : this.filter(a).length > 0) },        closest: function(a, b) {            var c = [],                d, e, g = this[0];            if (f.isArray(a)) {                var h = 1;                while (g && g.ownerDocument && g !== b) {                    for (d = 0; d < a.length; d++) { f(g).is(a[d]) && c.push({ selector: a[d], elem: g, level: h }) }                    g = g.parentNode, h++                }                return c            }            var i = Q.test(a) || typeof a != "string" ? f(a, b || this.context) : 0;            for (d = 0, e = this.length; d < e; d++) {                g = this[d];                while (g) {                    if (i ? i.index(g) > -1 : f.find.matchesSelector(g, a)) { c.push(g); break }                    g = g.parentNode;                    if (!g || !g.ownerDocument || g === b || g.nodeType === 11) { break }                }            }            c = c.length > 1 ? f.unique(c) : c;            return this.pushStack(c, "closest", a)        },        index: function(a) { if (!a) { return this[0] && this[0].parentNode ? this.prevAll().length : -1 } if (typeof a == "string") { return f.inArray(this[0], f(a)) } return f.inArray(a.jquery ? a[0] : a, this) },        add: function(a, b) {            var c = typeof a == "string" ? f(a, b) : f.makeArray(a && a.nodeType ? [a] : a),                d = f.merge(this.get(), c);            return this.pushStack(S(c[0]) || S(d[0]) ? d : f.unique(d))        },        andSelf: function() { return this.add(this.prevObject) }    }), f.each({ parent: function(a) { var b = a.parentNode; return b && b.nodeType !== 11 ? b : null }, parents: function(a) { return f.dir(a, "parentNode") }, parentsUntil: function(a, b, c) { return f.dir(a, "parentNode", c) }, next: function(a) { return f.nth(a, 2, "nextSibling") }, prev: function(a) { return f.nth(a, 2, "previousSibling") }, nextAll: function(a) { return f.dir(a, "nextSibling") }, prevAll: function(a) { return f.dir(a, "previousSibling") }, nextUntil: function(a, b, c) { return f.dir(a, "nextSibling", c) }, prevUntil: function(a, b, c) { return f.dir(a, "previousSibling", c) }, siblings: function(a) { return f.sibling(a.parentNode.firstChild, a) }, children: function(a) { return f.sibling(a.firstChild) }, contents: function(a) { return f.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : f.makeArray(a.childNodes) } }, function(a, b) {        f.fn[a] = function(c, d) {            var e = f.map(this, b, c);            L.test(a) || (d = c), d && typeof d == "string" && (e = f.filter(d, e)), e = this.length > 1 && !R[a] ? f.unique(e) : e, (this.length > 1 || N.test(d)) && M.test(a) && (e = e.reverse());            return this.pushStack(e, a, P.call(arguments).join(","))        }    }), f.extend({        filter: function(a, b, c) { c && (a = ":not(" + a + ")"); return b.length === 1 ? f.find.matchesSelector(b[0], a) ? [b[0]] : [] : f.find.matches(a, b) },        dir: function(a, c, d) {            var e = [],                g = a[c];            while (g && g.nodeType !== 9 && (d === b || g.nodeType !== 1 || !f(g).is(d))) { g.nodeType === 1 && e.push(g), g = g[c] }            return e        },        nth: function(a, b, c, d) { b = b || 1; var e = 0; for (; a; a = a[c]) { if (a.nodeType === 1 && ++e === b) { break } } return a },        sibling: function(a, b) { var c = []; for (; a; a = a.nextSibling) { a.nodeType === 1 && a !== b && c.push(a) } return c }    });    var V = "abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",        W = / jQuery\d+="(?:\d+|null)"/g,        X = /^\s+/,        Y = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,        Z = /<([\w:]+)/,        $ = /<tbody/i,        _ = /<|&#?\w+;/,        ba = /<(?:script|style)/i,        bb = /<(?:script|object|embed|option|style)/i,        bc = new RegExp("<(?:" + V + ")", "i"),        bd = /checked\s*(?:[^=]|=\s*.checked.)/i,        be = /\/(java|ecma)script/i,        bf = /^\s*<!(?:\[CDATA\[|\-\-)/,        bg = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], area: [1, "<map>", "</map>"], _default: [0, "", ""] },        bh = U(c);    bg.optgroup = bg.option, bg.tbody = bg.tfoot = bg.colgroup = bg.caption = bg.thead, bg.th = bg.td, f.support.htmlSerialize || (bg._default = [1, "div<div>", "</div>"]), f.fn.extend({        text: function(a) {            if (f.isFunction(a)) {                return this.each(function(b) {                    var c = f(this);                    c.text(a.call(this, b, c.text()))                })            }            if (typeof a != "object" && a !== b) { return this.empty().append((this[0] && this[0].ownerDocument || c).createTextNode(a)) }            return f.text(this)        },        wrapAll: function(a) {            if (f.isFunction(a)) { return this.each(function(b) { f(this).wrapAll(a.call(this, b)) }) }            if (this[0]) {                var b = f(a, this[0].ownerDocument).eq(0).clone(!0);                this[0].parentNode && b.insertBefore(this[0]), b.map(function() { var a = this; while (a.firstChild && a.firstChild.nodeType === 1) { a = a.firstChild } return a }).append(this)            }            return this        },        wrapInner: function(a) {            if (f.isFunction(a)) { return this.each(function(b) { f(this).wrapInner(a.call(this, b)) }) }            return this.each(function() {                var b = f(this),                    c = b.contents();                c.length ? c.wrapAll(a) : b.append(a)            })        },        wrap: function(a) { var b = f.isFunction(a); return this.each(function(c) { f(this).wrapAll(b ? a.call(this, c) : a) }) },        unwrap: function() { return this.parent().each(function() { f.nodeName(this, "body") || f(this).replaceWith(this.childNodes) }).end() },        append: function() { return this.domManip(arguments, !0, function(a) { this.nodeType === 1 && this.appendChild(a) }) },        prepend: function() { return this.domManip(arguments, !0, function(a) { this.nodeType === 1 && this.insertBefore(a, this.firstChild) }) },        before: function() {            if (this[0] && this[0].parentNode) { return this.domManip(arguments, !1, function(a) { this.parentNode.insertBefore(a, this) }) }            if (arguments.length) {                var a = f.clean(arguments);                a.push.apply(a, this.toArray());                return this.pushStack(a, "before", arguments)            }        },        after: function() {            if (this[0] && this[0].parentNode) { return this.domManip(arguments, !1, function(a) { this.parentNode.insertBefore(a, this.nextSibling) }) }            if (arguments.length) {                var a = this.pushStack(this, "after", arguments);                a.push.apply(a, f.clean(arguments));                return a            }        },        remove: function(a, b) {            for (var c = 0, d;                (d = this[c]) != null; c++) { if (!a || f.filter(a, [d]).length) {!b && d.nodeType === 1 && (f.cleanData(d.getElementsByTagName("*")), f.cleanData([d])), d.parentNode && d.parentNode.removeChild(d) } }            return this        },        empty: function() {            for (var a = 0, b;                (b = this[a]) != null; a++) { b.nodeType === 1 && f.cleanData(b.getElementsByTagName("*")); while (b.firstChild) { b.removeChild(b.firstChild) } }            return this        },        clone: function(a, b) { a = a == null ? !1 : a, b = b == null ? a : b; return this.map(function() { return f.clone(this, a, b) }) },        html: function(a) {            if (a === b) { return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(W, "") : null }            if (typeof a == "string" && !ba.test(a) && (f.support.leadingWhitespace || !X.test(a)) && !bg[(Z.exec(a) || ["", ""])[1].toLowerCase()]) { a = a.replace(Y, "<$1></$2>"); try { for (var c = 0, d = this.length; c < d; c++) { this[c].nodeType === 1 && (f.cleanData(this[c].getElementsByTagName("*")), this[c].innerHTML = a) } } catch (e) { this.empty().append(a) } } else {                f.isFunction(a) ? this.each(function(b) {                    var c = f(this);                    c.html(a.call(this, b, c.html()))                }) : this.empty().append(a)            }            return this        },        replaceWith: function(a) {            if (this[0] && this[0].parentNode) {                if (f.isFunction(a)) {                    return this.each(function(b) {                        var c = f(this),                            d = c.html();                        c.replaceWith(a.call(this, b, d))                    })                }                typeof a != "string" && (a = f(a).detach());                return this.each(function() {                    var b = this.nextSibling,                        c = this.parentNode;                    f(this).remove(), b ? f(b).before(a) : f(c).append(a)                })            }            return this.length ? this.pushStack(f(f.isFunction(a) ? a() : a), "replaceWith", a) : this        },        detach: function(a) { return this.remove(a, !0) },        domManip: function(a, c, d) {            var e, g, h, i, j = a[0],                k = [];            if (!f.support.checkClone && arguments.length === 3 && typeof j == "string" && bd.test(j)) { return this.each(function() { f(this).domManip(a, c, d, !0) }) }            if (f.isFunction(j)) {                return this.each(function(e) {                    var g = f(this);                    a[0] = j.call(this, e, c ? g.html() : b), g.domManip(a, c, d)                })            }            if (this[0]) {                i = j && j.parentNode, f.support.parentNode && i && i.nodeType === 11 && i.childNodes.length === this.length ? e = { fragment: i } : e = f.buildFragment(a, this, k), h = e.fragment, h.childNodes.length === 1 ? g = h = h.firstChild : g = h.firstChild;                if (g) { c = c && f.nodeName(g, "tr"); for (var l = 0, m = this.length, n = m - 1; l < m; l++) { d.call(c ? bi(this[l], g) : this[l], e.cacheable || m > 1 && l < n ? f.clone(h, !0, !0) : h) } }                k.length && f.each(k, bp)            }            return this        }    }), f.buildFragment = function(a, b, d) {        var e, g, h, i, j = a[0];        b && b[0] && (i = b[0].ownerDocument || b[0]), i.createDocumentFragment || (i = c), a.length === 1 && typeof j == "string" && j.length < 512 && i === c && j.charAt(0) === "<" && !bb.test(j) && (f.support.checkClone || !bd.test(j)) && (f.support.html5Clone || !bc.test(j)) && (g = !0, h = f.fragments[j], h && h !== 1 && (e = h)), e || (e = i.createDocumentFragment(), f.clean(a, i, e, d)), g && (f.fragments[j] = h ? e : 1);        return { fragment: e, cacheable: g }    }, f.fragments = {}, f.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function(a, b) {        f.fn[a] = function(c) {            var d = [],                e = f(c),                g = this.length === 1 && this[0].parentNode;            if (g && g.nodeType === 11 && g.childNodes.length === 1 && e.length === 1) { e[b](this[0]); return this }            for (var h = 0, i = e.length; h < i; h++) {                var j = (h > 0 ? this.clone(!0) : this).get();                f(e[h])[b](j), d = d.concat(j)            }            return this.pushStack(d, a, e.selector)        }    }), f.extend({        clone: function(a, b, c) {            var d, e, g, h = f.support.html5Clone || !bc.test("<" + a.nodeName) ? a.cloneNode(!0) : bo(a);            if ((!f.support.noCloneEvent || !f.support.noCloneChecked) && (a.nodeType === 1 || a.nodeType === 11) && !f.isXMLDoc(a)) { bk(a, h), d = bl(a), e = bl(h); for (g = 0; d[g]; ++g) { e[g] && bk(d[g], e[g]) } }            if (b) { bj(a, h); if (c) { d = bl(a), e = bl(h); for (g = 0; d[g]; ++g) { bj(d[g], e[g]) } } }            d = e = null;            return h        },        clean: function(a, b, d, e) {            var g;            b = b || c, typeof b.createElement == "undefined" && (b = b.ownerDocument || b[0] && b[0].ownerDocument || c);            var h = [],                i;            for (var j = 0, k;                (k = a[j]) != null; j++) {                typeof k == "number" && (k += "");                if (!k) { continue }                if (typeof k == "string") {                    if (!_.test(k)) { k = b.createTextNode(k) } else {                        k = k.replace(Y, "<$1></$2>");                        var l = (Z.exec(k) || ["", ""])[1].toLowerCase(),                            m = bg[l] || bg._default,                            n = m[0],                            o = b.createElement("div");                        b === c ? bh.appendChild(o) : U(b).appendChild(o), o.innerHTML = m[1] + k + m[2];                        while (n--) { o = o.lastChild }                        if (!f.support.tbody) {                            var p = $.test(k),                                q = l === "table" && !p ? o.firstChild && o.firstChild.childNodes : m[1] === "<table>" && !p ? o.childNodes : [];                            for (i = q.length - 1; i >= 0; --i) { f.nodeName(q[i], "tbody") && !q[i].childNodes.length && q[i].parentNode.removeChild(q[i]) }                        }!f.support.leadingWhitespace && X.test(k) && o.insertBefore(b.createTextNode(X.exec(k)[0]), o.firstChild), k = o.childNodes                    }                }                var r;                if (!f.support.appendChecked) { if (k[0] && typeof(r = k.length) == "number") { for (i = 0; i < r; i++) { bn(k[i]) } } else { bn(k) } }                k.nodeType ? h.push(k) : h = f.merge(h, k)            }            if (d) {                g = function(a) { return !a.type || be.test(a.type) };                for (j = 0; h[j]; j++) {                    if (e && f.nodeName(h[j], "script") && (!h[j].type || h[j].type.toLowerCase() === "text/javascript")) { e.push(h[j].parentNode ? h[j].parentNode.removeChild(h[j]) : h[j]) } else {                        if (h[j].nodeType === 1) {                            var s = f.grep(h[j].getElementsByTagName("script"), g);                            h.splice.apply(h, [j + 1, 0].concat(s))                        }                        d.appendChild(h[j])                    }                }            }            return h        },        cleanData: function(a) {            var b, c, d = f.cache,                e = f.event.special,                g = f.support.deleteExpando;            for (var h = 0, i;                (i = a[h]) != null; h++) {                if (i.nodeName && f.noData[i.nodeName.toLowerCase()]) { continue }                c = i[f.expando];                if (c) {                    b = d[c];                    if (b && b.events) {                        for (var j in b.events) { e[j] ? f.event.remove(i, j) : f.removeEvent(i, j, b.handle) }                        b.handle && (b.handle.elem = null)                    }                    g ? delete i[f.expando] : i.removeAttribute && i.removeAttribute(f.expando), delete d[c]                }            }        }    });    var bq = /alpha\([^)]*\)/i,        br = /opacity=([^)]*)/,        bs = /([A-Z]|^ms)/g,        bt = /^-?\d+(?:px)?$/i,        bu = /^-?\d/,        bv = /^([\-+])=([\-+.\de]+)/,        bw = { position: "absolute", visibility: "hidden", display: "block" },        bx = ["Left", "Right"],        by = ["Top", "Bottom"],        bz, bA, bB;    f.fn.css = function(a, c) { if (arguments.length === 2 && c === b) { return this } return f.access(this, a, c, !0, function(a, c, d) { return d !== b ? f.style(a, c, d) : f.css(a, c) }) }, f.extend({        cssHooks: { opacity: { get: function(a, b) { if (b) { var c = bz(a, "opacity", "opacity"); return c === "" ? "1" : c } return a.style.opacity } } },        cssNumber: { fillOpacity: !0, fontWeight: !0, lineHeight: !0, opacity: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 },        cssProps: { "float": f.support.cssFloat ? "cssFloat" : "styleFloat" },        style: function(a, c, d, e) {            if (!!a && a.nodeType !== 3 && a.nodeType !== 8 && !!a.style) {                var g, h, i = f.camelCase(c),                    j = a.style,                    k = f.cssHooks[i];                c = f.cssProps[i] || i;                if (d === b) { if (k && "get" in k && (g = k.get(a, !1, e)) !== b) { return g } return j[c] }                h = typeof d, h === "string" && (g = bv.exec(d)) && (d = +(g[1] + 1) * +g[2] + parseFloat(f.css(a, c)), h = "number");                if (d == null || h === "number" && isNaN(d)) { return }                h === "number" && !f.cssNumber[i] && (d += "px");                if (!k || !("set" in k) || (d = k.set(a, d)) !== b) { try { j[c] = d } catch (l) {} }            }        },        css: function(a, c, d) {            var e, g;            c = f.camelCase(c), g = f.cssHooks[c], c = f.cssProps[c] || c, c === "cssFloat" && (c = "float");            if (g && "get" in g && (e = g.get(a, !0, d)) !== b) { return e }            if (bz) { return bz(a, c) }        },        swap: function(a, b, c) {            var d = {};            for (var e in b) { d[e] = a.style[e], a.style[e] = b[e] }            c.call(a);            for (e in b) { a.style[e] = d[e] }        }    }), f.curCSS = f.css, f.each(["height", "width"], function(a, b) {        f.cssHooks[b] = {            get: function(a, c, d) {                var e;                if (c) {                    if (a.offsetWidth !== 0) { return bC(a, b, d) }                    f.swap(a, bw, function() { e = bC(a, b, d) });                    return e                }            },            set: function(a, b) {                if (!bt.test(b)) { return b }                b = parseFloat(b);                if (b >= 0) { return b + "px" }            }        }    }), f.support.opacity || (f.cssHooks.opacity = {        get: function(a, b) { return br.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? parseFloat(RegExp.$1) / 100 + "" : b ? "1" : "" },        set: function(a, b) {            var c = a.style,                d = a.currentStyle,                e = f.isNumeric(b) ? "alpha(opacity=" + b * 100 + ")" : "",                g = d && d.filter || c.filter || "";            c.zoom = 1;            if (b >= 1 && f.trim(g.replace(bq, "")) === "") { c.removeAttribute("filter"); if (d && !d.filter) { return } }            c.filter = bq.test(g) ? g.replace(bq, e) : g + " " + e        }    }), f(function() {        f.support.reliableMarginRight || (f.cssHooks.marginRight = {            get: function(a, b) {                var c;                f.swap(a, { display: "inline-block" }, function() { b ? c = bz(a, "margin-right", "marginRight") : c = a.style.marginRight });                return c            }        })    }), c.defaultView && c.defaultView.getComputedStyle && (bA = function(a, b) {        var c, d, e;        b = b.replace(bs, "-$1").toLowerCase(), (d = a.ownerDocument.defaultView) && (e = d.getComputedStyle(a, null)) && (c = e.getPropertyValue(b), c === "" && !f.contains(a.ownerDocument.documentElement, a) && (c = f.style(a, b)));        return c    }), c.documentElement.currentStyle && (bB = function(a, b) {        var c, d, e, f = a.currentStyle && a.currentStyle[b],            g = a.style;        f === null && g && (e = g[b]) && (f = e), !bt.test(f) && bu.test(f) && (c = g.left, d = a.runtimeStyle && a.runtimeStyle.left, d && (a.runtimeStyle.left = a.currentStyle.left), g.left = b === "fontSize" ? "1em" : f || 0, f = g.pixelLeft + "px", g.left = c, d && (a.runtimeStyle.left = d));        return f === "" ? "auto" : f    }), bz = bA || bB, f.expr && f.expr.filters && (f.expr.filters.hidden = function(a) {        var b = a.offsetWidth,            c = a.offsetHeight;        return b === 0 && c === 0 || !f.support.reliableHiddenOffsets && (a.style && a.style.display || f.css(a, "display")) === "none"    }, f.expr.filters.visible = function(a) { return !f.expr.filters.hidden(a) });    var bD = /%20/g,        bE = /\[\]$/,        bF = /\r?\n/g,        bG = /#.*$/,        bH = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,        bI = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,        bJ = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,        bK = /^(?:GET|HEAD)$/,        bL = /^\/\//,        bM = /\?/,        bN = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,        bO = /^(?:select|textarea)/i,        bP = /\s+/,        bQ = /([?&])_=[^&]*/,        bR = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,        bS = f.fn.load,        bT = {},        bU = {},        bV, bW, bX = ["*/"] + ["*"];    try { bV = e.href } catch (bY) { bV = c.createElement("a"), bV.href = "", bV = bV.href }    bW = bR.exec(bV.toLowerCase()) || [], f.fn.extend({        load: function(a, c, d) {            if (typeof a != "string" && bS) { return bS.apply(this, arguments) }            if (!this.length) { return this }            var e = a.indexOf(" ");            if (e >= 0) {                var g = a.slice(e, a.length);                a = a.slice(0, e)            }            var h = "GET";            c && (f.isFunction(c) ? (d = c, c = b) : typeof c == "object" && (c = f.param(c, f.ajaxSettings.traditional), h = "POST"));            var i = this;            f.ajax({ url: a, type: h, dataType: "html", data: c, complete: function(a, b, c) { c = a.responseText, a.isResolved() && (a.done(function(a) { c = a }), i.html(g ? f("<div>").append(c.replace(bN, "")).find(g) : c)), d && i.each(d, [c, b, a]) } });            return this        },        serialize: function() { return f.param(this.serializeArray()) },        serializeArray: function() { return this.map(function() { return this.elements ? f.makeArray(this.elements) : this }).filter(function() { return this.name && !this.disabled && (this.checked || bO.test(this.nodeName) || bI.test(this.type)) }).map(function(a, b) { var c = f(this).val(); return c == null ? null : f.isArray(c) ? f.map(c, function(a, c) { return { name: b.name, value: a.replace(bF, "\r\n") } }) : { name: b.name, value: c.replace(bF, "\r\n") } }).get() }    }), f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(a, b) { f.fn[b] = function(a) { return this.on(b, a) } }), f.each(["get", "post"], function(a, c) { f[c] = function(a, d, e, g) { f.isFunction(d) && (g = g || e, e = d, d = b); return f.ajax({ type: c, url: a, data: d, success: e, dataType: g }) } }), f.extend({        getScript: function(a, c) { return f.get(a, b, c, "script") },        getJSON: function(a, b, c) { return f.get(a, b, c, "json") },        ajaxSetup: function(a, b) { b ? b_(a, f.ajaxSettings) : (b = a, a = f.ajaxSettings), b_(a, b); return a },        ajaxSettings: { url: bV, isLocal: bJ.test(bW[1]), global: !0, type: "GET", contentType: "application/x-www-form-urlencoded", processData: !0, async: !0, accepts: { xml: "application/xml, text/xml", html: "text/html", text: "text/plain", json: "application/json, text/javascript", "*": bX }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText" }, converters: { "* text": a.String, "text html": !0, "text json": f.parseJSON, "text xml": f.parseXML }, flatOptions: { context: !0, url: !0 } },        ajaxPrefilter: bZ(bT),        ajaxTransport: bZ(bU),        ajax: function(a, c) {            function w(a, c, l, m) {                if (s !== 2) {                    s = 2, q && clearTimeout(q), p = b, n = m || "", v.readyState = a > 0 ? 4 : 0;                    var o, r, u, w = c,                        x = l ? cb(d, v, l) : b,                        y, z;                    if (a >= 200 && a < 300 || a === 304) { if (d.ifModified) { if (y = v.getResponseHeader("Last-Modified")) { f.lastModified[k] = y } if (z = v.getResponseHeader("Etag")) { f.etag[k] = z } } if (a === 304) { w = "notmodified", o = !0 } else { try { r = cc(d, x), w = "success", o = !0 } catch (A) { w = "parsererror", u = A } } } else { u = w; if (!w || a) { w = "error", a < 0 && (a = 0) } }                    v.status = a, v.statusText = "" + (c || w), o ? h.resolveWith(e, [r, w, v]) : h.rejectWith(e, [v, w, u]), v.statusCode(j), j = b, t && g.trigger("ajax" + (o ? "Success" : "Error"), [v, d, o ? r : u]), i.fireWith(e, [v, w]), t && (g.trigger("ajaxComplete", [v, d]), --f.active || f.event.trigger("ajaxStop"))                }            }            typeof a == "object" && (c = a, a = b), c = c || {};            var d = f.ajaxSetup({}, c),                e = d.context || d,                g = e !== d && (e.nodeType || e instanceof f) ? f(e) : f.event,                h = f.Deferred(),                i = f.Callbacks("once memory"),                j = d.statusCode || {},                k, l = {},                m = {},                n, o, p, q, r, s = 0,                t, u, v = {                    readyState: 0,                    setRequestHeader: function(a, b) {                        if (!s) {                            var c = a.toLowerCase();                            a = m[c] = m[c] || a, l[a] = b                        }                        return this                    },                    getAllResponseHeaders: function() { return s === 2 ? n : null },                    getResponseHeader: function(a) {                        var c;                        if (s === 2) {                            if (!o) { o = {}; while (c = bH.exec(n)) { o[c[1].toLowerCase()] = c[2] } }                            c = o[a.toLowerCase()]                        }                        return c === b ? null : c                    },                    overrideMimeType: function(a) { s || (d.mimeType = a); return this },                    abort: function(a) { a = a || "abort", p && p.abort(a), w(0, a); return this }                };            h.promise(v), v.success = v.done, v.error = v.fail, v.complete = i.add, v.statusCode = function(a) { if (a) { var b; if (s < 2) { for (b in a) { j[b] = [j[b], a[b]] } } else { b = a[v.status], v.then(b, b) } } return this }, d.url = ((a || d.url) + "").replace(bG, "").replace(bL, bW[1] + "//"), d.dataTypes = f.trim(d.dataType || "*").toLowerCase().split(bP), d.crossDomain == null && (r = bR.exec(d.url.toLowerCase()), d.crossDomain = !(!r || r[1] == bW[1] && r[2] == bW[2] && (r[3] || (r[1] === "http:" ? 80 : 443)) == (bW[3] || (bW[1] === "http:" ? 80 : 443)))), d.data && d.processData && typeof d.data != "string" && (d.data = f.param(d.data, d.traditional)), b$(bT, d, c, v);            if (s === 2) { return !1 }            t = d.global, d.type = d.type.toUpperCase(), d.hasContent = !bK.test(d.type), t && f.active++ === 0 && f.event.trigger("ajaxStart");            if (!d.hasContent) {                d.data && (d.url += (bM.test(d.url) ? "&" : "?") + d.data, delete d.data), k = d.url;                if (d.cache === !1) {                    var x = f.now(),                        y = d.url.replace(bQ, "$1_=" + x);                    d.url = y + (y === d.url ? (bM.test(d.url) ? "&" : "?") + "_=" + x : "")                }            }(d.data && d.hasContent && d.contentType !== !1 || c.contentType) && v.setRequestHeader("Content-Type", d.contentType), d.ifModified && (k = k || d.url, f.lastModified[k] && v.setRequestHeader("If-Modified-Since", f.lastModified[k]), f.etag[k] && v.setRequestHeader("If-None-Match", f.etag[k])), v.setRequestHeader("Accept", d.dataTypes[0] && d.accepts[d.dataTypes[0]] ? d.accepts[d.dataTypes[0]] + (d.dataTypes[0] !== "*" ? ", " + bX + "; q=0.01" : "") : d.accepts["*"]);            for (u in d.headers) { v.setRequestHeader(u, d.headers[u]) }            if (d.beforeSend && (d.beforeSend.call(e, v, d) === !1 || s === 2)) { v.abort(); return !1 }            for (u in { success: 1, error: 1, complete: 1 }) { v[u](d[u]) }            p = b$(bU, d, c, v);            if (!p) { w(-1, "No Transport") } else { v.readyState = 1, t && g.trigger("ajaxSend", [v, d]), d.async && d.timeout > 0 && (q = setTimeout(function() { v.abort("timeout") }, d.timeout)); try { s = 1, p.send(l, w) } catch (z) { if (s < 2) { w(-1, z) } else { throw z } } }            return v        },        param: function(a, c) {            var d = [],                e = function(a, b) { b = f.isFunction(b) ? b() : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b) };            c === b && (c = f.ajaxSettings.traditional);            if (f.isArray(a) || a.jquery && !f.isPlainObject(a)) { f.each(a, function() { e(this.name, this.value) }) } else { for (var g in a) { ca(g, a[g], c, e) } }            return d.join("&").replace(bD, "+")        }    }), f.extend({ active: 0, lastModified: {}, etag: {} });    var cd = f.now(),        ce = /(\=)\?(&|$)|\?\?/i;    f.ajaxSetup({ jsonp: "callback", jsonpCallback: function() { return f.expando + "_" + cd++ } }), f.ajaxPrefilter("json jsonp", function(b, c, d) {        var e = b.contentType === "application/x-www-form-urlencoded" && typeof b.data == "string";        if (b.dataTypes[0] === "jsonp" || b.jsonp !== !1 && (ce.test(b.url) || e && ce.test(b.data))) {            var g, h = b.jsonpCallback = f.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback,                i = a[h],                j = b.url,                k = b.data,                l = "$1" + h + "$2";            b.jsonp !== !1 && (j = j.replace(ce, l), b.url === j && (e && (k = k.replace(ce, l)), b.data === k && (j += (/\?/.test(j) ? "&" : "?") + b.jsonp + "=" + h))), b.url = j, b.data = k, a[h] = function(a) { g = [a] }, d.always(function() { a[h] = i, g && f.isFunction(i) && a[h](g[0]) }), b.converters["script json"] = function() { g || f.error(h + " was not called"); return g[0] }, b.dataTypes[0] = "json";            return "script"        }    }), f.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /javascript|ecmascript/ }, converters: { "text script": function(a) { f.globalEval(a); return a } } }), f.ajaxPrefilter("script", function(a) { a.cache === b && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1) }), f.ajaxTransport("script", function(a) { if (a.crossDomain) { var d, e = c.head || c.getElementsByTagName("head")[0] || c.documentElement; return { send: function(f, g) { d = c.createElement("script"), d.async = "async", a.scriptCharset && (d.charset = a.scriptCharset), d.src = a.url, d.onload = d.onreadystatechange = function(a, c) { if (c || !d.readyState || /loaded|complete/.test(d.readyState)) { d.onload = d.onreadystatechange = null, e && d.parentNode && e.removeChild(d), d = b, c || g(200, "success") } }, e.insertBefore(d, e.firstChild) }, abort: function() { d && d.onload(0, 1) } } } });    var cf = a.ActiveXObject ? function() { for (var a in ch) { ch[a](0, 1) } } : !1,        cg = 0,        ch;    f.ajaxSettings.xhr = a.ActiveXObject ? function() { return !this.isLocal && ci() || cj() } : ci,        function(a) { f.extend(f.support, { ajax: !!a, cors: !!a && "withCredentials" in a }) }(f.ajaxSettings.xhr()), f.support.ajax && f.ajaxTransport(function(c) {            if (!c.crossDomain || f.support.cors) {                var d;                return {                    send: function(e, g) {                        var h = c.xhr(),                            i, j;                        c.username ? h.open(c.type, c.url, c.async, c.username, c.password) : h.open(c.type, c.url, c.async);                        if (c.xhrFields) { for (j in c.xhrFields) { h[j] = c.xhrFields[j] } }                        c.mimeType && h.overrideMimeType && h.overrideMimeType(c.mimeType), !c.crossDomain && !e["X-Requested-With"] && (e["X-Requested-With"] = "XMLHttpRequest");                        try { for (j in e) { h.setRequestHeader(j, e[j]) } } catch (k) {}                        h.send(c.hasContent && c.data || null), d = function(a, e) {                            var j, k, l, m, n;                            try { if (d && (e || h.readyState === 4)) { d = b, i && (h.onreadystatechange = f.noop, cf && delete ch[i]); if (e) { h.readyState !== 4 && h.abort() } else { j = h.status, l = h.getAllResponseHeaders(), m = {}, n = h.responseXML, n && n.documentElement && (m.xml = n), m.text = h.responseText; try { k = h.statusText } catch (o) { k = "" }!j && c.isLocal && !c.crossDomain ? j = m.text ? 200 : 404 : j === 1223 && (j = 204) } } } catch (p) { e || g(-1, p) }                            m && g(j, k, m, l)                        }, !c.async || h.readyState === 4 ? d() : (i = ++cg, cf && (ch || (ch = {}, f(a).unload(cf)), ch[i] = d), h.onreadystatechange = d)                    },                    abort: function() { d && d(0, 1) }                }            }        });    var ck = {},        cl, cm, cn = /^(?:toggle|show|hide)$/,        co = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,        cp, cq = [            ["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"],            ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"],            ["opacity"]        ],        cr;    f.fn.extend({        show: function(a, b, c) { var d, e; if (a || a === 0) { return this.animate(cu("show", 3), a, b, c) } for (var g = 0, h = this.length; g < h; g++) { d = this[g], d.style && (e = d.style.display, !f._data(d, "olddisplay") && e === "none" && (e = d.style.display = ""), e === "" && f.css(d, "display") === "none" && f._data(d, "olddisplay", cv(d.nodeName))) } for (g = 0; g < h; g++) { d = this[g]; if (d.style) { e = d.style.display; if (e === "" || e === "none") { d.style.display = f._data(d, "olddisplay") || "" } } } return this },        hide: function(a, b, c) {            if (a || a === 0) { return this.animate(cu("hide", 3), a, b, c) }            var d, e, g = 0,                h = this.length;            for (; g < h; g++) { d = this[g], d.style && (e = f.css(d, "display"), e !== "none" && !f._data(d, "olddisplay") && f._data(d, "olddisplay", e)) }            for (g = 0; g < h; g++) { this[g].style && (this[g].style.display = "none") }            return this        },        _toggle: f.fn.toggle,        toggle: function(a, b, c) {            var d = typeof a == "boolean";            f.isFunction(a) && f.isFunction(b) ? this._toggle.apply(this, arguments) : a == null || d ? this.each(function() {                var b = d ? a : f(this).is(":hidden");                f(this)[b ? "show" : "hide"]()            }) : this.animate(cu("toggle", 3), a, b, c);            return this        },        fadeTo: function(a, b, c, d) { return this.filter(":hidden").css("opacity", 0).show().end().animate({ opacity: b }, a, c, d) },        animate: function(a, b, c, d) {            function g() {                e.queue === !1 && f._mark(this);                var b = f.extend({}, e),                    c = this.nodeType === 1,                    d = c && f(this).is(":hidden"),                    g, h, i, j, k, l, m, n, o;                b.animatedProperties = {};                for (i in a) {                    g = f.camelCase(i), i !== g && (a[g] = a[i], delete a[i]), h = a[g], f.isArray(h) ? (b.animatedProperties[g] = h[1], h = a[g] = h[0]) : b.animatedProperties[g] = b.specialEasing && b.specialEasing[g] || b.easing || "swing";                    if (h === "hide" && d || h === "show" && !d) { return b.complete.call(this) }                    c && (g === "height" || g === "width") && (b.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY], f.css(this, "display") === "inline" && f.css(this, "float") === "none" && (!f.support.inlineBlockNeedsLayout || cv(this.nodeName) === "inline" ? this.style.display = "inline-block" : this.style.zoom = 1))                }                b.overflow != null && (this.style.overflow = "hidden");                for (i in a) { j = new f.fx(this, b, i), h = a[i], cn.test(h) ? (o = f._data(this, "toggle" + i) || (h === "toggle" ? d ? "show" : "hide" : 0), o ? (f._data(this, "toggle" + i, o === "show" ? "hide" : "show"), j[o]()) : j[h]()) : (k = co.exec(h), l = j.cur(), k ? (m = parseFloat(k[2]), n = k[3] || (f.cssNumber[i] ? "" : "px"), n !== "px" && (f.style(this, i, (m || 1) + n), l = (m || 1) / j.cur() * l, f.style(this, i, l + n)), k[1] && (m = (k[1] === "-=" ? -1 : 1) * m + l), j.custom(l, m, n)) : j.custom(l, h, "")) }                return !0            }            var e = f.speed(b, c, d);            if (f.isEmptyObject(a)) { return this.each(e.complete, [!1]) }            a = f.extend({}, a);            return e.queue === !1 ? this.each(g) : this.queue(e.queue, g)        },        stop: function(a, c, d) {            typeof a != "string" && (d = c, c = a, a = b), c && a !== !1 && this.queue(a || "fx", []);            return this.each(function() {                function h(a, b, c) {                    var e = b[c];                    f.removeData(a, c, !0), e.stop(d)                }                var b, c = !1,                    e = f.timers,                    g = f._data(this);                d || f._unmark(!0, this);                if (a == null) { for (b in g) { g[b] && g[b].stop && b.indexOf(".run") === b.length - 4 && h(this, g, b) } } else { g[b = a + ".run"] && g[b].stop && h(this, g, b) }                for (b = e.length; b--;) { e[b].elem === this && (a == null || e[b].queue === a) && (d ? e[b](!0) : e[b].saveState(), c = !0, e.splice(b, 1)) }(!d || !c) && f.dequeue(this, a)            })        }    }), f.each({ slideDown: cu("show", 1), slideUp: cu("hide", 1), slideToggle: cu("toggle", 1), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function(a, b) { f.fn[a] = function(a, c, d) { return this.animate(b, a, c, d) } }), f.extend({        speed: function(a, b, c) {            var d = a && typeof a == "object" ? f.extend({}, a) : { complete: c || !c && b || f.isFunction(a) && a, duration: a, easing: c && b || b && !f.isFunction(b) && b };            d.duration = f.fx.off ? 0 : typeof d.duration == "number" ? d.duration : d.duration in f.fx.speeds ? f.fx.speeds[d.duration] : f.fx.speeds._default;            if (d.queue == null || d.queue === !0) { d.queue = "fx" }            d.old = d.complete, d.complete = function(a) { f.isFunction(d.old) && d.old.call(this), d.queue ? f.dequeue(this, d.queue) : a !== !1 && f._unmark(this) };            return d        },        easing: { linear: function(a, b, c, d) { return c + d * a }, swing: function(a, b, c, d) { return (-Math.cos(a * Math.PI) / 2 + 0.5) * d + c } },        timers: [],        fx: function(a, b, c) { this.options = b, this.elem = a, this.prop = c, b.orig = b.orig || {} }    }), f.fx.prototype = {        update: function() { this.options.step && this.options.step.call(this.elem, this.now, this), (f.fx.step[this.prop] || f.fx.step._default)(this) },        cur: function() { if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) { return this.elem[this.prop] } var a, b = f.css(this.elem, this.prop); return isNaN(a = parseFloat(b)) ? !b || b === "auto" ? 0 : b : a },        custom: function(a, c, d) {            function h(a) { return e.step(a) }            var e = this,                g = f.fx;            this.startTime = cr || cs(), this.end = c, this.now = this.start = a, this.pos = this.state = 0, this.unit = d || this.unit || (f.cssNumber[this.prop] ? "" : "px"), h.queue = this.options.queue, h.elem = this.elem, h.saveState = function() { e.options.hide && f._data(e.elem, "fxshow" + e.prop) === b && f._data(e.elem, "fxshow" + e.prop, e.start) }, h() && f.timers.push(h) && !cp && (cp = setInterval(g.tick, g.interval))        },        show: function() {            var a = f._data(this.elem, "fxshow" + this.prop);            this.options.orig[this.prop] = a || f.style(this.elem, this.prop), this.options.show = !0, a !== b ? this.custom(this.cur(), a) : this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur()), f(this.elem).show()        },        hide: function() { this.options.orig[this.prop] = f._data(this.elem, "fxshow" + this.prop) || f.style(this.elem, this.prop), this.options.hide = !0, this.custom(this.cur(), 0) },        step: function(a) {            var b, c, d, e = cr || cs(),                g = !0,                h = this.elem,                i = this.options;            if (a || e >= i.duration + this.startTime) {                this.now = this.end, this.pos = this.state = 1, this.update(), i.animatedProperties[this.prop] = !0;                for (b in i.animatedProperties) { i.animatedProperties[b] !== !0 && (g = !1) }                if (g) {                    i.overflow != null && !f.support.shrinkWrapBlocks && f.each(["", "X", "Y"], function(a, b) { h.style["overflow" + b] = i.overflow[a] }), i.hide && f(h).hide();                    if (i.hide || i.show) { for (b in i.animatedProperties) { f.style(h, b, i.orig[b]), f.removeData(h, "fxshow" + b, !0), f.removeData(h, "toggle" + b, !0) } }                    d = i.complete, d && (i.complete = !1, d.call(h))                }                return !1            }            i.duration == Infinity ? this.now = e : (c = e - this.startTime, this.state = c / i.duration, this.pos = f.easing[i.animatedProperties[this.prop]](this.state, c, 0, 1, i.duration), this.now = this.start + (this.end - this.start) * this.pos), this.update();            return !0        }    }, f.extend(f.fx, {        tick: function() {            var a, b = f.timers,                c = 0;            for (; c < b.length; c++) { a = b[c], !a() && b[c] === a && b.splice(c--, 1) }            b.length || f.fx.stop()        },        interval: 13,        stop: function() { clearInterval(cp), cp = null },        speeds: { slow: 600, fast: 200, _default: 400 },        step: { opacity: function(a) { f.style(a.elem, "opacity", a.now) }, _default: function(a) { a.elem.style && a.elem.style[a.prop] != null ? a.elem.style[a.prop] = a.now + a.unit : a.elem[a.prop] = a.now } }    }), f.each(["width", "height"], function(a, b) { f.fx.step[b] = function(a) { f.style(a.elem, b, Math.max(0, a.now) + a.unit) } }), f.expr && f.expr.filters && (f.expr.filters.animated = function(a) { return f.grep(f.timers, function(b) { return a === b.elem }).length });    var cw = /^t(?:able|d|h)$/i,        cx = /^(?:body|html)$/i;    "getBoundingClientRect" in c.documentElement ? f.fn.offset = function(a) {        var b = this[0],            c;        if (a) { return this.each(function(b) { f.offset.setOffset(this, a, b) }) }        if (!b || !b.ownerDocument) { return null }        if (b === b.ownerDocument.body) { return f.offset.bodyOffset(b) }        try { c = b.getBoundingClientRect() } catch (d) {}        var e = b.ownerDocument,            g = e.documentElement;        if (!c || !f.contains(g, b)) { return c ? { top: c.top, left: c.left } : { top: 0, left: 0 } }        var h = e.body,            i = cy(e),            j = g.clientTop || h.clientTop || 0,            k = g.clientLeft || h.clientLeft || 0,            l = i.pageYOffset || f.support.boxModel && g.scrollTop || h.scrollTop,            m = i.pageXOffset || f.support.boxModel && g.scrollLeft || h.scrollLeft,            n = c.top + l - j,            o = c.left + m - k;        return { top: n, left: o }    } : f.fn.offset = function(a) {        var b = this[0];        if (a) { return this.each(function(b) { f.offset.setOffset(this, a, b) }) }        if (!b || !b.ownerDocument) { return null }        if (b === b.ownerDocument.body) { return f.offset.bodyOffset(b) }        var c, d = b.offsetParent,            e = b,            g = b.ownerDocument,            h = g.documentElement,            i = g.body,            j = g.defaultView,            k = j ? j.getComputedStyle(b, null) : b.currentStyle,            l = b.offsetTop,            m = b.offsetLeft;        while ((b = b.parentNode) && b !== i && b !== h) {            if (f.support.fixedPosition && k.position === "fixed") { break }            c = j ? j.getComputedStyle(b, null) : b.currentStyle, l -= b.scrollTop, m -= b.scrollLeft, b === d && (l += b.offsetTop, m += b.offsetLeft, f.support.doesNotAddBorder && (!f.support.doesAddBorderForTableAndCells || !cw.test(b.nodeName)) && (l += parseFloat(c.borderTopWidth) || 0, m += parseFloat(c.borderLeftWidth) || 0), e = d, d = b.offsetParent), f.support.subtractsBorderForOverflowNotVisible && c.overflow !== "visible" && (l += parseFloat(c.borderTopWidth) || 0, m += parseFloat(c.borderLeftWidth) || 0), k = c        }        if (k.position === "relative" || k.position === "static") { l += i.offsetTop, m += i.offsetLeft }        f.support.fixedPosition && k.position === "fixed" && (l += Math.max(h.scrollTop, i.scrollTop), m += Math.max(h.scrollLeft, i.scrollLeft));        return { top: l, left: m }    }, f.offset = {        bodyOffset: function(a) {            var b = a.offsetTop,                c = a.offsetLeft;            f.support.doesNotIncludeMarginInBodyOffset && (b += parseFloat(f.css(a, "marginTop")) || 0, c += parseFloat(f.css(a, "marginLeft")) || 0);            return { top: b, left: c }        },        setOffset: function(a, b, c) {            var d = f.css(a, "position");            d === "static" && (a.style.position = "relative");            var e = f(a),                g = e.offset(),                h = f.css(a, "top"),                i = f.css(a, "left"),                j = (d === "absolute" || d === "fixed") && f.inArray("auto", [h, i]) > -1,                k = {},                l = {},                m, n;            j ? (l = e.position(), m = l.top, n = l.left) : (m = parseFloat(h) || 0, n = parseFloat(i) || 0), f.isFunction(b) && (b = b.call(a, c, g)), b.top != null && (k.top = b.top - g.top + m), b.left != null && (k.left = b.left - g.left + n), "using" in b ? b.using.call(a, k) : e.css(k)        }    }, f.fn.extend({        position: function() {            if (!this[0]) { return null }            var a = this[0],                b = this.offsetParent(),                c = this.offset(),                d = cx.test(b[0].nodeName) ? { top: 0, left: 0 } : b.offset();            c.top -= parseFloat(f.css(a, "marginTop")) || 0, c.left -= parseFloat(f.css(a, "marginLeft")) || 0, d.top += parseFloat(f.css(b[0], "borderTopWidth")) || 0, d.left += parseFloat(f.css(b[0], "borderLeftWidth")) || 0;            return { top: c.top - d.top, left: c.left - d.left }        },        offsetParent: function() { return this.map(function() { var a = this.offsetParent || c.body; while (a && !cx.test(a.nodeName) && f.css(a, "position") === "static") { a = a.offsetParent } return a }) }    }), f.each(["Left", "Top"], function(a, c) {        var d = "scroll" + c;        f.fn[d] = function(c) {            var e, g;            if (c === b) {                e = this[0];                if (!e) { return null }                g = cy(e);                return g ? "pageXOffset" in g ? g[a ? "pageYOffset" : "pageXOffset"] : f.support.boxModel && g.document.documentElement[d] || g.document.body[d] : e[d]            }            return this.each(function() { g = cy(this), g ? g.scrollTo(a ? f(g).scrollLeft() : c, a ? c : f(g).scrollTop()) : this[d] = c })        }    }), f.each(["Height", "Width"], function(a, c) {        var d = c.toLowerCase();        f.fn["inner" + c] = function() { var a = this[0]; return a ? a.style ? parseFloat(f.css(a, d, "padding")) : this[d]() : null }, f.fn["outer" + c] = function(a) { var b = this[0]; return b ? b.style ? parseFloat(f.css(b, d, a ? "margin" : "border")) : this[d]() : null }, f.fn[d] = function(a) {            var e = this[0];            if (!e) { return a == null ? null : this }            if (f.isFunction(a)) {                return this.each(function(b) {                    var c = f(this);                    c[d](a.call(this, b, c[d]()))                })            }            if (f.isWindow(e)) {                var g = e.document.documentElement["client" + c],                    h = e.document.body;                return e.document.compatMode === "CSS1Compat" && g || h && h["client" + c] || g            }            if (e.nodeType === 9) { return Math.max(e.documentElement["client" + c], e.body["scroll" + c], e.documentElement["scroll" + c], e.body["offset" + c], e.documentElement["offset" + c]) }            if (a === b) {                var i = f.css(e, d),                    j = parseFloat(i);                return f.isNumeric(j) ? j : i            }            return this.css(d, typeof a == "string" ? a : a + "px")        }    }), a.jQuery = a.$ = f, typeof define == "function" && define.amd && define.amd.jQuery && define("jquery", [], function() { return f })})(window);(function(d) {    var a = "channel=chunlei&clienttype=0&web=1";    var c = function() {        a += "&logid=" + f();        d(document).ajaxSend(function(j, k, h) {            if ("script" === h.dataType) { return }            var g = h.url || "";            if (/\?/.test(g)) { if (g.indexOf(a) === -1) { g = g + "&" + a } } else { g = g + "?" + a }            h.url = g        })    };    var f = function() { var j = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/~！@#￥%……&"; var q = String.fromCharCode; var k = function(s) { if (s.length < 2) { var r = s.charCodeAt(0); return r < 128 ? s : r < 2048 ? (q(192 | (r >>> 6)) + q(128 | (r & 63))) : (q(224 | ((r >>> 12) & 15)) + q(128 | ((r >>> 6) & 63)) + q(128 | (r & 63))) } else { var r = 65536 + (s.charCodeAt(0) - 55296) * 1024 + (s.charCodeAt(1) - 56320); return (q(240 | ((r >>> 18) & 7)) + q(128 | ((r >>> 12) & 63)) + q(128 | ((r >>> 6) & 63)) + q(128 | (r & 63))) } }; var l = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g; var p = function(r) { return (r + "" + Math.random()).replace(l, k) }; var h = function(u) { var t = [0, 2, 1][u.length % 3]; var r = u.charCodeAt(0) << 16 | ((u.length > 1 ? u.charCodeAt(1) : 0) << 8) | ((u.length > 2 ? u.charCodeAt(2) : 0)); var s = [j.charAt(r >>> 18), j.charAt((r >>> 12) & 63), t >= 2 ? "=" : j.charAt((r >>> 6) & 63), t >= 1 ? "=" : j.charAt(r & 63)]; return s.join("") }; var o = function(r) { return r.replace(/[\s\S]{1,3}/g, h) }; var g = function(r) { return o(p(new Date().getTime())) }; var m = function(r, s) { return !s ? g(String(r)) : g(String(r)).replace(/[+\/]/g, function(t) { return t === "+" ? "-" : "_" }).replace(/=/g, "") }; var n = function() { var r; var s = new RegExp("(^| )" + name + "=([^;]*)(;|$)"); if (r = document.cookie.match(s)) { return unescape(r[2]) } else { return null } }; return m(n("BAIDUID")) };    c()})(jQuery);baidu.dom.ready(function() {    var a = { iData: false };    function c() {        var m = navigator.appVersion.split("MSIE");        var n = parseFloat(m[1]);        if ((n >= 5.5) && (document.body.filters)) {            for (var h = 0; h < document.images.length; h++) {                var k = document.images[h];                var p = k.src.toUpperCase();                if (p.substring(p.length - 3, p.length) == "PNG") {                    var l = (k.id) ? "id='" + k.id + "' " : "";                    var q = (k.className) ? "class='" + k.className + "' " : "";                    var g = (k.title) ? "title='" + k.title + "' " : "title='" + k.alt + "' ";                    var o = "display:inline-block;" + k.style.cssText;                    if (k.align == "left") { o = "float:left;" + o }                    if (k.align == "right") { o = "float:right;" + o }                    if (k.parentElement.href) { o = "cursor:hand;" + o }                    var f = "<span " + l + q + g + ' style="float:left; width:' + k.width + "px; height:" + k.height + "px;" + o + ";filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + k.src + "', sizingMethod='scale');\"></span>";                    k.outerHTML = f;                    h = h - 1                }            }        }    }    $.ajax({        url: "/disk/cmsdata?do=client&t=" + new Date().getTime(),        type: "GET",        timeout: 10 * 1000,        success: function(g, f) {            var o = null;            try { o = $.parseJSON(g) } catch (h) {}            if (o != null && o.errorno == 0) {                if (o.android) {                    var l = o.android;                    DOWNLOAD_DES[0] = ["大小：" + l.size, "版本：" + l.version, "适应系统：" + l.system, "更新时间：" + l.publish.split(" ")[0]];                    DOWNLOAD_URL_LOGIN[0] = "http://bcscdn.baidu.com/netdisk/BaiduYun_" + l.version.match(/V(.+$)/)[1] + ".apk"                }                if (o.iphone) {                    var j = a.iData = o.iphone;                    DOWNLOAD_DES[1] = ["大小：" + j.size, "版本：" + j.version, "适应系统：" + j.system, "更新时间：" + j.publish.split(" ")[0]]                }                if (o.ipad) {                    var k = o.ipad;                    DOWNLOAD_DES[2] = ["大小：" + k.size, "版本：" + k.version, "适应系统：" + k.system, "更新时间：" + k.publish.split(" ")[0]]                }                if (o.winphone) {                    var n = o.winphone;                    DOWNLOAD_DES[3] = ["大小：" + n.size, "版本：" + n.version, "适应系统：" + n.system, "更新时间：" + n.publish.split(" ")[0]]                }                if (o.windows) {                    var m = o.windows;                    DOWNLOAD_DES[4] = ["大小：" + m.size, "版本：" + m.version.match(/V(.+$)/)[0], "适应系统：" + m.system, "更新时间：" + m.publish.split(" ")[0]];                    DOWNLOAD_URL_LOGIN[4] = "http://bcscdn.baidu.com/netdisk/BaiduYun_" + m.version.match(/V(.+$)/)[1] + ".exe"                }            }            d()        },        error: function() { d() }    });    var d = function() {        baidu.array.each(baidu.dom.query("#download-ul div"), function(g, f) {            var j = baidu.dom.getAttr(g, "id");            if (DOWNLOAD_URL_LOGIN[f] != "") {                baidu.dom.setAttr(baidu.dom.query("#" + j + " a")[0], "href", DOWNLOAD_URL_LOGIN[f]);                var h = f;                baidu.array.each(baidu.dom.query("#" + j + " p"), function(l, k) { l.innerHTML = DOWNLOAD_DES[f][k] })            } else { baidu.dom.query("#" + j + " p")[0].innerHTML = DOWNLOAD_DES[f][0] }        })    };    baidu.array.each(baidu.dom.q("baohe-li"), function(h, g) {        var f = baidu.dom.children(h);        baidu.dom.setAttr(f[0], "src", CO_APK[g].src);        baidu.dom.setStyle(f[0], "width", CO_APK[g].width);        baidu.dom.setStyle(f[0], "height", CO_APK[g].width);        f[1].innerHTML = CO_APK[g].title;        f[2].innerHTML = CO_APK[g].desc;        baidu.dom.setAttr(f[3], "class", "star" + CO_APK[g].level);        if (CO_APK[g].url != "") { f[4].href = CO_APK[g].url }    });    if (baidu.dom.g("signout") != null) {        baidu.event.on("signout", "click", function(f) {            var g = location.protocol + "//" + location.host + "/";            window.location.href = "https://passport.baidu.com/?logout&u=" + g        })    }    c();    $("#download-ul a").mousedown(function() {        var f = "",            g = "infocenter";        if ($(this).hasClass("clint-pc")) { f = "win" } else { if ($(this).hasClass("clint-android")) { f = "android" } else { if ($(this).hasClass("clint-ios")) { f = "iphone" } else { if ($(this).hasClass("clint-ipad")) { f = "ipad" } else { if ($(this).hasClass("clint-winphone")) { f = "winphone" } } } } }        setTimeout(function() {            var h = new Image();            h.src = "/api/analytics?_lsix=1&page=1&clienttype=0&type=downloadclient&ttype=" + f + "&pos=" + g        }, 500);        return true    })});function getRequest(a) { baidu.ajax.get("/api/analytics?index=" + a + "&type=downloadclient&t=" + (new Date().getTime())) }$(window).ready(function() {    var a = {        imgLog: function(h, k) {            for (var j in k) { h += (h.match(/\?/) ? "&" : "?") + encodeURIComponent(j) + "=" + encodeURIComponent("" + k[j]) }            h += (h.match(/\?/) ? "&" : "?") + "t=" + (+new Date());            var g = new Image();            g.onload = function() {};            g.src = h        },        whatPage: function(l) {            var j = l.txt.split("$");            var k = l.url.split("$");            if (j.length === 1 && k.length === 1) { return l }            var g = /^https?\:\/\/(pan|yun)\.baidu\.com\/?((\#|\?).*)?$/;            var h = /^https?\:\/\/(pan|yun)\.baidu\.com\/(s\/[A-Za-z0-9]{6,16}|share\/.*uk\=\d{6,12}.*)(\#.*)?$/;            var m = {};            if (g.test(location.href)) {                m.txt = j[1];                m.url = k[1]            }            return m        }    };    var c = {        adExist: {            adtxt: function(g) {                txtElem = document.getElementById("top_menu_other");                if (!txtElem) { return }                var h = a.whatPage(g);                txtElem.href = h.url || txtElem.href;                txtElem.innerHTML = h.txt || txtElem.innerHTML            },            adimg: function(g) {                imgElemWrap = document.getElementById("share_aside");                if (!imgElemWrap) { return }                imgElem = document.createElement("a");                imgElem.className = "ad-img-wrap";                imgElem.hidefocus = "true";                imgElemWrap.appendChild(imgElem);                imgElem.style.cssText = "background:url(%src%) center center no-repeat; display:block;".replace(/%src%/, g.src);                imgElem.href = g.url            }        },        adNotUse: {            adtxt: function(h) {                txtElem = document.getElementById("top_menu_other");                if (!txtElem) { return }                txtElem.style.display = "none";                var g = document.getElementById("departForAd");                g && (g.style.display = "none")            }        }    };    var d = function() {        var k = document.getElementById("top_menu_other"),            g = document.getElementById("share_aside"),            h = +!!g + "";        h = h + (+!!k);        h = parseInt(h, 2);        var j = j || {};        j.api = j.api || {};        j.api.RestAPI = j.api.RestAPI || {};        j.api.RestAPI.CMS_DATA_SIMPLE = j.api.RestAPI.CMS_DATA_SIMPLE || "/disk/cmsdata";        $.get(j.api.RestAPI.CMS_DATA_SIMPLE + "?do=piece&ad=" + h + "&t=" + (+new Date()), {}, function(o) { var q, n, m; try { q = $.parseJSON(o) } catch (p) {} if (q != null && q.errorno == 0) { for (var l in q.content) { if (!!+q.content[l].used) { c.adExist[l] && c.adExist[l](q.content[l]) } else { c.adNotUse[l] && c.adNotUse[l](q.content[l]) } } } });        k.onclick = function() {            var l = { type: "adtxtclick", clienttype: "0", currentUrl: window.location.href };            window.FileUtils && FileUtils._mDiskLog.send(l);            !window.FileUtils && a.imgLog("//pan.baidu.com/api/analytics", l)        };        f()    };    var f = function() {        var g = $(".img-content").children();        var h = h || {};        h.api = h.api || {};        h.api.RestAPI = h.api.RestAPI || {};        h.api.RestAPI.CMS_DATA_SIMPLE = h.api.RestAPI.CMS_DATA_SIMPLE || "/disk/cmsdata";        $.get(h.api.RestAPI.CMS_DATA_SIMPLE + "?do=manual&ch=pan_focuspic&t=" + (+new Date()), {}, function(k) { var m; try { m = $.parseJSON(k) } catch (l) {} if (m != null && m.errorno == 0) { for (var j in m.content) { if ($(".img-content").children().length && m.content[j].imgid === "focus" && !!+m.content[j].used) { g[j].children[0].src = m.content[j].src } else { if (m.content[j].imgid === "logo" && !!+m.content[j].used) { $(".yun-logo").css("background", "url('" + m.content[j].src + "')") } } } } })    };    d()});! function(a) {    var c = { strength: 25, scale: 1.05, animationSpeed: "500ms", contain: true, wrapContent: false };    a.fn.interactiveBg = function(d) {        return this.each(function() {            var m = a.extend({}, c, d);            var l = a(this);            var k = l.outerHeight();            var g = l.outerWidth();            var j = m.strength / k;            var f = m.strength / g;            l.mousemove(function(p) {                if (!l.hasClass("ibg-entering") && !l.hasClass("exiting")) {                    var n = p.pageX || p.clientX;                    var h = p.pageY || p.clientY;                    var n = (n - l.offset().left) - (g / 2);                    var h = (h - l.offset().top) - (k / 2);                    var q = ((f * n)) * -1;                    var o = ((j * h)) * -1;                    l.find("> .ibg-bg").css({ "-webkit-transform": "matrix(" + m.scale + ",0,0," + m.scale + "," + q + "," + o + ")", "-moz-transform": "matrix(" + m.scale + ",0,0," + m.scale + "," + q + "," + o + ")", "-o-transform": "matrix(" + m.scale + ",0,0," + m.scale + "," + q + "," + o + ")", transform: "matrix(" + m.scale + ",0,0," + m.scale + "," + q + "," + o + ")", "-webkit-transition": "-webkit-transform " + m.animationSpeed + " linear", "-moz-transition": "-moz-transform " + m.animationSpeed + " linear", "-o-transition": "-o-transform " + m.animationSpeed + " linear", transition: "all " + m.animationSpeed + " linear" })                }            }).mouseleave(function(h) {                if (m.scale !== 1) { l.addClass("ibg-exiting") }                l.addClass("ibg-exiting").find("> .ibg-bg").css({ "-webkit-transform": "matrix(1,0,0,1,0,0)", "-moz-transform": "matrix(1,0,0,1,0,0)", "-o-transform": "matrix(1,0,0,1,0,0)", transform: "matrix(1,0,0,1,0,0)", "-webkit-transition": "-webkit-transform " + m.animationSpeed + " linear", "-moz-transition": "-moz-transform " + m.animationSpeed + " linear", "-o-transition": "-o-transform " + m.animationSpeed + " linear", transition: "all " + m.animationSpeed + " linear" }).on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function() { l.removeClass("ibg-exiting") })            })        })    }}(window.jQuery);(function() {    var d = null;    var c = {        client: function() {            if (d) { return d }            var j = { ie: 0, gecko: 0, webkit: 0, khtml: 0, opera: 0, ver: null };            var g = { ie: 0, firefox: 0, safari: 0, konq: 0, opera: 0, chrome: 0, ver: null };            var l = "";            var h = window.navigator.userAgent;            if (window.opera) {                j.ver = window.opera.version();                j.opera = parseFloat(j.ver);                l = "opera" + j.opera            } else {                if (/AppleWebKit\/(\S+)/.test(h)) {                    j.ver = RegExp["$1"];                    j.webkit = parseFloat(j.ver);                    if (/Chrome\/(\S+)/.test(h)) {                        g.ver = RegExp["$1"];                        g.chrome = parseFloat(g.ver);                        l = "chrome" + g.chrome                    } else {                        if (/Version\/(\S)/.test(h)) {                            g.ver = RegExp["$1"];                            g.safari = parseFloat(g.ver);                            l = "safari" + g.safari                        } else {                            var k = 1;                            if (j.webkit < 100) { k = 1 } else { if (j.webkit < 312) { k = 1.2 } else { if (j.webkit < 412) { k = 1.3 } else { k = 2 } } }                            g.safari = g.ver = k;                            l = "safari" + g.safari                        }                    }                } else {                    if (/KHTML\/(\S+)/.test(h) || /Konqueror\/(\S+)/.test(h)) {                        j.ver = RegExp["$1"];                        j.khtml = parseFloat(j.ver)                    } else {                        if (/rv:([^\)]+)[)] Gecko\/\d{8}/.test(h)) {                            j.ver = RegExp["$1"];                            j.gecko = parseFloat(j.ver);                            if (/Firefox\/(\S+)/.test(h)) {                                g.ver = RegExp["$1"];                                g.firefox = parseFloat(g.ver);                                l = "firefox" + g.firefox                            }                        } else {                            if (/MSIE\s([^;]+)/.test(h)) {                                j.ver = RegExp["$1"];                                j.ie = parseFloat(j.ver);                                l = "ie" + j.ie                            } else {                                if (/WOW64\;\sTrident\/7.0/i.test(h)) {                                    j.ver = 11;                                    j.ie = 11;                                    l = "ie11"                                } else {                                    if (/Edge\/(\d+)/.test(h)) {                                        j.ver = RegExp["$1"];                                        j.ie = "edge";                                        l = "edge"                                    }                                }                            }                        }                    }                }            }            g.ie = j.ie;            g.opera = j.opera;            d = { engine: j, browser: g, browserString: l };            return d        },        setCookie: function(j, m, g, o, l) {            var n = new Date(),                h = "",                k = "";            n.setDate(n.getDate() + g);            if (l) { h = ";domain=" + l }            if (o) { k = ";path=" + o }            document.cookie = j + "=" + escape(m) + ((g == null) ? "" : ";expires=" + n.toGMTString()) + k + h        }    };    var f = c.client();    if (location.protocol === "http:" && f.engine && f.engine.ie != null && (f.browserString === "ie11" || f.browserString === "edge")) {        var a = function(k, j, h) {            var g = new Image();            g.onload = function(l) { typeof j === "function" && j.call(null, l) };            g.onerror = function(l) { typeof h === "function" && h.call(null, l) };            g.src = k        };        a("https://" + location.host + "/yun-static/common/images/default.gif", function(g) {            c.setCookie("secu", 1, 365, "/");            new Image().src = "/api/analytics?_lsix=1&page=1&clienttype=0&type=httpsAccess" + f.browserString        })    }})();(function() {    var f = 3000;    var s = 0;    var q = 0;    var h = 500;    var g = 500;    var a = 0;    var c = $("#login-container");    var j = c.find(".all-index-banner").length - 1;    var t = function(u) {        c.find(".all-index-banner").addClass("hidden");        var w = c.find(".ibg-bg").attr("class");        var v = parseInt(w.match(/\d/ig));        w = "index-banner-" + v;        v++;        if (u > 0 || u === 0) { v = u }        if (v > j) { v = 0 }        c.find(".ibg-bg").removeClass(w);        c.find(".ibg-bg").addClass("index-banner-" + v);        $(".focus-content").find("a").removeClass("current").eq(v).addClass("current");        c.find(".all-index-banner").eq(v).removeClass("hidden")    };    var n = function() {        setTimeout(function() {            t();            setTimeout(n, f)        }, f)    };    var p = function(v, x) { var w = new RegExp("(?:^|\\?|#|&)" + v + "=([^&#]*)(?:$|&|#)", "i"); var u = w.exec(x || location.href); return u ? u[1] : "" };    var k = function() {        var v = "frm",            u = p(v);        if (u) { if (u === "hao123") { $(".yun-logo").css({ background: 'url("/static/images/new/login-all.gif") -954px 0 no-repeat', width: 120 }).attr({ title: "hao123上网导航", href: "http://hao123.com/", target: "_blank" }).next().css({ background: 'url("/static/images/new/login-all.gif") -1073px 0 no-repeat ', width: 113, "margin-left": 0 }).attr({ title: "百度网盘", href: "http://yun.baidu.com/", target: "_blank" }).parent().css({ width: 250, background: "none", filter: "none" }) } }    };    var d = function() { var v = p("fr"); if (v) { var u = $(".two-dimension-code"); if (v === "fengchao") { u.addClass("fr_fengchao") } else { if (v === "wangmeng") { u.addClass("fr_wangmeng") } } } };    $(".focus-content").bind({        click: function(w) {            var v = $(w.target);            if (v.context.tagName.toLowerCase() === "a") {                w.stopPropagation();                var u = parseInt(v.attr("idx"), 10);                t(u)            }            return false        }    });    n();    k();    d();    var o = ["http://issuecdn.baidupcs.com/issue/netdisk/yunguanjia/BaiduNetdisk_5.5.1.exe", "http://issuecdn.baidupcs.com/issue/netdisk/apk/BaiduNetdisk_7.15.1.apk", "http://itunes.apple.com/cn/app/bai-du-wang-pan/id547166701?mt=8", "http://itunes.apple.com/cn/app/bai-du-yun-hd/id554602005?mt=8", "http://www.windowsphone.com/zh-cn/store/app/%E7%99%BE%E5%BA%A6%E4%BA%91/59bf5640-85ae-4a6e-84f1-a61c074e667c", "http://issuecdn.baidupcs.com/issue/netdisk/MACguanjia/BaiduNetdisk_mac_2.0.1.dmg"];    $.ajax({        url: "/disk/cmsdata?do=client&t=" + new Date().getTime(),        type: "GET",        timeout: 10 * 1000,        success: function(y, B) {            var v = null;            try { v = $.parseJSON(y) } catch (A) {}            if (v != null && v.errorno == 0) { if (v.android) { var x = v.android; var u = p("fr"); if (x && x.url) { o[1] = x.url } } if (v.windows) { var z = v.guanjia; if (z && z.url) { o[0] = z.url } } if (v.mac) { var w = v.mac; if (w && w.url) { o[5] = w.url } } }            r()        },        error: function() { r() }    });    var r = function() {        $("#tab-download a").each(function(v) { if (o[v] !== "") { $(this).attr("target-href", o[v]) } });        $(".close, .canvas-bg").on("click", function() {            $(".canvas-bg").addClass("hidden");            $(".qrcode-dialog").addClass("hidden");            if ($(".dialog-content").hasClass("android-qrcode")) { $(".dialog-content").removeClass("android-qrcode") }            if ($(".dialog-content").hasClass("iphone-qrcode")) { $(".dialog-content").removeClass("iphone-qrcode") }        });        $(".download-open, .iphone-target").on("click", function() {            var v = $(this).attr("target-href");            window.open(v)        });        $(".download-target, .android-target").on("click", function() {            var v = $(this).attr("target-href");            location.href = v        });        $(".tab-download").delegate("#android-download", "click", function(v) {            $(".android-target").attr("target-href", o[1]);            $(".android-target").removeClass("hidden");            $(".iphone-target").addClass("hidden");            $(".dialog-content").addClass("android-qrcode");            $(".canvas-bg").removeClass("hidden");            $(".qrcode-dialog").removeClass("hidden")        }).delegate("#iphone-download", "click", function(v) {            $(".iphone-target").attr("target-href", o[2]);            $(".iphone-target").removeClass("hidden");            $(".android-target").addClass("hidden");            $(".dialog-content").addClass("iphone-qrcode");            $(".canvas-bg").removeClass("hidden");            $(".qrcode-dialog").removeClass("hidden")        });        $(".qcode-title").on("click", function() {            $(this).addClass("active");            if ($(".account-title").hasClass("active")) { $(".account-title").removeClass("active") }            $("#netdisk_pass_login_form").addClass("login-form-hide");            if ($(".netdisk-qrcode-container").hasClass("hidden")) { $(".netdisk-qrcode-container").removeClass("hidden") }            if ($(".login-header-title").length > 0) {                $(".login-header-title > h3").removeClass("hidden");                $(".login-header-title > h4").addClass("hidden")            }            if ($("#pass-phoenix-list-login").hasClass("special-move")) { $("#pass-phoenix-list-login").removeClass("special-move") }        });        $(".account-title").on("click", function() {            new Image().src = "/api/analytics?_lsix=1&page=1&clienttype=0&type=pan_switch_account";            $(this).addClass("active");            if ($(".qcode-title").hasClass("active")) { $(".qcode-title").removeClass("active") }            if ($("#netdisk_pass_login_form").hasClass("login-form-hide")) { $("#netdisk_pass_login_form").removeClass("login-form-hide") }            $(".netdisk-qrcode-container").addClass("hidden");            $("#pass-phoenix-list-login").addClass("special-move");            if ($(".login-header-title").length > 0) {                $(".login-header-title > h3").addClass("hidden");                $(".login-header-title > h4").removeClass("hidden")            }        });        var u = function() {            var v = /pan_login_way=\d/ig;            if (document.cookie.match(v)) {                $(".account-title").addClass("active");                $("#netdisk_pass_login_form").removeClass("login-form-hide");                if ($(".login-header-title").length > 0) {                    $(".qcode-title").removeClass("active");                    $(".login-header-title > h3").addClass("hidden");                    $(".login-header-title > h4").removeClass("hidden")                }            } else {                $(".qcode-title").addClass("active");                $(".netdisk-qrcode-container").removeClass("hidden");                if ($(".login-header-title").length > 0) {                    $(".account-title").removeClass("active");                    $(".login-header-title > h3").removeClass("hidden");                    $(".login-header-title > h4").addClass("hidden")                }            }        };        u()    };    var m = function() {        $(".tab-download a").mousedown(function() {            var u = "";            var v = "infocenter";            if ($(this).hasClass("windows")) { u = "win" } else { if ($(this).hasClass("android")) { u = "android" } else { if ($(this).hasClass("iphone")) { u = "iphone" } else { if ($(this).hasClass("ipad")) { u = "ipad" } else { if ($(this).hasClass("wphone")) { u = "winphone" } } } } }            setTimeout(function() {                var w = new Image();                w.src = "/api/analytics?_lsix=1&page=1&clienttype=0&type=downloadclient&ttype=" + u + "&pos=" + v            }, 500);            return true        })    };    m();    var l = function() {        var u = /BDSFRCVID=([^;]+)/gi;        if (u.test(document.cookie)) {            var v = RegExp.$1;            setTimeout(function() {                var w = new Image();                w.src = "/api/analytics?_lsix=1&page=1&clienttype=0&type=alading_src&hash=" + v            }, 500)        }    };    l()})();(function(f, h) {    function c() {        var l = navigator.userAgent.toLowerCase();        var n = /(safari)\/[\d.]+/;        var k = /version\/([\d.]+)/;        var m = { broswer: "", version: "" };        if (l.indexOf("safari") > 0 && l.indexOf("chrome") < 0) {            m.broswer = (l.match(n) || [])[1];            m.version = (l.match(k) || [])[1]        }        return m    }    function d() {        var k = c();        if (k.broswer === "safari" && k.version === "10.1.2") { return }        f("#login-container").interactiveBg()    }    d();    var g = (function() { if (navigator.appName === "Microsoft Internet Explorer") { var m = navigator.appVersion; var l = m.split(";"); var k = l[1].replace(/[ ]/g, "").replace("MSIE", ""); return Number(k) } else { return 0 } })();    function j() {        return (function() {            var k = setTimeout(function() {                f("#TANGRAM__PSP_4__QrcodeRefreshBtn").click();                clearTimeout(k)            }, 300)        })()    }    function a(k) { if (g && g <= 10) { f("#tongbupan-download,#windows-download").on("click", function() { if (typeof k === "function") { k() } }) } }    a(j)})(window.jQuery);var loginSdkV4 = {    init: function() { this.initPass() },    setValue: function(c, a) { c.text(a); if (typeof(c.attr("title")) !== "undefined") { c.attr("title", a) } },    initValue: function() {        var c = $("#TANGRAM__PSP_4__qrcode .pass-form-logo");        var o = $("#TANGRAM__PSP_4__form .pass-form-logo");        var m = $(".tang-pass-footerBar .tang-pass-footerBarQrcode");        var h = $(".tang-pass-footerBar .tang-pass-footerBarULogin");        var d = $("#TANGRAM__PSP_4__qrcode .tang-pass-qrcode-title a");        var j = $("#TANGRAM__PSP_4__qrcode .tang-pass-qrcode-title");        var g = $("#TANGRAM__PSP_4__smsSwitchWrapper");        var k = $("#TANGRAM__PSP_4__sms_btn_back");        var l = $("#TANGRAM__PSP_4__footerULoginBtn");        var f = $("#TANGRAM__PSP_4__QrcodeAnimation");        if ($("#TANGRAM__PSP_4__qrcode").find(".tips").length === 0) { $("#TANGRAM__PSP_4__qrcode").append('<p class="tips">最新版百度网盘App - 首页右上角 - 扫一扫</p>') }        this.setValue(c, "扫一扫登录");        this.setValue(m, "扫一扫登录");        this.setValue(o, "帐号密码登录");        this.setValue(h, "帐号密码登录");        j.html('请使用<a href="https://pan.baidu.com/download?from=login#pan" target="_blank">百度网盘App</a>扫码登录');        g.html(g.html() + "&gt;");        k.html("帐号密码登录&gt;");        var a = f.css("backgroundImage");        var n = a.match(/url\("?(.*)"?\)/)[1];        f.html('<img style="width:100%;height:auto;" src="' + n + '">');        f.css("backgroundImage", "none")    },    getLoginToUrl: function() { var f = /redirecturl=(.*)(&|#)?/; var g = top ? top : window; var d = decodeURIComponent(g.location.search); var c = d.match(f); var a = location.protocol + "//" + location.host + "/disk/home" + g.location.search + g.location.hash; if (c !== null && /baidu\.com/.test(c[1])) { a = c[1] } return a },    imgLog: function(c, f) {        for (var d in f) { c += (c.match(/\?/) ? "&" : "?") + encodeURIComponent(d) + "=" + encodeURIComponent("" + f[d]) }        c += (c.match(/\?/) ? "&" : "?") + "t=" + (+new Date());        var a = new Image();        a.src = c    },    initPass: function() {        var a = this;        $.getScript("https://passport.baidu.com/passApi/js/wrapper.js?cdnversion=" + new Date().getTime(), function() {            passport.use("login", { tangram: true, loginVersion: "v4" }, function(d) {                var c = a.getLoginToUrl();                var f = new d.passport.login({ product: "netdisk", loginType: 1, sms: 5, userPwdLogin: 1, subpro: "netdisk_web", defaultCss: true, hasRegUrl: true, autosuggest: true, hasPlaceholder: true, authsiteLogin: ["tsina", "qzone", "weixin"], u: c, staticPage: location.protocol + "//" + location.host + "/res/static/thirdparty/pass_v3_jump.html", authsiteCfgLogin: { act: "implicit" }, safeFlag: 0 });                f.on("loginSuccess", function(g) {                    new Image().src = "/api/analytics?_lsix=1&page=1&clienttype=0&type=pan_login_account_success";                    document.cookie = "pan_login_way=1;max-age=" + 30 * 24 * 60 * 60 * 1000;                    if (localStorage) { localStorage.setItem("login-time", +new Date) }                    try { a.imgLog("//pan.baidu.com/api/analytics", { type: "web_header_title_web_login_success", clienttype: 0, version: "v5", currentUrl: window.location.href }) } catch (h) { console.log(h) }                });                f.render("login-middle");                a.initValue()            })        });        if (typeof indexedDB === "object") {            indexedDB.deleteDatabase("FileSystem");            indexedDB.deleteDatabase("ImageSystem")        }    }};window.onload = function() {    loginSdkV4.init();    loginSdkV4.imgLog("//pan.baidu.com/api/analytics", { type: "web_header_title_web_login_show", clienttype: 0, version: "v5", currentUrl: window.location.href })};]]></content>
    
    <summary type="html">
    
      
      
        /*@cc_on(function(m,c){var z=&quot;abbr|article|aside|audio|canvas|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|
      
    
    </summary>
    
      <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>selenium+Chrome(79版本以上)反爬</title>
    <link href="http://example.com/wiki/%E7%88%AC%E8%99%AB/selenium%E5%8F%8D%E7%88%AC/"/>
    <id>http://example.com/wiki/爬虫/selenium反爬/</id>
    <published>2021-11-25T08:16:51.544Z</published>
    <updated>2021-11-25T09:06:37.133Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><font size=2>&nbsp;&nbsp;&nbsp;最近在学习爬虫的过程中碰到一个奇怪的现象，当我在正常的浏览器页面访问网站的时候，能够正常访问到网页的数据。然而，当我通过selenium进行爬取网页数据的时候，出现服务器异常的提醒。正常访问能够访问，而通过selenium访问的时候却报错，这是为什么呢？通过查阅相关资料，可以得出，碰上反爬虫了。</font><blockquote><p>分析</p></blockquote><font size=2>为什么可以得出碰上反爬虫了呢？通常我们通过selenium进行爬取网页的时候，可以通过 window.navigator.webdriver检测是否使用了webdriver。我们可以试一下。在正常访问的网页中输入 window.navigator.webdriver，通常返回的是false或undifine，而当我们通过selenium访问浏览器的时候，在网页控制台输入 window.navigator.webdriver，会返回true。假如我是网页的设计者，我就会先在网页加载的时候写下这么一行代码 :</font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.navigator.webdriver)&#123;</span><br><span class="line">    alert(<span class="string">&quot;爬虫爬的好，牢饭吃到饱&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;正常页面&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font size=2>所以，当我们爬取网页出现上述情况的时候，很大可能浏览器存在反selenium。下面介绍一下如何解决反爬，常见的反反爬方案包含：设置参数 excludeSwitches、mitmproxy 拦截过滤、cdp 命令。</font><h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;要想解决上述的问题，我们可以让window.navigator.webdriver返回false即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&#x27;E:\codeEverment\python\chromedriver.exe&#x27;</span>, options=options) <span class="comment"># chrome驱动 </span></span><br><span class="line">                                 </span><br><span class="line"></span><br><span class="line">script = <span class="string">&quot;Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123; get: () =&gt; undefined&#125;)&quot;</span></span><br><span class="line">    </span><br><span class="line">driver.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;<span class="string">&quot;source&quot;</span>: script&#125;)</span><br></pre></td></tr></table></figure><br>要见检查是否避免浏览器对webdriver的检测，可以通过selenium访问<a href="https://intoli.com/blog/not-possible-to-block-chrome-headless/chrome-headless-test.html">https://intoli.com/blog/not-possible-to-block-chrome-headless/chrome-headless-test.html</a>,如果页面显示全绿，那么就表明避免成功，反之失败。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;font size=2&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在学习爬虫的过程中碰到一个奇怪的现象，当我在正常的浏览器页面访问网站的时候，能够
      
    
    </summary>
    
      <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://example.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫-中级</title>
    <link href="http://example.com/wiki/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB-%E4%B8%AD%E7%BA%A7/"/>
    <id>http://example.com/wiki/爬虫/Python爬虫-中级/</id>
    <published>2021-11-22T06:44:03.511Z</published>
    <updated>2021-12-09T08:39:29.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-数据存储"><a href="#1-数据存储" class="headerlink" title="1.数据存储"></a><a href="#one">1.数据存储</a></h3><h3 id="2-动态文件抓取"><a href="#2-动态文件抓取" class="headerlink" title="2.动态文件抓取"></a><a href="#two">2.动态文件抓取</a></h3><h3 id="3-Web端协议分析"><a href="#3-Web端协议分析" class="headerlink" title="3.Web端协议分析"></a><a href="#three">3.Web端协议分析</a></h3><h3 id="4-数据存储"><a href="#4-数据存储" class="headerlink" title="4.数据存储"></a><a href="#one">4.数据存储</a></h3><h3 id="1-数据存储-1"><a href="#1-数据存储-1" class="headerlink" title="1.数据存储"></a><a href="#one">1.数据存储</a></h3><h6 id="1-数据存储-2"><a href="#1-数据存储-2" class="headerlink" title="1. 数据存储"></a>1.<a id="one"/> 数据存储</h6><blockquote><p>前面介绍了关于数据存储的csv,txt,json方式，这里介绍如何采用数据库保存数据，主要是了解两个数据库，关系数据库和分布式数据库。<br>即MySQL和MongoDB。</p></blockquote><h6 id="1-1-MySQL"><a href="#1-1-MySQL" class="headerlink" title="1.1 MySQL"></a>1.1 MySQL</h6><blockquote><p>Python对MySQL的操作通过pymsql模块支持。<br>Python操作MySQL的代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Python对MySQL的操作主要是由pymysql模块进行支持。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 主机ip(host),用户名(user),密码(passwd),数据库名称(db),端口(port),编码(charset)</span></span><br><span class="line"><span class="comment"># 打开数据库， pymysql.connect(host=,user=,passwd=,db=,port=,charset=)</span></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    user=<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    passwd=<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    db=<span class="string">&#x27;votemsy&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库成功后就可以操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个游标对象</span></span><br><span class="line"><span class="comment"># 游标是系统为用户开设的一个数据缓冲区，存放SQL语句的执行结果</span></span><br><span class="line"><span class="comment"># 游标对象支持的数据库的操作</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要执行的sql语句</span></span><br><span class="line">sql = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#执行一条SQL语句</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment">#执行多条SQL语句</span></span><br><span class="line">    cursor.executemany(sql)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#用来从结果中取一条记录，并将游标指向下一条记录</span></span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    <span class="comment">#用来从结果中取多条记录</span></span><br><span class="line">    result = cursor.fetchmany(<span class="number">5</span>)</span><br><span class="line">    <span class="comment">#获取所有记录列表</span></span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入数据</span></span><br><span class="line">    data = <span class="string">&quot;&#x27;qiye&#x27;,20&quot;</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;INSERT INTO person (name,age) VALUES (%s)&#x27;</span>%data)</span><br><span class="line">    <span class="comment"># 插入数据，占位符法</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;INSERT INTO person(name,age) VALUES (%s,%s)&#x27;</span>,(<span class="string">&#x27;qiye&#x27;</span>,<span class="number">20</span>))</span><br><span class="line">    <span class="comment">#执行多条插入语句</span></span><br><span class="line">    cursor.executemany(<span class="string">&#x27;INSERT INTO person(name,age) values &#x27;</span>,[(<span class="string">&#x27;qiye&#x27;</span>,<span class="number">20</span>),(<span class="string">&#x27;jack&#x27;</span>,<span class="number">20</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#查询数据</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;SELECT * FROM person&#x27;</span>)</span><br><span class="line">    res = cursor.fetchall() <span class="comment">#获取所有结果</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line">    cursor.execute(<span class="string">&#x27;SELECT * FROM person&#x27;</span>)</span><br><span class="line">    res = cursor.fetchone() <span class="comment">#只获取一个结果</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改和删除数据</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;UPDATE person SET name=%s WHERE id=%s&#x27;</span>,(<span class="string">&#x27;rose&#x27;</span>,<span class="number">1</span>))</span><br><span class="line">    cursor.execute(<span class="string">&#x27;DELETE FROM person where id=%s&#x27;</span>,(<span class="number">0</span>,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 用来事务提交，只有commit之后，才会提交到数据库进行一系列的操作</span></span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e :</span><br><span class="line">    <span class="comment"># 由于在执行事务的过程中，出现错误，所以回滚，恢复原来的状态，不执行操作</span></span><br><span class="line">    db.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    cursor.close() <span class="comment">#关闭游标</span></span><br><span class="line">    db.close() <span class="comment">#关闭一个数据库连接</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote><h6 id="1-2-MongoDB"><a href="#1-2-MongoDB" class="headerlink" title="1.2 MongoDB"></a>1.2 MongoDB</h6><p>MongoDB是基于分布式文件存储的数据库，用于为Web应用提供可扩展的高性能数据存储解决方案。MongoDB属于非关系数据库。</p><p>MongoDB的基本概念是文档，集合，数据库。</p><p>MongoDB中的表通过collection替代，MongoDB中的行通过document替换。MongoDB中的列通过field替换。<br>MongoDB自动将_id字段设置为主键。</p><blockquote><p>文档：文档是MongoDB中数据的基本单元（即BSON）,类似于关系数据库中的行。文档具有唯一标识_id.数据库可以自动生成。文档以key/value形式。例如: {“name”:”qiye”,”age”:24}</p></blockquote><p>文档具有如下三个特性：</p><ol><li>文档的键值对是有序的，顺序不同文档亦不同。</li><li>文档的值可以是字符串，整数，数组以及文档等类型。</li><li>文档的键是用双引号标识的字符串。以——开头的键是保留的，建议不要使用。</li><li>文档区分大小写以及值类型</li></ol><blockquote><p>集合：集合也就是一组文档，类似于数据表。集合没有固定的结构，可以在集合中插入不同格式和类型的数据（和关系表的差异）。</p></blockquote><p>集合命名不能是空字符串，不能有’\0’字符，不能以system.开头，不要包含$。</p><blockquote><p>数据库：一个MongoDB可以创建多个数据库，默认数据库是db，数据库存储在data目录。MongoDB的单个实例可以容纳多个独立的数据库。</p></blockquote><p>MongoDB的数据类型如下所示：<br><img src="/images/数据类型.PNG" alt="a11"></p><blockquote><p>插入语法：db.集合.insert(JSON格式数据)</p><p>查询语法：db.集合.find()<br><img src="/images/条件查询.PNG" alt="a12"></p></blockquote><p>对于多条件查询(and和or).<br>and通过逗号隔开。例如：db.集合.find({“key1”:{条件1},”key2”:{条件2}})</p><p>or通$or来实现。例如：db.集合.find({<br>    $or:[<br>        {key1:value1},{key2:value2}<br>    ]<br>})</p><blockquote><p>更新文档：MongoDB通过update(),save()方法来更新集合中的文档。update: db.集合.update(<br>    query,<br>    update，{<br>        upsert:boolean,<br>        multi: boolean,<br>        writeConcern:document<br>    }<br>)<br>其中：query为update的查询条件，update:update的对象和一些更新的操作符等（类似于set后面的内容），upsert（可选，如果不存在update记录，是否插入新文档）, multi（可选，是否更新全部查找出来的记录），writeConcern(可选，异常抛出级别)。<br>eg:<br>db.python.update(<br>    {‘title’,’python’},{$set:{‘title’,’python爬’}}<br>)<br>db.python.update(<br>    {‘title’,’python’},{$set:{‘title’:’python爬’}},{multi:true}<br>)</p></blockquote><p>对于save()方法，通过传入的文档替换已有的文档。db.集合.save({<br>    document{<br>        writeConcern:document<br>    }<br>})</p><blockquote><p>删除文档：MongoDB提供了remove()方法来删除文档。</p></blockquote><p>db.集合.remove(<br>    query, #删除的文档的条件<br>    {<br>        justOne:boolean, # 如果设置为true，则只删除一个文档。<br>        writeConcern:document<br>    }<br>)</p><p>删除所有title等于mongodb的文档<br>db.python.remove({‘title’:’Mongodb’})<br>如果没有查询条件，就相当于删除所有的文档。<br>python操作mongodb代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 建立连接</span></span><br><span class="line"><span class="comment">#pymogo模块使用MongoClient对象描述一个数据库客户端，创建对象的主要参数是host和port</span></span><br><span class="line"><span class="comment">#如下三种方式创建</span></span><br><span class="line">client = pymongo.MongoClient() <span class="comment"># 连接默认的主机IP和端口</span></span><br><span class="line"><span class="comment"># client = pymongo.MongoClient(&#x27;localhost&#x27;,27017) #显示指定IP和端口</span></span><br><span class="line"><span class="comment"># client = pymongo.MongoClient(&#x27;mongodb://localhost:27017/&#x27;) #采用URL格式进行连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 获取数据库,通过MongoClient的属性方式来访问数据库</span></span><br><span class="line">db = client.test <span class="comment">#方式一</span></span><br><span class="line"><span class="comment"># db = client[&#x27;pa-pers&#x27;] #方式二</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 获取一个集合</span></span><br><span class="line"><span class="comment"># collection = db.books #方式一</span></span><br><span class="line">collection = db[<span class="string">&#x27;test_one&#x27;</span>] <span class="comment">#方式二</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#插入文档操作</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;mike&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;text&#x27;</span>:<span class="string">&#x27;My first book&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tags&#x27;</span>:[<span class="string">&quot;爬虫&quot;</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;网络&quot;</span>],</span><br><span class="line">    <span class="string">&#x27;date&#x27;</span>: datetime.datetime.utcnow()</span><br><span class="line">&#125;</span><br><span class="line">data_id = collection.insert_one(data) <span class="comment"># 插入一条语句,返回数据的_id值,如果文件内没有_id值，则会自动添加到一文件里</span></span><br><span class="line"><span class="comment"># data_id = collection.insert_many(data) # 插入多条,数据以列表形式[&#123;&#125;,&#123;&#125;]</span></span><br><span class="line"><span class="built_in">print</span>(data_id)</span><br><span class="line"><span class="comment"># 查询语句，find_one</span></span><br><span class="line"><span class="built_in">print</span>(collection.find_one(&#123;<span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;mike&#x27;</span>&#125;))</span><br><span class="line"><span class="comment"># 通过_id查询</span></span><br><span class="line"><span class="built_in">print</span>(collection.find_one(&#123;<span class="string">&#x27;_id&#x27;</span>: ObjectId(<span class="string">&#x27;619c4dc19c281df292e7e0dd&#x27;</span>)&#125;))</span><br><span class="line"><span class="comment"># 通过find可以查询多个符合条件的文档,并且可以在括号中加入限制条件，查询多个符合条件的文档</span></span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> collection.find():</span><br><span class="line">    <span class="built_in">print</span>(book)</span><br><span class="line"><span class="comment"># 统计符合条件的数目</span></span><br><span class="line"><span class="built_in">print</span>(collection.count_documents(&#123;<span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;mike&#x27;</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文档</span></span><br><span class="line">collection.update_one(&#123;<span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;mike&#x27;</span>&#125;,&#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="string">&quot;text&quot;</span>:<span class="string">&quot;python book&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment">#删除文档</span></span><br><span class="line">collection.delete_one(&#123;<span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;mike&#x27;</span>&#125;) <span class="comment"># 如果要删除多个，delete_many</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h6 id="2-动态网站抓取"><a href="#2-动态网站抓取" class="headerlink" title="2. 动态网站抓取"></a>2. <a id="two"/>动态网站抓取</h6><p>动态网页主要涉及到的技术是Ajax（Asynchoronous JavaScript and XML）和动态Html。</p><blockquote><p>Ajax技术用于网页的局部刷新，不必刷新整个页面，只需要调整局部内容，达到想要的效果，用户体验得到提升。<br>AJAX使用SOAP,XML或者支持JSON的WebService接口，在客户端利用JavaScript处理来自服务器的响应。</p></blockquote><p>SOAP:简单对象访问协议是交换数据的一种协议规范，是一种轻量的、简单的、基于XML（标准通用标记语言下的一个子集）的协议，它被设计成在WEB上交换结构化的和固化的信息。</p><blockquote><p>动态html（DHTML，Dynamic Html）,由HTML+CSS+JavaScript。</p></blockquote><p>如何从动态html页面爬取数据？有如下两种方法：</p><blockquote><ol><li>直接从JavaScript中采集加载的数据</li></ol></blockquote><h6 id="爬取影评信息"><a href="#爬取影评信息" class="headerlink" title="爬取影评信息"></a>爬取影评信息</h6><p>网页地址(www.mitime.com)</p><blockquote><ol><li>直接采集浏览器中已经加载的数据</li></ol></blockquote><p>对于直接加载渲染后的页面，可以通过PhantomJS,Selenium进行爬取。PhantomJS是基于WebKit的服务端JavaScript API，全面支持Web而无需浏览器支持，运行快，支持各种Web标准，DOM处理，CSS选择器，JSON，Cancas和SVG。PhantomJS可以用于网页自动化，网络检测，网页截屏，无界面测试等。可以把PhantomJS看成一个无界面的浏览器。</p><p>Selenium: Selenium是一个自动化测试工具，支持各种浏览器，Selenium支持浏览器驱动，可以对浏览器进行控制。</p><p>Selenium可以说是网页爬取的大杀器，可以直接模拟操作浏览器页面。下面介绍关于Selenium的使用方法。</p><blockquote><ol><li>安装配置</li></ol></blockquote><p>对于Selenium的安装配置教程可以自行百度。这里我采用的是Firefox,所以只需要两步，1. 下载selenium,通过pip指令就行。2. 下载驱动器geckodriver。通过如下代码即可使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># executable_path就是下载的geckodriver所在的文件路径</span></span><br><span class="line">driver  = webdriver.Firefox(executable_path=<span class="string">&#x27;E:\codeEverment\python\geckodriver\geckodriver-v0.14.0-win64\geckodriver.exe&#x27;</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure></p><blockquote><ol><li>元素查找</li></ol></blockquote><p>selenium的元素定位方法如下图所示：<br><img src="/images/定位方法.PNG" alt="a22"></p><blockquote><ol><li>页面操作</li></ol></blockquote><p>如何给表单填写内容？我们可以定位到表单元素，然后通过元素.send_keys填入内容。找到按钮或链接通过元素.click()模拟点击事件。如果要清除填入的内容，通过元素.clear()可以清除内容。</p><p>对于下拉选项，可以通过WebDriver提供的一个叫Select方法进行选择。</p><p>对于元素拖拽，首先要找到源元素和目的元素，然后用ActionChains类可以实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">driver  = webdriver.Firefox(executable_path=<span class="string">&#x27;E:\codeEverment\python\geckodriver\geckodriver-v0.14.0-win64\geckodriver.exe&#x27;</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br><span class="line"><span class="keyword">assert</span> <span class="string">u&#x27;百度&#x27;</span> <span class="keyword">in</span> driver.title</span><br><span class="line">elem = driver.find_element_by_name(<span class="string">&#x27;wd&#x27;</span>)</span><br><span class="line">elem.clear()</span><br><span class="line">elem.send_keys(<span class="string">u&#x27;网络爬虫&#x27;</span>) <span class="comment"># 给控件填写内容</span></span><br><span class="line">elem.send_keys(Keys.RETURN) <span class="comment">#这里是回车按钮</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.close()</span><br><span class="line"><span class="comment"># 执行js代码</span></span><br><span class="line"><span class="comment"># 将页面拉到最低端</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.scrollTo(0,document.body.scrollHeight);&quot;</span>)</span><br></pre></td></tr></table></figure><p>显示等待的API：<br><img src="/images/显示等待.PNG" alt="a24"></p><h6 id="3-Web端协议分析-1"><a href="#3-Web端协议分析-1" class="headerlink" title="3. Web端协议分析"></a>3.<a id="three"></a> Web端协议分析</h6><p>这里主要是关于网页登录POST分析，和验证码的解决方法。一般通过form表单填写账号密码，然后进行获取更多有效数据。</p><blockquote><p>通过POST请求登录</p></blockquote><p>一般我们都会通过构造表单数据，进行post请求。但是通常我们不仅仅提交的是账号，密码，还需要分析页面的具体提交数据，’<br>然后分析对应的数据，进行构建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里主要演示了，如何通过session构建表单，然后进行表单提交。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xsrf</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    _xsrf是一个动态参数从网页中获取</span></span><br><span class="line"><span class="string">    :param Session:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    index_url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">    index_page = session.get(index_url)</span><br><span class="line">    html = index_page.text</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">_xsrf = get_xsrf(session)</span><br><span class="line">post_url = <span class="string">&#x27;htttp://www.zhihu.com/login/phone_num&#x27;</span></span><br><span class="line">postdata = &#123; <span class="comment"># 构造post参数，这需要分析登录过程传递的参数，然后进行构建，通常不仅仅包含</span></span><br><span class="line">    <span class="comment">#账号密码选项，还有许多附加项</span></span><br><span class="line">    <span class="string">&#x27;_xsrf&#x27;</span>:_xsrf,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;xxxxxxx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phone_no&#x27;</span>:<span class="string">&#x27;xxxxxxx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;remember_me&#x27;</span>:<span class="string">&#x27;true&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">login_page = session.post(post_url,data=postdata)</span><br><span class="line">login_code = login_page.text</span><br><span class="line"><span class="built_in">print</span>(login_page.status_code)</span><br><span class="line"><span class="built_in">print</span>(login_code)</span><br></pre></td></tr></table></figure><blockquote><p>加密数据分析</p></blockquote><p>通常在网页传输的数据都会进行数据加密，然后添加一系列附加的参数到POST请求中，而且还有验证码。<br>所以这时候需要对网页进行分析。</p><blockquote><ol><li>监听网络数据，分析传送参数</li></ol></blockquote><p>通常这一过程，我们会反复登录，然后记录传送的参数以及cookie中值的变化。</p><blockquote><ol><li>分析参数的获取方式</li></ol></blockquote><p>当我们完成传送参数的分析过程的时候，就需要进一步解析参数的生成方法，然后在程序中进行生成参数，然后构建data,进行post请求。通过我们获取参数的方法有两种。一是根据网络请求分析，查看是否有参数通过API进行获取，例如有的网页的Token，Public_key等是通过API进行获取，通常我们可以在网络请求中查看。二是根据JS文件获取生成方式，通常通过API获取参数还是需要通过JS获取API需要传递的参数，通常我们从JS中获取参数是通过网页文件中搜索参数名，然后从众多包含参数名的JS文件中，分析出参数在哪个JS文件中生成，并提取出相应的生成方法。</p><p>实例代码如下(以百度网盘为例)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析百度网盘的登录：</span></span><br><span class="line"><span class="string">https://passport.baidu.com/v2/api/?login  #账号验证链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">staticpage: https://pan.baidu.com/res/static/thirdparty/pass_v3_jump.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">charset: UTF-8</span></span><br><span class="line"><span class="string">tpl: netdisk</span></span><br><span class="line"><span class="string">subpro: netdisk_web</span></span><br><span class="line"><span class="string">apiver: v3</span></span><br><span class="line"><span class="string">codestring:</span></span><br><span class="line"><span class="string">safeflg: 0</span></span><br><span class="line"><span class="string">u: https://pan.baidu.com/disk/home</span></span><br><span class="line"><span class="string">isPhone:</span></span><br><span class="line"><span class="string">quick_user: 0</span></span><br><span class="line"><span class="string">logintype: basicLogin</span></span><br><span class="line"><span class="string">logLoginType: pc_loginBasic</span></span><br><span class="line"><span class="string">idc:</span></span><br><span class="line"><span class="string">loginmerge: true</span></span><br><span class="line"><span class="string">crypttype: 12</span></span><br><span class="line"><span class="string">mkey:</span></span><br><span class="line"><span class="string">countrycode:</span></span><br><span class="line"><span class="string">fp_uid:</span></span><br><span class="line"><span class="string">fp_info:</span></span><br><span class="line"><span class="string">loginversion: v4</span></span><br><span class="line"><span class="string">supportdv: 1</span></span><br><span class="line"><span class="string">mem_pass: on</span></span><br><span class="line"><span class="string">detect: 1</span></span><br><span class="line"><span class="string">alg: v3</span></span><br><span class="line"><span class="string">tt: 时间戳</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST1：</span></span><br><span class="line"><span class="string">gid: A7A60F7-2233-48D5-9CD2-B51EB721ADDF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">username: 2891112980@qq.com</span></span><br><span class="line"><span class="string">password: OcYb7XL/QONk5nADRh+a8cPYNbCvxlMxmncxXomf94YxHenzYWxVJUnM60bNhLt6mYmL+oXC4QvAVw9ujoREPP/YrFDvJNI87jgBwE6doPvn8/9+H8gATohKY68SaIoF+G9tMh/9VIOk5OuwrmpwzvZNQAY/V7gPAjCGmTKWPu4=</span></span><br><span class="line"><span class="string">rsakey: F6qaltAhSGSTrr3LYZoF0fDJkX11XTI6</span></span><br><span class="line"><span class="string">ppui_logintime: 33785</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ds通过viewlog可以获取</span></span><br><span class="line"><span class="string">#https://passport.baidu.com/viewlog?callback=jQuery11020116633250707733_1637907449065&amp;ak=1e3f2dd1c81f2075171a547893391274&amp;as=b052f9ad&amp;fs=aJ2zH%2BxmPIQryyPrpIPqtXmH72tk2XARV%2F09o05kx%2FNTGdkoP%2Bzms8NSTm0jdEzP%2BhyPK1KdjXobjyUVxQ9OAuiZZmmEtQpubsfgTL8NYZWy5Sj0%2Bp5a20bTVZFZ70YbQcqZadFjrJ3ompkIg8E%2BYKbzQiEl0HRdRM6o429%2BhEeW3SwAMvEl04XHGbic4703ZlUREQzEeQ5v4b840qnfHziBVVGS9jihhHliV1iPFo6%2Brdl0G1YGREEm%2FvCvr3H15pDBP346ucrwUvqF23DN2WxkjdG68I%2FlW8rMEoTmx2sRpgiVDW4FwR7GYgOinomA7XKjKIV44rACzwS5Cd53wrP%2FCxFhAH91X%2BlFr%2F5Nye6OxX7u7B5FeVe4OnMt%2BrE0cYUqWLzqAls1loOLNoKaGNKpxIjOup%2BA%2B4sulrz1K89itYMKw7MQeNERfCI32hPmJ%2FSAJz36rVBtWO1aMUq66Vu7D8QrNIQ6Ko2L1vq3UQGqO0PRKSObWKZ4leHIf7wzJAMMD2K5cIVq1iLD2k7u5RmP8TI8EYsbxA0V4X8rwdAjAnFOgE4ch%2ByNyJfCeB0FPWs6VPPb9Opd37f6ofMcxWxkjdG68I%2FlW8rMEoTmx2smMDXKV2I%2F%2FSoxAYPYNoZT7XKjKIV44rACzwS5Cd53wuq17oB3hRDHI%2F5FD8ApIUyOxX7u7B5FeVe4OnMt%2BrE0pO2CUHf3wzY2O1nRsJt429KpxIjOup%2BA%2B4sulrz1K8%2Fgsgko9%2FybfRXZevgkJ2FTJ%2FSAJz36rVBtWO1aMUq66TWu3mrKMIRru7O6yI6%2B2TDqQXhdGcWeeWbzEILv75p3aopf9L%2Fmg3TG32fE46ACdLe9EtBCfLdqwpsieMHokZYjAnFOgE4ch%2ByNyJfCeB0FTmTqlzbiE0dSKyXoaNVBrXPmvUO8LF0TrlU912rIKlNqHIWEzcVbD5iGbnqKODdJh2NjhpbaJhRLDM6hXKbFY1SOq8SbKq03JqsbsJTIds6txmXY3cvIjmhaLph06iufE2oUGZsm4FwM9L7uTYsCXEhwGeYx1aILjYgChhgGUkTgVEgyn9h0l5p8hDZ7MKqOqYtXA1fmKQ0NEKMmzZd8eYFcgQPNQxncOm63JKnGItlgXNqFT31JBhv5lC7ybrYm5BE4sZtiEjgFwbXnaseNyqG1B2V5SJLYgUj69M46RJ09vxsCO54v7u3N3p1RjZlHwgU0OC16voeLsV3dm54Q2686dcWl%2BMBcvN6nLD3oN4wZ0sE582gll4wCKKEU3HrI&amp;tk=4006KvNubQMyUKPA8V02ndLZ4ZdO%2BQjmAT7GxVnjL4Rwk6ewi356PNOQKePl0ypYx1c7Dpi5RQawPXeIhjtrwJmhbK%2B7%2FP98piTEVpjpMwlZ0Es%3D&amp;_=1637907449068</span></span><br><span class="line"><span class="string">ds: II4Fg+RtgS2K3+RJnfEduZufjjdwD4QhYQhW04uf/VRDc+fFv1h7ViPEKzfVS15/YEt/aPddzytkFKhGf1Uo/XJm6pthogRlVaD8YeC68vvNq44fKPFACQkFXnHXZ8IGNQ8yrxON2Up0DT3jOOlmAxcKlI5PS3IaOp/jshcyHK+rJaRTTxZ4IXSCKZA+yQAEcAjLtuNMmB1RjOGr5SoG6fPAF+/5zUe4JogUCHg4IFDAaLsFP9Nev6IkG0mnTXJlwdIJSe6ZaTCOplnmGC0mouUychSC9/KIyV2TJiN7kJCUQKyqbp3VAbpz+e9xfaFeqtyPv+wOE1buN6QpyyJ8NvJ4edqWVwch1ebshP8gVPM5tNlcd/YWPT2n6VFtxn5ejme5wI1wDnpCBtbXY3C0+hIJaqJ9M94QNQvK4Swn6kGkrLKCgBbkaOfOdnfdMXmUrIOkIn8vCcbx8htOM9d5kNn8DmHNt4rtCcXphfQSNvf4didhsiAzwUU0ZQ1G53CTs7xMe9NqmzIRYgs/OVr4WIqK7r5cRjuBtcWtZAGKqrOWEO9QokQM225kP47RB25Vap6P4obUOTl88p4eNEGefEhqfDr7ZBqZ8p65Ht76ndP1+q8N6dpCh7CR5hv96mkIw1jfYWlQaZvgjNF/3uxqDRSnLLf9LGJ6O2qdR6IdN3XHB5DGmpdnOiu9PWA6J1qSAfeZOiPBXIsoDM+5yTqMwthRIWZK7zJ4B2vfQrqcqYgW3C9w6KglvuIEaNBZBnjrA/QuA1PU8ZMCijyrRN+3jnS1VX6lBoxVFG9oQnRLdyTaNFQbcq1o6zdcRh/zCQMcBSvZK8tKboXFXDK6oN0zYaSBdx3rJVzzEdkAL1gA8t0nqYsFbdQIQjeFi5RjIrjvDknLZ82xw0zoid7DyZ7qYTbIGxjdYK0QdKXH/u6GM446LCkG2wnSgTEHtBWSJIacz3haMH0277hPZeyGtjstPhqrm3v6wFYqSqa0feecGEGXUlFkq1vfEb/q6CQUEoRzZREiW6pEVnFUIzNG/8mqfISDRwYFqTOjNn5HAEho8qf0G9G3zi6FZgGQ8Jq4HJ9F6I4QEagJYde/A5KmPqZNgSxJc/j/vXzQ7I565b/1F6A=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># tk 通过viewlog可以获取</span></span><br><span class="line"><span class="string">tk: 3806qsn4na7kF+g6FX58o+wfHp0rkicKoGxH7zGNq7/Nc12RpVbL51wDca2EsymyAXLwDS2oDrrP90vY/QvHD4ykyS18NmHsVx9q95E2iL5h0T4=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dv: tk0.53300068179592071637896306454@ssr0MBvDUOnmgCECw2C3ptJldEClhFtpdFQJtVI3wWM6COtyEyvJzgnkEOnmgCECw2C3ptJldEClhFtpdFQJtVI3wWM6COtyUitizgnkCOnmgCECw2C3ptJldEClhFtpdFQJtVI3wWM6COvkrgn2zwtHzzupohD3Q9EClFJlhDCpX~JldlI-AHDRpKG9zjny7gFk3iukqOArpvol8hDAdFCptEJyoFJiAyGJ8vB6lVukU-nSAXtr0DBvD7gukn~t9zyvkrlupohD3Q9EClFJlhDCpX~JldyQ68KLJoXvDUzukn-vmz~tkIlupohD3Q9EClFJlhDCpX~JldyQ68KLJoXnDq-nHzytDIOtDrgnmgCECw2C3ptJldEClhFtpdFIiA1M6V~FkrznkrOnyB~ukC~nSrOArpvol8hDAdFCptEJyoFJitlBRleQ2zwtSIOny7yukClvDUOArpvol8hDAdFCptEJyoFJitlBRleQpQHBJhzGJ8XBggLzgFHhpZWhFrhn9zHuk3-CrYQ5OzuSCynyqznkBjnDIwtD3HnkIgtSnivk3-nyq-tkC~hrYL2o~I2nbuHdzB6jNBRpeG2CNB-dKuHglMRoVGRVNG6E_ArnnmzzukrHvkqOtyr-ukrlnyBOvkB~ukrlnyBOnDCyt1zjnSE_</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fuid: FOCoIC3q5fKa8fgJnwzbE67EJ49BGJeplOzf+4l4EOvDuu2RXBRv6R3A1AZMa49I27C0gDDLrJyxcIIeAeEhD8JYsoLTpBiaCXhLqvzbzmvy3SeAW17tKgNq/Xx+RgOdb8TWCFe62MVrDTY6lMf2GrfqL8c87KLF2qFER3obJGn1imUD9LtLDAxtUQVt00ywrFuY99+6ElzcETNlw/C1xZYD5SLH8W4d36DzPMGV4JvslIL5jj8EphieYalb6sMBbKVYW5I2LDDIlDR71IUk1mpk3Y5oUBZH/dZ3rKHJ0IrTnF2Wvu65NpvARErKLH28zZNnk8BWIbmbBo8AkexVQD4TDTFi/kJX2nM5fjwUAQ7erld8wjGrZonj8gE2rhKeVRKCfkBUbih20ajKSj+uMVvFor2HqteRD2yQbHfKX9I9NLYjYxH1YiKtJ/LZAt+jDVAzZK7r2I/XoTgOvpK/GRXi7OMMoCL+ptOvZYbHZs2EmNX6yJZWrVbkhpE/nUJFiBoWKq2H4RxmaiTcdrlpoJQCEBGWNtTsmA4KXyjd88UZ+jjahyvNzJARDVgTFkgMHmv/tVUjVExnyBvjSrtrPoNvLDs45y1J1BPSrpDADEz2WH0+/bGxWLp7WNEcuhl9zrEQCVXVz1ypT0UIooITdod7rWTX1LABi9llmt7bm09SsvyWN9Io4FIQt/daeMGulvDHd3RTujFKqjbyri7OLazNV00oTLvGOs+5nIyBMdEkYaTFoTKPDDVtdCO/a2IhGao+HBbcA3Sf1GWmuogDLSCOxH8nX4hJuc0/kKmVlWYouh6qHeKBM7Z7nT+yF0MXReV/blmoigtQ9A6GiwCQZffiSKUOp1VsS+Ly9+Iupn8y+IS13BgMJv25Rgmo9qqpVhLAbfjO5WTzIDI7m0pWOYtgRQxRCPxURvzJkLg7aW9Jm4l4Bb/STxNSv23Ru6jHCU7CX0YAw0dSweJL1vvynMwJmCcF9FlItQPQ5C9mG3VH8xRyN02ywrifxP8IF10Hg3b+Vi67h2TKPZAaOJzerzLANGXGTGd0Djy9B9kQWIoYRDDc4ujl2xJR5AN3q8OeLV68X8zvK+Yv4VQDA+ZZkVu82rr07bPfAFb6iDElQPL0gOE5uGejgPswFkbgH6k2WEZafSOKRDnPOYABKWeLHdXZe2bA0DO+1FlR8qb+PmiFcZVouo5DCvlQhjRhvpItjUh2/yNfyHjnbZ1A/hRRI7BFVDtu1KaJzjx51nTN1+yRNkC71fasq+HI3zFAuiUsfI5v5JSd2kRNZE7s6bQrA5yMI31SfUDgxDrsd6lPtUU=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">traceid: F3DFF901</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">callback: parent.bd__pcbs__7pdpae</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">time: 1637896340</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sig: NHhDWmhlSkpXWlpoVlpTb1hZajZwaXhyYlRtSmVUM1lCRzBXa1dhOFRPWmtMZnRHd2Vmd29rdTZlUzhHKzl6eA==</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">elapsed: 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">shaOne: 00b653720afbeae6ff66615907b0e59e85a35757</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rinfo: &#123;&quot;fuid&quot;:&quot;1d5264f920930df8d682b5cbac99c9e5&quot;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST2：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#通过gid获取token</span></span><br><span class="line"><span class="string">#https://passport.baidu.com/v2/api/?getapi&amp;token=&amp;tpl=netdisk&amp;subpro=netdisk_web&amp;apiver=v3&amp;tt=1637908334880&amp;class=login&amp;gid=4D970C9-672F-4002-BCD8-D71F629D9C8A&amp;loginversion=v4&amp;logintype=basicLogin&amp;traceid=&amp;time=1637908335&amp;alg=v3&amp;sig=ZHpJazJocTlTeHNMNG5LUlZjdE8yTXNLMUNjMGk3QmVTUzdDajF2Y2Q0M3pjSDBNL1k4ZHN1VHJzY0g0QWdrbw%3D%3D&amp;elapsed=10&amp;shaOne=00c2bc34cb293b92b355a01af5b33dcb0c7c0e19&amp;callback=bd__cbs__elghk8</span></span><br><span class="line"><span class="string">token: 134400c212148a1ed97cd3e14a64dec4</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">#通过loginv4_tangram_c32acce.js可以 看到gid的生成方法</span></span><br><span class="line"><span class="string"># 通过F12查找可以得到gid的生成方法，如下所示</span></span><br><span class="line"><span class="string"># &quot;xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&quot;.replace(/[xy]/g, function(e) &#123;</span></span><br><span class="line"><span class="string">#                     var t = 16 * Math.random() | 0,</span></span><br><span class="line"><span class="string">#                         n = &quot;x&quot; === e ? t : 3 &amp; t | 8;</span></span><br><span class="line"><span class="string">#                     return n.toString(16)</span></span><br><span class="line"><span class="string">#                 &#125;).toUpperCase()</span></span><br><span class="line"><span class="string">gid: 14893FE-D2FB-4BBC-9D6F-353A905BD43D</span></span><br><span class="line"><span class="string">username: 18370446979</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#可以通过rsa加密</span></span><br><span class="line"><span class="string">#通过F12找到password的生成方法</span></span><br><span class="line"><span class="string"># password: function() &#123; e._getRSA(function(t) &#123; e.RSA = t.RSA, e.rsakey = t.rsakey &#125;) &#125;</span></span><br><span class="line"><span class="string">password: qnmL7K9NK7pvaHhlmV/FVFjJEJsUUCmPs+aRr0jWLPSe9y033E9268hTdWCZoGGSz3fV2Q5BN7szAXd8vpH/I4BzNI0Jd72MXb1pkNEXeUnuxEy7xDPGshCWThTIID2PcCydW0dWrs/GrVjTsiwKFrOuig8uWSeJ5F5RVS2ioMc=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rsakey: kC02XvnT7I6uMux9cYbgVbsVqcat7gCK</span></span><br><span class="line"><span class="string">#在loginv4_tangram_c32acce.js文件可以找到ppui的生成方法，没啥影响，可以用相同的ppui</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ppui_logintime: 59338</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ds: DJv1I2ZMYFt4VNJGrEieRzX+fTxEGqp5KEKwP82Eqs0OwC/0nDO0AaGbSnOx4gLBgEwFUlmknWtM8w70bR6651jBTWR3RrN6M8athvLv0qjIh/uqJXSiudqxzvNbI8JrbRQi/L6z0yapH8OzFzgtjkCbQnKIIseJ5YN7pXQNzzfsLmwRSboSxSIMh7H+mNWlm7Jv6bipWb2Ef+mULPz+HJcsYAuYX7ZSRej5qKjg4LilTqk77vHywOzTdYX43QwjBa95tTsSQl3UdoyTyTSoP3+MI39NMnpfvc31ubL1aYBzIwtGTKBGQ6r9IMPO1/apOChCY8Ukvh5YsbuEPVZhHNrWGbwQxmPZGfwnHLxk+a4fe8Swz2GQYZhJWXhGX1zomphghvSfI0Xr0C3ofNTFL5YQ71CiRAzbbmQ/jtEHblVptfsMcO06PhUuRCioIIrvPK3f5pSnKweaOreL/stiDNRDmTc/TFc/zLbPufGyD5xEZm3ptEBPg9JO1kZVGX9hEjqGlJPTvnmgyiTZbqqYMGuU+teFEfSezySS7QbzHrNdJWklVjPbX4MaXF0vQwV3QvJ2BYaIJXbUbmi2N+MCb6uuhcCUzRXcvQcCFN+nCi8JV0rZbi8qRA6qogqITSmcoX+C2ebWRCqd1Bta5oZQDFnlNY8P1//P9TI67UuT8f3rpPwKHtCV94QXnYOPyXhxoFShURm0wEXyWfe6k74eCKJzF9WHKgqjvWNBU4oxh51ptfsMcO06PhUuRCioIIrvRnbBncAl/l2oYpW1Tl+s9vX6rw3p2kKHsJHmG/3qaQjDWN9haVBpm+CM0X/e7GoNFKcst/0sYno7ap1Hoh03dccHkMaal2c6K709YDonWpJOuWUh5Btk18pp2ofQaQue++3sNK8B3l22xvtu69xAcBbcL3DoqCW+4gRo0FkGeOsD9C4DU9TxkwKKPKtE37eOdLVVfqUGjFUUb2hCdEt3JNo0VBtyrWjrN1xGH/MJAxwFK9kry0puhcVcMrqg3TNhpIF3HeslXPMR2QAvWADy3SepiwVt1AhCN4WLlGMiuO/EHjpcfKHlM/uGqUpTxlzFg6wRAvrcujI33KeY139x4zosKQbbCdKBMQe0FZIkhpybzWnTPAJbZ2HlksG4LzZfZZxOv3Rz8OzebBbGZY2cKHzOIWo49PxA+Q/fgOWSMCg+0HmDAKY5njRPYRTBGiWmrU3+ErtPH77j3x0d0oaItNhgp6PrWJ92dgGBZTxabg4LrS+iGvesD1QIbG1EpOUu6EGco5bp1s9+m48R0KveFA==</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tk: 5886+r0RsngU7eH85qinjvKq/Ov8cTqi3758E9sFclzWzRrsTzYvBtjqRuohenHcu9EkNtVwd1ZSl1bUdta7LJyUF+N0t3lElPs4Qk2Y4E3v6mM=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dv: tk0.076573147928699071637897079952@ssm0MCo4JL8mcC6CyrCStv9Xw6CXhUvtwUR9v3JSyEOGCLvj6ZvT-c8k6L8mcC6CyrCStv9Xw6CXhUvtwUR9v3JSyEOGCLvjKeo9-yoH--0tDh4SRH6CXU9Xh4CtlZ9XwXJiAe4atYFH-~ok6cUk2-8e--0tDh4SRH6CXU9Xh4CtlZ9XwXJiAe4atYFH-x8k6yUkSi0kqLA2toDXph4AwUCtv69jDU9~AjF9poKGX30k7eo4hltm0otok7-0k8~ve-Xv12e0tDh4SRH6CXU9Xh4CtlZ9XwjRGpYI9Dlo46e0k8Xve-Xvj8Z0tDh4SRH6CXU9Xh4CtlZ9XwjRGpYI9Dlo4KX0k5x8e-Xok6y0tDh4SRH6CXU9Xh4CtlZ9XwaO~pYUkSi8e-e8j8Lv16e8mcC6CyrCStv9Xw6CXhUvtwUR9v3JSyEOGAlokKe0kSX0k2e812e0r-_CllI~lI~vtMEhImi8H-e0kSiBmpRsL-01q~v1C~8j2ZvjSeokKyo4q~84Kjvj7yvjq~o4SX87__imVIrDZJr8P0ew-KGxgKatWFrCgKiwY0ecXOaD3Fa3gFG6_zmp8m--0k2ev18Lvj2i0k2X8jKLokKZ0k2X8jKL84CjvB-x816_</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fuid: FOCoIC3q5fKa8fgJnwzbE67EJ49BGJeplOzf+4l4EOvDuu2RXBRv6R3A1AZMa49I27C0gDDLrJyxcIIeAeEhD8JYsoLTpBiaCXhLqvzbzmvy3SeAW17tKgNq/Xx+RgOdb8TWCFe62MVrDTY6lMf2GrfqL8c87KLF2qFER3obJGn1imUD9LtLDAxtUQVt00ywrFuY99+6ElzcETNlw/C1xZYD5SLH8W4d36DzPMGV4JvslIL5jj8EphieYalb6sMBbKVYW5I2LDDIlDR71IUk1mpk3Y5oUBZH/dZ3rKHJ0IrTnF2Wvu65NpvARErKLH28zZNnk8BWIbmbBo8AkexVQD4TDTFi/kJX2nM5fjwUAQ7erld8wjGrZonj8gE2rhKeVRKCfkBUbih20ajKSj+uMVvFor2HqteRD2yQbHfKX9I9NLYjYxH1YiKtJ/LZAt+jDVAzZK7r2I/XoTgOvpK/GRXi7OMMoCL+ptOvZYbHZs2EmNX6yJZWrVbkhpE/nUJFiBoWKq2H4RxmaiTcdrlpoJQCEBGWNtTsmA4KXyjd88UZ+jjahyvNzJARDVgTFkgMHmv/tVUjVExnyBvjSrtrPoNvLDs45y1J1BPSrpDADEz2WH0+/bGxWLp7WNEcuhl9zrEQCVXVz1ypT0UIooITdod7rWTX1LABi9llmt7bm09SsvyWN9Io4FIQt/daeMGulvDHd3RTujFKqjbyri7OLazNV00oTLvGOs+5nIyBMdEkYaTFoTKPDDVtdCO/a2IhGao+HBbcA3Sf1GWmuogDLSCOxH8nX4hJuc0/kKmVlWYouh6qHeKBM7Z7nT+yF0MXReV/blmoigtQ9A6GiwCQZffiSKUOp1VsS+Ly9+Iupn8y+IS13BgMJv25Rgmo9qqpVhLAbfjO5WTzIDI7m0pWOYtgRQxRCPxURvzJkLg7aW9Jm4l4Bb/STxNSv23Ru6jHCU7CX0YAw0dSweJL1vvynMwJmCcF9FlItQPQ5C9mG3VH8xRyN02ywrifxP8IF10Hg3b+Vi67h2TKPZAaOJzerzLANGXGTGd0Djy9B9kQWIoYRDDc4ujl2xJR5AN3q8OeLV68X8zvK+Yv4VQDA+ZZkVu82rr07bPfAFb6iDElQPL0gOE5uGejgPswFkbgH6k2WEZafSOKRDnPOYABKWeLHdXZe2bA0DO+1FlR8qb+PmiFcZVouo5DCvlQhjRhvpItjUh2/yNfyHjnbZ1A/hRRI7BFVDtu1KaJzjx51nTN1+yRNkC71fasq+HI3zFAuiUsfI5v5JSd2kRNZE7s6bQrA5yMI31SfUDgxDrsd6lPtUU=</span></span><br><span class="line"><span class="string">traceid: B67AC501</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#baidu.phoenix._setIconsStatus</span></span><br><span class="line"><span class="string">#只是标识，不参与校验</span></span><br><span class="line"><span class="string">&quot;bd__cbs__&quot; + Math.floor(Math.random() * 2147483648).toString(36)</span></span><br><span class="line"><span class="string">callback: parent.bd__pcbs__kk48fu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">time: 1637897139</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">alg: v3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sig: cFJLQ0ZzMWo2VmFaaUVXMFJQbk94QUhuUWFLeEVkNFllM2tjOVhFQ1hOcEg2UC9PUUltR2l2SnZOcFpQNi9FTw==</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">elapsed: 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">shaOne: 00a72749f19999931e2653a554991baf3f874f7b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rinfo: &#123;&quot;fuid&quot;:&quot;1d5264f920930df8d682b5cbac99c9e5&quot;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    一般我们对登录附加信息的获取，都会通过多个POST请求进行比较，得出不变的数据和变动的数据，</span></span><br><span class="line"><span class="string">    然后进行分析处理。</span></span><br><span class="line"><span class="string">    1. 获取表单提交参数</span></span><br><span class="line"><span class="string">    2. 确定参数获取方式-&gt;可以通过F12的内容查找，然后搜索指定参数名，找到对应的代码，分析数据如何生成的</span></span><br><span class="line"><span class="string">    3. 构建post请求，进行登录</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">import</span> PyV8 <span class="comment">#pyv8引擎，可以直接执行js代码，不用转换为python语言</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    s.get(<span class="string">&#x27;http://yun.baidu.com&#x27;</span>)</span><br><span class="line">    js = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    function callback()&#123;</span></span><br><span class="line"><span class="string">        return &quot;bd__cbs__&quot; + Math.floor(Math.random() * 2147483648).toString(36) ; </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function gid()&#123;</span></span><br><span class="line"><span class="string">    return &quot;xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&quot;.replace(/[xy]/g, function(e) &#123;</span></span><br><span class="line"><span class="string">                    var t = 16 * Math.random() | 0,</span></span><br><span class="line"><span class="string">                        n = &quot;x&quot; === e ? t : 3 &amp; t | 8;</span></span><br><span class="line"><span class="string">                    return n.toString(16)</span></span><br><span class="line"><span class="string">                &#125;).toUpperCase()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    ctxt = PyV8.JsContext()</span><br><span class="line">    ctxt.enter()</span><br><span class="line">    ctxt.<span class="built_in">eval</span>(js)</span><br><span class="line">    <span class="comment">### 获取gid</span></span><br><span class="line">    gid = ctxt.<span class="built_in">locals</span>.gid()</span><br><span class="line">    <span class="comment">### 获取callback</span></span><br><span class="line">    callback = ctxt.<span class="built_in">locals</span>.callback()</span><br><span class="line">    <span class="comment">### 获取token,根据需要的参数，传入相应参数，返回对应的token</span></span><br><span class="line">    tokenUrl = <span class="string">&quot;#https://passport.baidu.com/v2/api/?getapi&amp;token=&amp;tpl=netdisk&amp;subpro=netdisk_web&amp;apiver=v3&amp;tt=1637908334880&amp;class=login&amp;gid=4D970C9-672F-4002-BCD8-D71F629D9C8A&amp;loginversion=v4&amp;logintype=basicLogin&amp;traceid=&amp;time=1637908335&amp;alg=v3&amp;sig=ZHpJazJocTlTeHNMNG5LUlZjdE8yTXNLMUNjMGk3QmVTUzdDajF2Y2Q0M3pjSDBNL1k4ZHN1VHJzY0g0QWdrbw%3D%3D&amp;elapsed=10&amp;shaOne=00c2bc34cb293b92b355a01af5b33dcb0c7c0e19&amp;callback=bd__cbs__elghk8&quot;</span></span><br><span class="line">    token_response = s.get(tokenUrl)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&quot;token&quot;\s*:\s*&quot;(\w+)&quot;&#x27;</span>)</span><br><span class="line">    match = pattern.search(token_response.text)</span><br><span class="line">    <span class="keyword">if</span> match:</span><br><span class="line">        token = match.group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception</span><br><span class="line">    <span class="comment">#### 获取callback</span></span><br><span class="line">    callback2 = ctxt.<span class="built_in">locals</span>.callback()</span><br><span class="line">    <span class="comment">#### 获取rsakey和pubkey</span></span><br><span class="line">    rsaUrl = <span class="string">&quot;&quot;</span></span><br><span class="line">    response = s.get(rsaUrl)</span><br><span class="line">    key = response.text <span class="comment">#匹配搜索key</span></span><br><span class="line">    pubkey = response.text</span><br><span class="line">    <span class="comment">####加密password</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span> <span class="comment">#自己的密码</span></span><br><span class="line">    pubkey = pubkey.replace(<span class="string">&#x27;\\n&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#处理pubkey</span></span><br><span class="line">    rsakey = RSA.importKey(pubkey) <span class="comment">#百度网盘通过的是RSA加密</span></span><br><span class="line">    cipher = PKCS1_v1_5.new(rsakey)</span><br><span class="line">    password = base64.b64decode(cipher.encrypt(password)) <span class="comment">#加密</span></span><br><span class="line">    <span class="comment">###获取callback</span></span><br><span class="line">    callback3 = ctxt.<span class="built_in">locals</span>.callback()</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;charset&quot;</span>: <span class="string">&#x27;UTF - 8&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;tpl&quot;</span>: <span class="string">&quot;netdisk&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subpro&quot;</span>: <span class="string">&quot;netdisk_web&quot;</span>,</span><br><span class="line">        <span class="string">&quot;apiver&quot;</span>: <span class="string">&quot;v3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;codestring&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;safeflg&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;u&quot;</span>: <span class="string">&#x27;https: // pan.baidu.com / disk / home&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;isPhone&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;quick_user&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;logintype&quot;</span>: <span class="string">&quot;basicLogin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;logLoginType&quot;</span>: <span class="string">&quot;pc_loginBasic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;idc&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;loginmerge&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;crypttype&quot;</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">&quot;mkey&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;countrycode&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fp_uid&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fp_info&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;loginversion&quot;</span>: <span class="string">&quot;v4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;supportdv&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;mem_pass&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">        <span class="string">&quot;detect&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;v3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gid&quot;</span>:gid,</span><br><span class="line">        <span class="string">&#x27;callback&#x27;</span>:callback3,</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>:token,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>:password</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#构建好了表单数据，然后就可以进行页面登录了</span></span><br><span class="line">    post1_response = s.post(<span class="string">&#x27;https://passport.baidu.com/v2/api/?login&#x27;</span>,data=data)</span><br><span class="line">    <span class="comment">#如果页面还有其它信息需要验证，在后面进行处理即可</span></span><br><span class="line">    <span class="comment">#比如需要滑块验证等</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><blockquote><p>验证码问题</p></blockquote><p>从上面的POST表单构建引出的一个新的问题，就是关于验证码的问题，通常验证码有三种形式，一种是在post表单中的图片的验证码，一种是根据图片点击相应的区域，一种是滑块验证。</p><blockquote><blockquote><p>IP代理</p></blockquote></blockquote><p>同一个IP频繁访问网页，可能会导致IP被封禁或者需要输入验证码验证是否是真人。解决的方法可以通过加大爬虫的延时，让网页觉得你就是真人在浏览网页，毕竟通过爬虫访问网页的频率过快，容易被识别，然而通过减慢爬虫时延带来的另一个问题就是效率的降低。更好的一种做法的更换IP进行访问。</p><p>IP代理的方式可以通过设置request的proxies参数进行设置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理设置，使用代理Proxy,可以为任意请求方法通过设置proxies参数来配置单个请求</span></span><br><span class="line">   proxies = &#123;</span><br><span class="line">       <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://0.10.1.10:3128&quot;</span>,</span><br><span class="line">       <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://10.10.1.10:1080&quot;</span>,</span><br><span class="line">       <span class="comment"># &quot;http&quot;:&quot;http://user:pass@10.10.1.10:3128&quot; #这是代理中身份认证的用户名和密码，来设置代理</span></span><br><span class="line">   &#125;</span><br><span class="line">   requests.get(<span class="string">&quot;www.baidu.com&quot;</span>, proxies=proxies)  <span class="comment"># 设置代理ip</span></span><br></pre></td></tr></table></figure><br>我们已经知道通过request可以设置代理IP，那么如何获取代理IP？有如下几种方式：</p><blockquote><ol><li><p>VPN<br>国内和国外很多厂商提供VPN服务，可以分配不同的网络线路，并可以自动更换IP，实时性很高，速度很快。但是价格一般较高，适合商用。</p></li><li><p>IP代理池<br>一些厂商将很多IP做成代理池，提供API接口，允许用户使用程序调用。稳定的IP代理池费用也是较高的，所以不适合个人学习使用。</p></li><li><p>ADSL宽带拨号<br>也就是拨号上网。ADSL每次断开重新连接时会分配新的IP地址，爬虫可以利用这个原理更换IP。但是更换IP需要断开重连，所以效率并不高，适用于实时性不高的场景。<br>Windows下通过rasdial操作可以进行拨号，Python通过os.system来执行命令行语句，进行拨号操作。代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">作为示例进行演示，如何通过ADSL进行拨号和断开</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_adsl_account = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;adsl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;xxxxxxxx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;xxxxxxxx&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adsl</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = g_adsl_account[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        self.username = g_adsl_account[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        self.password = g_adsl_account[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="comment">#修改asdl</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_adsl</span>(<span class="params">self,account</span>):</span></span><br><span class="line">        self.name = account[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        self.username = account[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        self.password = account[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        拨号连接</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self</span>):</span></span><br><span class="line">        cmd_str = <span class="string">&quot;rasdlal %s %s %s&quot;</span>%(self.name,self.username,self.password)</span><br><span class="line">        os.system(cmd_str)<span class="comment">#调用windows的控制台，通过rasdlal进行拨号</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        断开连接</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span>(<span class="params">self</span>):</span></span><br><span class="line">        cmd_str = <span class="string">&quot;rasdial %s / disconnect&quot;</span>%self.name</span><br><span class="line">        os.system(cmd_str)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        重新拨号</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconnect</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.disconnect()</span><br><span class="line">        self.connect()</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>如果我们想要找到一些免费的IP代理，可以在各个网站寻找免费的IP，然后对IP去重，检测代理有效性等操作，存放到数据库中，通过接口获取免费的IP，构建自己的IP池。</p><blockquote><blockquote><p>图片验证码识别</p></blockquote></blockquote><p>我们在浏览器登录的时候，常常需要输入图片验证码，这里给出几种方法解决图片验证码的问题。</p><blockquote><ol><li>Cookie绕过登录，我们在浏览网站的时候，常常会保留登录信息，下次登录就不要进行登录，通过Cookie即可登录。所以我们可以获取登录后的Cookie，然后设置Cookie，绕过登录。可以获取多个Cookie，构建Cookie池，绕过登录验证。示例代码如下。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过已经登陆过的Cookie进行通过Cookie进行登录。</span></span><br><span class="line"><span class="string">    我们可以在模拟登录成功后，将session的值保存到本地，后续可以通过cookie进行登录。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.cookies <span class="keyword">import</span> cookiejar_from_dict</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_session</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="comment">#将session写入文件,session.txt</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;session.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(session.headers,f) <span class="comment">#写入头</span></span><br><span class="line">        pickle.dump(session.cookes.get_dict(),f)<span class="comment">#写入Cookie值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;将sesssion写入文件:session.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_session</span>():</span></span><br><span class="line">    <span class="comment">#加载session</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;session.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        headers = pickle.load(f)</span><br><span class="line">        cookies = pickle.load(f)</span><br><span class="line">        <span class="keyword">return</span> headers,cookies</span><br><span class="line">session  = requests.Session()</span><br><span class="line">session.headers = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span></span><br><span class="line">dicts = <span class="built_in">dict</span>()</span><br><span class="line">dicts[<span class="string">&#x27;BDORZ&#x27;</span>] = <span class="string">&#x27;FFFB88E999055A3F8A630C64834BD6D0&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;PSINO&#x27;</span>] = <span class="string">&#x27;7&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;BDRCVFR[hpwYTbhBfiY]&#x27;</span>] = <span class="string">&#x27;9xWipS8B-FspA7EnHc1QhPEUf&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;BDUSS_BFESS&#x27;</span>] = <span class="string">&#x27;XFOcmlGQVhEdUZjSnJiWmJmbVgza35YV0RvZktEUEdkUXgyYkJ4S01uOER0OHRoSVFBQUFBJCQAAAAAAAAAAAEAAADprZrnsrvLxrnp1MYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMqpGEDKqRhW&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;BDUSS&#x27;</span>] = <span class="string">&#x27;XFOcmlGQVhEdUZjSnJiWmJmbVgza35YV0RvZktEUEdkUXgyYkJ4S01uOER0OHRoSVFBQUFBJCQAAAAAAAAAAAEAAADprZrnsrvLxrnp1MYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMqpGEDKqRhW&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;BAIDUID_BFESS&#x27;</span>] = <span class="string">&#x27;E8BBAF114F9097C4849493D68A677EC2:FG=1&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;HMACCOUNT_BFESS&#x27;</span>] = <span class="string">&#x27;13391551711E4651&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;MCITY&#x27;</span>] = <span class="string">&#x27;-%3A&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;BAIDUID&#x27;</span>] = <span class="string">&#x27;A02BD18D5032DA5E3DA0339468C7AE42:FG=1&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;__yjs_duid&#x27;</span>] = <span class="string">&#x27;1_2b5acc51d9eef8efeada14364c2710b71633588836061&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_dl_fref&#x27;</span>] = <span class="string">&#x27;https://blog.csdn.net/kaida1234/article/details/89553115&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;Hm_lpvt_6bcd52f51e9b3dce32bec4a3997715ac&#x27;</span>] = <span class="string">&#x27;1638500494&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_page_id&#x27;</span>] = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_first_page&#x27;</span>] = <span class="string">&#x27;https%3A//i.csdn.net/&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;log_Id_pv&#x27;</span>] = <span class="string">&#x27;1556&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;delPer&#x27;</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;TY_SESSION_ID&#x27;</span>] = <span class="string">&#x27;1e66f339-636d-4633-845e-6afde0a1d0f8&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;PSTM&#x27;</span>] = <span class="string">&#x27;1633401440&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;dc_sid&#x27;</span>] = <span class="string">&#x27;2cee0d889d6dbf50e0ba642d35372f04&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;dc_session_id&#x27;</span>] = <span class="string">&#x27;10_1638499930521.206489&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;log_Id_click&#x27;</span>] = <span class="string">&#x27;664&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_segment&#x27;</span>] = <span class="string">&#x27;12&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_first_ref&#x27;</span>] = <span class="string">&#x27;cn.bing.com&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;ab_sr&#x27;</span>] = <span class="string">&#x27;1.0.1_MzcxMWQ4NzQzNGYyZWRmZmJhNTA2NTdiNDY5Yjc2M2I3NTg2MThlZjg4OGRhZWVjNGExYmEwYzljODc5ZmExNmJhM2RkYWQxOTI5NzcyZjhiZWM5MDExNmU3ODZjNTcxMGY1MDg0ZTA1MmE3MTc4MWZjYTcxYjQ0ODg5OGVjY2JiZDgyZjlkYjk5Nzg4M2Q4OTVkYzRiMDIwZWJkM2FmOQ==&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;firstDie&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;log_Id_view&#x27;</span>] = <span class="string">&#x27;4444&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_dl_um&#x27;</span>] = <span class="string">&#x27;-&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;AU&#x27;</span>] = <span class="string">&#x27;5E7&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_dl_rid&#x27;</span>] = <span class="string">&#x27;1638195457309_383576&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;H_PS_PSSID&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;uuid_tt_dd&#x27;</span>] = <span class="string">&#x27;10_37481785600-1633532465546-630652&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;Hm_up_6bcd52f51e9b3dce32bec4a3997715ac&#x27;</span>] = <span class="string">&#x27;%7B%22islogin%22%3A%7B%22value%22%3A%221%22%2C%22scope%22%3A1%7D%2C%22isonline%22%3A%7B%22value%22%3A%221%22%2C%22scope%22%3A1%7D%2C%22isvip%22%3A%7B%22value%22%3A%220%22%2C%22scope%22%3A1%7D%2C%22uid_%22%3A%7B%22value%22%3A%22weixin_43387852%22%2C%22scope%22%3A1%7D%7D&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_dl_prid&#x27;</span>] = <span class="string">&#x27;1638100826971_946707&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;Hm_lvt_e5ef47b9f471504959267fd614d579cd&#x27;</span>] = <span class="string">&#x27;1637833430&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;Hm_ct_6bcd52f51e9b3dce32bec4a3997715ac&#x27;</span>] = <span class="string">&#x27;6525*1*10_37481785600-1633532465546-630652!5744*1*weixin_43387852&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;BT&#x27;</span>] = <span class="string">&#x27;1633859763611&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;HMACCOUNT&#x27;</span>] = <span class="string">&#x27;13391551711E4651&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;Hm_lvt_6bcd52f51e9b3dce32bec4a3997715ac&#x27;</span>] = <span class="string">&#x27;1638500140,1638500349,1638500394,1638500403&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;p_uid&#x27;</span>] = <span class="string">&#x27;U010000&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;UN&#x27;</span>] = <span class="string">&#x27;weixin_43387852&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;__gads&#x27;</span>] = <span class="string">&#x27;ID=20d2edb2ecff0dd8-2294b66f51cc00dd:T=1633682976:RT=1633682976:S=ALNI_MZ4Wd5yAdGLxFPr5rHe4LQE0aLwJw&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;BIDUPSID&#x27;</span>] = <span class="string">&#x27;FBAA203ACF6D45F80BC31F3396736AD0&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;dc_tos&#x27;</span>] = <span class="string">&#x27;r3ir2m&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_ref&#x27;</span>] = <span class="string">&#x27;https%3A//i.csdn.net/&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;ssxmod_itna&#x27;</span>] = <span class="string">&#x27;Yq+xBDuQG=YUGkDzxAhYo=mxWqY5Y3K3qoiQD/YBmDnqD=GFDK40oE7bD7mKn5BAuDeWxrGhuqWKFixPmaAiDOh31A+=0iEdDU4i8DCTrPoD4fKGwD0eG+DD4DWDmW7DnxAQDjxGpycuTXBDi3Dbg=Di4D+zd=DmqG0DDUH/4G2D7Uy8ivyWld52ubMiir4YB=DjqTD/+qFMWRFsa5VWjnTu44DC2v1oi519poqYAiWbqGybKGunqXV4uR1pq0Z3j5vKG4oBrdoBiPet0q3ngxU6GDPARCztP4KD++P7g+dBr5DGRwx3wDxD&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;UserToken&#x27;</span>] = <span class="string">&#x27;885ba7040ab64148b8d10b4450fcc279&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;UserNick&#x27;</span>] = <span class="string">&#x27;%E5%BD%92%E6%9D%A5%E7%A9%BA%E7%A9%BA&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;BDRCVFR[C0p6oIjvx-c]&#x27;</span>] = <span class="string">&#x27;Ble67U-OKLffjRLnjc3nW6kg1IxpA7E&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;ssxmod_itna2&#x27;</span>] = <span class="string">&#x27;Yq+xBDuQG=YUGkDzxAhYo=mxWqY5Y3K3qoiG9toFxBwm47pxUxBa4Hq7GFGfoiDhPizeG7q5h7Mt7khdzCG2O7=IYjr6oTN9ebmgXvejbDDQt5Uljyh7yEuBiEMSIhcGRVeRAB+Er04T2YpCHxTHtYBrV15C0eviq+WkT8vmqGKrtFG=Mo7sk/ntYiGQI87s1SYx1=TpeYcD5OALP3OQgpKTRGpC8bLiPSMTSCodV1ddSeu1P99Niqq8dQDd8+mcI+I5FHuv=yFBy=Ui7ZguyP6CkyK9C79iTqo4RqQd7EgTbEExB=XSjr88yXeYel5TGD1iDPnnD87ZjDQAGXQH+juTKGtnYnRahRAEKiPL+T8qkYT8m+Rfrue493By+ydLytmbuKaH8EG7wRfwD1eVGar8usImSzTL8TEB2qTwYBx4U5lGftyDTa9bB0sRWl748nyt6uW0xEDBAYAm8Hxm5fDx//oaf2ZYB4txDKdNdYzlm+0Ghg+xMcWCAXV138h8iDaP8DzG482Wr72i44D7=DYIOeD=&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_pref&#x27;</span>] = <span class="string">&#x27;https%3A//cn.bing.com/&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_utm_medium&#x27;</span>] = <span class="string">&#x27;distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;UserName&#x27;</span>] = <span class="string">&#x27;weixin_43387852&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;c_dl_fpage&#x27;</span>] = <span class="string">&#x27;/download/weixin_38695452/12856957&#x27;</span></span><br><span class="line">dicts[<span class="string">&#x27;UserInfo&#x27;</span>] = <span class="string">&#x27;885ba7040ab64148b8d10b4450fcc279&#x27;</span></span><br><span class="line"><span class="comment">#不能直接将字典对象设置为cookies ，需要通过requests库的cookiejar_from_dict()方法</span></span><br><span class="line"><span class="comment">#把字段对象转换为cookiejar对象</span></span><br><span class="line">session.cookies = cookiejar_from_dict(dicts)</span><br><span class="line">r = session.post(<span class="string">&#x27;https://blog.csdn.net/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">save_session(session)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(session.headers)</span></span><br><span class="line"><span class="comment"># print(session.cookies.get_dict())</span></span><br><span class="line"><span class="comment"># session.headers,session.cookies = load_session() #将cookie设置为保存的cookie</span></span><br></pre></td></tr></table></figure></li><li>借助图片识别技术识别图片文字。一种常用的是通过tesseract-ocr进行识别，一种借助百度提供的文字识别技术进行识别处理。</li></ol></blockquote><p>通过图像识别技术来获取文字信息，通常需要对图像进行预处理来提高识别准确率。这里给出一些处理流程。</p><p><pre class="mermaid">    graph LR        原始图片 --> 图片放大        图片放大 --> 灰度化        灰度化 --> 二值化        二值化 --> 去除边框        去除边框 --> 降噪        降噪 --> 结束</pre><br>示例代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#图像处理方法</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#1.放大图片</span></span><br><span class="line"><span class="comment">#DPI≥ 300的图片有更好的识别效果</span></span><br><span class="line">img_org = cv2.imread(<span class="string">&#x27;R-C.png&#x27;</span>)</span><br><span class="line">h,w = img_org.shape[:<span class="number">2</span>]</span><br><span class="line">h,w = h*<span class="number">2</span>,w*<span class="number">2</span> <span class="comment">#按比例放大两倍</span></span><br><span class="line">img_l = cv2.resize(img_org,(w,h))</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(cv2.cvtColor(img_org,cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(cv2.cvtColor(img_l,cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#2. 图像灰度化，通过cvtColor灰度化图像</span></span><br><span class="line">img_org = cv2.imread(<span class="string">&#x27;R-C.png&#x27;</span>)</span><br><span class="line">img_gray = cv2.cvtColor(img_org,cv2.COLOR_BGR2GRAY) <span class="comment"># 灰度化</span></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(cv2.cvtColor(img_org,cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(cv2.cvtColor(img_org,cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#3.图像二值化</span></span><br><span class="line"><span class="comment">#二值化将图片转换为黑白图像，二值化可以通过cv2.threshold()方法，该方法会返回两个参数，第一个为阈值，第二个为转化后的图像</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">cv2.threshold(src,thresh,maxval,type,dst=None)</span></span><br><span class="line"><span class="string">其中thresh为阈值，maxval为高于阈值的处理，dst为二值化处理方法选择的参数。</span></span><br><span class="line"><span class="string">dst指定的不同在于处理逻辑的不同。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">img_org = cv2.imread(<span class="string">&#x27;R-C.png&#x27;</span>)</span><br><span class="line">img_gray = cv2.cvtColor(img_org,cv2.COLOR_BGR2GRAY) <span class="comment"># 灰度化</span></span><br><span class="line"><span class="comment"># 像素点高于127的设置为255，不高于127的设置为0</span></span><br><span class="line">_,img_bin = cv2.threshold(img_gray,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_BINARY)<span class="comment">#二值化</span></span><br><span class="line">plt.subplot(<span class="number">131</span>),plt.imshow(cv2.cvtColor(img_org,cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">132</span>),plt.imshow(cv2.cvtColor(img_gray,cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.subplot(<span class="number">133</span>),plt.imshow(cv2.cvtColor(img_bin,cv2.COLOR_BGR2RGB))</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#4.去除边框,当存在边框的时候去除,</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clearBorder</span>(<span class="params">img</span>):</span></span><br><span class="line">    h,w = img.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,w):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,h):</span><br><span class="line">            <span class="keyword">if</span>(y&lt;<span class="number">2</span> <span class="keyword">or</span> y&gt;w-<span class="number">2</span>):</span><br><span class="line">                img[x,y] = <span class="number">255</span></span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">2</span> <span class="keyword">or</span> x &gt;h-<span class="number">2</span>:</span><br><span class="line">                img[x,y] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 降噪</span></span><br><span class="line"><span class="comment"># 噪声是图像中亮度或颜色的随机变化，降低噪声有利于准确率的提升，噪声去除的方法有很多</span></span><br><span class="line"><span class="comment"># 这里以线降噪为例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interfaceLine</span>(<span class="params">img</span>):</span></span><br><span class="line">    h,w = img.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,w-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,h-<span class="number">1</span>):</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">all</span>(img[x,y-<span class="number">1</span>])&gt;<span class="number">245</span>:</span><br><span class="line">                count = count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">all</span>(img[x,y+<span class="number">1</span>])&gt;<span class="number">245</span>:</span><br><span class="line">                count = count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">all</span>(img[x-<span class="number">1</span>],y)&gt;<span class="number">245</span>:</span><br><span class="line">                count = count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">all</span>(img[x+<span class="number">1</span>],y)&gt;<span class="number">245</span>:</span><br><span class="line">                count = count+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">2</span> :</span><br><span class="line">                img[x,y] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure></p><p>通过tesseract-ocr进行识别，需要下载tesseract-oct,并且下载两个包。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pytesseract</span><br><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><br>示例代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pyteFunction</span>():</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.PNG&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置tesseract的安装路径,这里设置你下载的tesseract-ocr的安装路径</span></span><br><span class="line">    pytesseract.pytesseract.tesseract_cmd = <span class="string">r&#x27;C:\Program Files (x86)\Tesseract-OCR\tesseract.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">    code = pytesseract.pytesseract.image_to_string(image)</span><br><span class="line">    <span class="built_in">print</span>(code)</span><br></pre></td></tr></table></figure></p><p>通过百度API调用文字识别服务。可以访问<a href="https://ai.baidu.com/">https://ai.baidu.com/</a>，然后搜索文字识别，创建一个文字识别应用，创建成功后，根据提供的APP_KEY和Secret_Key即可调用API，获取到服务。示例代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过调用百度API进行验证码的识别</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identify_Verification_code</span>(<span class="params">API_Key, Secret_Key, Verification_code</span>):</span></span><br><span class="line"></span><br><span class="line">    host = <span class="string">&#x27;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=&#x27;</span> + API_Key + <span class="string">&#x27;&amp;client_secret=&#x27;</span> + Secret_Key</span><br><span class="line">    response = requests.get(host)</span><br><span class="line">    access_token = response.json()[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    request_url = <span class="string">&quot;https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic&quot;</span></span><br><span class="line">    <span class="comment"># 二进制方式打开图片文件,Verification_code是要识别的验证码的名字</span></span><br><span class="line">    f = <span class="built_in">open</span>(Verification_code, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    img = base64.b64encode(f.read())</span><br><span class="line"></span><br><span class="line">    params = &#123;<span class="string">&quot;image&quot;</span>: img&#125;</span><br><span class="line">    access_token = access_token</span><br><span class="line">    request_url = request_url + <span class="string">&quot;?access_token=&quot;</span> + access_token</span><br><span class="line">    headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">    response = requests.post(request_url, data=params, headers=headers)</span><br><span class="line">    shibie_result = response.json()[<span class="string">&#x27;words_result&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;words&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(shibie_result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过调用百度提供的接口来进行识别验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baiduAPI</span>():</span></span><br><span class="line">    API_Key = <span class="string">&#x27;#&#x27;</span> <span class="comment">#应用的key</span></span><br><span class="line">    Secret_Key = <span class="string">&#x27;#&#x27;</span> <span class="comment">#应用的Secret_Key</span></span><br><span class="line">    Verification_code = <span class="string">&#x27;R-C.PNG&#x27;</span> <span class="comment">#图片地址</span></span><br><span class="line">    identify_Verification_code(API_Key, Secret_Key, Verification_code)</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>滑动验证码</p></blockquote></blockquote><p>滑动验证码涉及到图片拼接方面的知识。要想解决可以有以下思路，一是通过selenium模拟行为，解决滑动验证码，二是组建Cookie池绕过验证码。</p><p>通过selenium解决滑动验证码的流程：</p><blockquote><ol><li>获取图片（不带缺口的图片，带缺口的图片）</li><li>识别缺口位置（设置一个对比阈值，遍历两张图片，找出相同位置像素RGB差距，超过此阈值的像素点，此像素点的位置就是缺口的位置）</li><li>计算滑动距离</li><li>模拟运动</li></ol><blockquote><blockquote><p>www&gt;m&gt;wap</p></blockquote></blockquote></blockquote><p>www是PC浏览器看到的网站，m和wap是移动端，大部分智能手机用的是m站，少部分旧手机用的还是wap。一般wap爬取较为简单，我们可以通过修改User-Agent模拟不同终端发送出请求，请求不同的页面。<br>如何设置不同的User-Agent,我们可以在浏览器扩展选项中下载相关的User-Agent的应用。以Edge为例：<br>下载图中的扩展应用。<br><img src="/images/user-agent.PNG" alt="A33"><br>按照如下操作，选择需要模拟的浏览器，然后通过Verify User-Agent Setting可以查看User-Agent，以Iphone为例.<br><img src="/images/step.PNG" alt="A34"><br>获取到的请求头：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">13_2_3</span> like Mac OS X) AppleWebKit/<span class="number">605.1</span><span class="number">.15</span> (KHTML, like Gecko) Version/<span class="number">13.0</span><span class="number">.3</span> Mobile/<span class="number">15E148</span> Safari/<span class="number">604.1</span></span><br></pre></td></tr></table></figure></p><blockquote><blockquote><p>小结</p></blockquote></blockquote><p>对于网页爬取登录问题和验证码问题，需要对具体的网页进行分析，是通过API解析还是通过Cookie池登录，以及登录过程中的验证码破解问题。</p><h4 id="4-终端协议分析"><a href="#4-终端协议分析" class="headerlink" title="4.  终端协议分析"></a>4. <a id="four"></a> 终端协议分析</h4><p>一个应用不仅仅具有PC端而且还具有移动客户端。所以我们在进行爬虫开发的时候，不仅仅可以从PC端进行爬取，而且还可以从移动客户端进行爬取。我们可以借助User-Agent来伪装自己，进行数据的爬取。</p><blockquote><h3 id="1-PC端数据抓包分析"><a href="#1-PC端数据抓包分析" class="headerlink" title="1. PC端数据抓包分析"></a>1. PC端数据抓包分析</h3></blockquote><p>将爬虫伪装成PC客户端，可以对PC客户端进行抓包分析。PC抓包软件有Wireshark,Http Analyzer等。Wireshark擅长各类网络协议分析，比较重型。而Http Analizer更注重于对Http/Https协议的分析。Http Analizer可以针对某个进程进行抓包。</p><blockquote><blockquote><h4 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h4></blockquote></blockquote><p>Wireshark的使用方法很简单，只需要设置过滤规则进行监听即可。<br>简单的过滤规则，如指定监听的网址ip.addr == 121.40.103.238(这个地址是虾米音乐网地址，<a href="https://www.xiami.com/">https://www.xiami.com/</a>)。然后点击开始监听。<br>则Wireshark就会监听和121.40.103.238的数据。通过cmd，ping这个地址即可。</p><p><img src="/images/wireshark.PNG" alt="a41"></p><blockquote><blockquote><h4 id="http-Analyzer"><a href="#http-Analyzer" class="headerlink" title="http Analyzer"></a>http Analyzer</h4></blockquote></blockquote><p>http Analyzer的使用方法也很简单，点击开始监听即可。可以通过选择需要监听的进程进行监听。通过type可以选择需要过滤的数据类型。</p><p>通过抓包进行分析请求，进行数据爬取一般都是挺复杂的，涉及到逆向PC客户端软件和分析算法的能力。所以如果想要通过抓包进行爬取，需要了解相关技术进行爬取。</p><blockquote><h3 id="2-App抓包分析"><a href="#2-App抓包分析" class="headerlink" title="2. App抓包分析"></a>2. App抓包分析</h3></blockquote><p>移动端的抓包分析，以Android App为例。对Android应用抓包，通过下载安卓模拟器，将应用安装到模拟器中，然后进行抓包分析。</p><p>这里采用wireshake进行抓包分析，wireshake的过滤示例如下：</p><blockquote><p>过滤域名包含baidu.com的数据<br>http.host contains “baidu.com”<br>过滤指定ip地址<br>ip.addr == xxx.xxx.xxx.xxx</p></blockquote><p><img src="/images/wiresharke-1.PNG" alt="a44"><br><img src="/images/wiresharke-2.PNG" alt="a45"></p><h6 id="5-初窥Scrapy爬虫框架"><a href="#5-初窥Scrapy爬虫框架" class="headerlink" title="5. 初窥Scrapy爬虫框架"></a>5.<a id="five"></a> 初窥Scrapy爬虫框架</h6><p>Scrapy爬虫框架操作简单，是比较流行的爬虫解决方案，所以在这里对Scrapy进行学习。<br>Scraoy使用Twisted这个异步网络来处理网络通信，并且包含了各种中间件接口，可以灵活的完成各种需求。</p><blockquote><h4 id="1-Scrapy各大组件"><a href="#1-Scrapy各大组件" class="headerlink" title="1. Scrapy各大组件"></a>1. Scrapy各大组件</h4></blockquote><p>Scrapy的各个组件其实和之前学过的简单爬虫的各个模块相类似。</p><blockquote><blockquote><ol><li>Scrapy 引擎(Engine)</li></ol></blockquote></blockquote><p>Scrapy引擎负责控制数据流在系统的所有组件中流动，并在相应动作发生时触发事件。<br>这类似于爬虫调度器的作用。</p><blockquote><blockquote><ol><li>Scrapy 调度器(Scheduler)</li></ol></blockquote></blockquote><p>Scrapy调度器从引擎接收Request并将它们入队，以便之后引擎请求request时提供给引擎。这类似于URL管理器的作用。</p><blockquote><blockquote><ol><li>Scrapy 下载器(Downloader)</li></ol></blockquote></blockquote><p>Scrapy下载器负责获取页面数据并提供给引擎，而后提供给Spider。这类似于html下载器作用。</p><blockquote><blockquote><ol><li>Spider</li></ol></blockquote></blockquote><p>Spider是Scrapy用户编写用于分析Response并提取Item(即获取到的Item)或额外跟进的URL的类。每个Spider负责处理一个特定(或一些)网站。类似于html解析器作用。</p><blockquote><blockquote><ol><li>Item Pipeline</li></ol></blockquote></blockquote><p>Item Pipeline负责处理被Spider提取出来的Item。典型的处理有清理验证及持久化(例如存储到数据库中)。类似于数据存储器的作用。</p><blockquote><blockquote><ol><li>Downloader middlewares（下载器中间件）</li></ol></blockquote></blockquote><p>下载器中间件是在引擎及下载器之间的特定钩子(specific hook),处理Downloader传递给引擎的Response.<br>其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</p><blockquote><blockquote><ol><li>Scrapy中间件(Spider middlewares)</li></ol></blockquote></blockquote><p>Scrapy中间件是在引擎及Spider之间的特定钩子(specific hook),处理Spider的输入(response)和<br>输出(Items及requests)。其提供了一个渐变的机制，通过插入自定义代码来扩展Scrapy功能。</p><p><img src="/images/Scrapy.PNG" alt="a58"></p><p><img src="/public/images/Spyder流程.PNG" alt="a59"></p><blockquote><h4 id="2-Scrapy的安装"><a href="#2-Scrapy的安装" class="headerlink" title="2. Scrapy的安装"></a>2. Scrapy的安装</h4></blockquote><p>这里介绍一下Windows下如何安装Scrapy(Python 3.7版本)。<br>如果不是Python3.7版本的，需要下载对应的Pywin32。</p><blockquote><h4 id="1-Pywin32下载"><a href="#1-Pywin32下载" class="headerlink" title="1. Pywin32下载"></a>1. Pywin32下载</h4></blockquote><p><a href="https://github.com/mhammond/pywin32/">下载地址</a></p><p>各个Pywin32的版本如图所示：<br><img src="/images/pywin32.PNG" alt="a58"></p><p>找到3.7版本，64位的安装包。<br><img src="/images/pywin32-1.PNG" alt="a59"></p><p>运行安装包后，通过命令行测试，如果没报错，则安装成功。<br><img src="/images/pywin32-2.PNG" alt="a590"></p><p>安装成功后，需要通过pip下载pywin32，或者直接通过pycharm安装pywin32<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pywin32</span><br></pre></td></tr></table></figure></p><blockquote><h4 id="2-pyOpenSSL下载"><a href="#2-pyOpenSSL下载" class="headerlink" title="2. pyOpenSSL下载"></a>2. pyOpenSSL下载</h4></blockquote><p><a href="https://github.com/pyca/pyopenssl">下载地址</a> , 或者通过pycharm下载 pyOpenSSL,或者通过 pip install pyOpenSSL</p><blockquote><h4 id="3-lxml下载"><a href="#3-lxml下载" class="headerlink" title="3. lxml下载"></a>3. lxml下载</h4></blockquote><p>通过pycharm下载，或者pip install lxml</p><blockquote><h4 id="4-Scrapy下载"><a href="#4-Scrapy下载" class="headerlink" title="4. Scrapy下载"></a>4. Scrapy下载</h4></blockquote><p>通过pycahrm下载，或者通过pip install Scrapy</p><p>如果要查看是否安装成功，通过pip list命令可以查看已经安装的库。</p><blockquote><h4 id="3-Scrapy应用"><a href="#3-Scrapy应用" class="headerlink" title="3. Scrapy应用"></a>3. Scrapy应用</h4><blockquote><ol><li>创建一个新的Scrapy项目</li></ol></blockquote></blockquote><p>命令行切换到指定文件夹，运行命令 scrapy startproject xxxx ,即可创建名为xxxx的项目。</p><p><img src="/images/scrapy-4.PNG" alt="a533"></p><p>如果出现”ImportError: DLL load failed: 找不到指定的程序”错误提示，或者出现python.exe无法找到入口….pythoncom37.dll。</p><p>首先下载：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: DLL load failed: 找不到指定的程序</span><br></pre></td></tr></table></figure></p><p>然后在电脑搜索pythoncom37.dll。观察无法找到入口的路径，一般都是在C盘的System32下，然后将搜索到的pythoncom37.dll所在的文件夹的内容(选择lib目录下的pywin32下的pythoncom37.dll文件夹里面的两个dll文件放到system32下)，复制到System32下，覆盖即可。</p><p><img src="/images/scrapy-7.PNG" alt="a554"></p><p>创建成功后的目录结构如图所示：</p><p><img src="/images/scrapy目录结构.PNG" alt="a556"></p><blockquote><blockquote><blockquote><h4 id="1-创建爬虫模块"><a href="#1-创建爬虫模块" class="headerlink" title="1. 创建爬虫模块"></a>1. 创建爬虫模块</h4></blockquote></blockquote></blockquote><p>爬虫模块都放置于spiders文件夹中。爬虫模块用于从单个网站或多个网站爬取数据的类。包含初始页面的URL，网页链接，分析网页内容，提取数据。<br>需要创建一个Spider类，继承scrapy.Spider类。<br>需要定义下面三个属性：<br>name:区别Spider，名字必须唯一。<br>start_urls:Spider启动时进行爬取的入口URL列表。<br>parse():Spider的一个方法，被调用时，负责解析返回数据，提取数据。</p><p>启动爬虫模块：通过命令行，切换到项目根目录下，运行<br>scrapy crawl xxxx , 其中xxxx为Spider类的name属性。</p><blockquote><blockquote><blockquote><h4 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h4></blockquote></blockquote></blockquote><p>Scrapy选择器构建于lxml库之上。也可也通过Beautifulsoup库解析。</p><p>Selector的用法：Selector对象有四个基本方法</p><blockquote><ol><li><p>xpath(query):传入XPath表达式query，返回该表达式所有节点的selector list列表</p></li><li><p>css(query):传入CSS表达式query，返回该表达式所对应的所有节点的selector list列表</p></li><li><p>extract():序列化该节点为Unicode字符串并返回list列表</p></li><li><p>re(regex):根据传入的正则表达式对数据进行提取，返回Unicode字符串列表。</p></li></ol></blockquote><p>在spider类中的parse方法中，传入的一个参数为response,通过Selector(response)<br>即可创建一个Selector对象。<br>示例代码如下所示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnblogsSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&quot;cnblogs&quot;</span> <span class="comment">#爬虫名称</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;cnblogs.com&quot;</span>] <span class="comment">#允许的域名</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">&quot;http://www.cnblogs.com/qiyeboy/default.html?page=1&quot;</span></span><br><span class="line">    ] <span class="comment"># Spider启动时进行爬取的入口URL列表。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#解析函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># #Selector使用</span></span><br><span class="line">        <span class="comment"># selector = Selector(response)</span></span><br><span class="line">        <span class="comment"># #调用xpath</span></span><br><span class="line">        <span class="comment"># selector.xpath()</span></span><br><span class="line">        <span class="comment"># #调用css</span></span><br><span class="line">        <span class="comment"># selector.css()</span></span><br><span class="line">        <span class="comment"># #调用re</span></span><br><span class="line">        <span class="comment"># selector.re()</span></span><br><span class="line">        <span class="comment"># #调用extract</span></span><br><span class="line">        <span class="comment"># selector.extract()</span></span><br><span class="line"></span><br><span class="line">        papers = response.xpath(<span class="string">&quot;.//*[@class=&#x27;day&#x27;]&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> paper <span class="keyword">in</span> papers:</span><br><span class="line">            url = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/@href&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            title = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            time = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;dayTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            content = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(url,title,time,content)</span><br></pre></td></tr></table></figure></p><blockquote><blockquote><blockquote><h4 id="3-命令行工具"><a href="#3-命令行工具" class="headerlink" title="3. 命令行工具"></a>3. 命令行工具</h4></blockquote></blockquote></blockquote><p>这里介绍一下Scrapy命令行功能。</p><p>创建一个项目</p><blockquote><p>scrapy createproject xxxx<br>运行一个项目<br>scrapy crawl name（spider的name属性）<br>运行单个spider模块<br>scrapy runspider xxxx.py<br>列出当前项目所有Spider<br>scrapy list<br>快速创建spider模板<br>scrapy genspider -l<br>scrapy genspider -d basic<br>scrapy genspider -t basic example example.com<br>将项目部署到Scrapy服务<br>scrapy deploy</p><blockquote><blockquote><h4 id="4-定义Item"><a href="#4-定义Item" class="headerlink" title="4. 定义Item"></a>4. 定义Item</h4></blockquote></blockquote></blockquote><p>Item用于保存爬取到的数据，类似于字典类型，在之前的目录结构中，有个items.py文件用来定义存储数据的Item类。这个类需要继承scrapy.Item。示例代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnblogspiderItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like</span></span><br><span class="line">    <span class="comment"># 类似于字典类型，可以直接通过[]和get方法获取</span></span><br><span class="line">    url = scrapy.Field()</span><br><span class="line">    time = scrapy.Field()</span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    item = CnblogspiderItem(title=<span class="string">&#x27;爬虫&#x27;</span>,content=<span class="string">&#x27;爬虫开发&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(item[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(item.get(<span class="string">&#x27;title&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(item.keys())</span><br><span class="line">    <span class="built_in">print</span>(item.items())</span><br><span class="line">    item2 = CnblogspiderItem(item) <span class="comment">#Item复制</span></span><br><span class="line">    <span class="comment">#dict和item转化</span></span><br><span class="line">    dict_item = <span class="built_in">dict</span>(item)</span><br><span class="line">    <span class="built_in">print</span>(dict_item)</span><br><span class="line">    item = CnblogspiderItem(&#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;爬虫&#x27;</span>,<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;开发&#x27;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></p><p>我们可以在原有的Item基础之上，添加更过的字段用于扩展Item。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnblogspiderItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like</span></span><br><span class="line">    <span class="comment"># 类似于字典类型，可以直接通过[]和get方法获取</span></span><br><span class="line">    url = scrapy.Field()</span><br><span class="line">    time = scrapy.Field()</span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">newCnblogspiderItem</span>(<span class="params">CnblogspiderItem</span>):</span></span><br><span class="line">    body = scrapy.Field()</span><br><span class="line">    title = scrapy.Field(CnblogspiderItem.fields[<span class="string">&#x27;title&#x27;</span>],body=body)</span><br></pre></td></tr></table></figure><p>如果要实现翻页功能,将提取出来的URL，构建新的Request对象，并指定解析方法。：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解析函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    <span class="comment"># #Selector使用</span></span><br><span class="line">    <span class="comment"># selector = Selector(response)</span></span><br><span class="line">    <span class="comment"># #调用xpath</span></span><br><span class="line">    <span class="comment"># selector.xpath()</span></span><br><span class="line">    <span class="comment"># #调用css</span></span><br><span class="line">    <span class="comment"># selector.css()</span></span><br><span class="line">    <span class="comment"># #调用re</span></span><br><span class="line">    <span class="comment"># selector.re()</span></span><br><span class="line">    <span class="comment"># #调用extract</span></span><br><span class="line">    <span class="comment"># selector.extract()</span></span><br><span class="line"></span><br><span class="line">    papers = response.xpath(<span class="string">&quot;.//*[@class=&#x27;day&#x27;]&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> paper <span class="keyword">in</span> papers:</span><br><span class="line">        url = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/@href&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        title = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        time = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;dayTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        content = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        item = CnblogspiderItem(url=url,title=title,time=time,content=content)</span><br><span class="line">        <span class="keyword">yield</span> item <span class="comment">#将数据返回</span></span><br><span class="line">    next_page = Selector(response).re(<span class="string">u&#x27;&lt;a href=&quot;(\S*)&quot;&gt;下一页&lt;/a&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> next_page:</span><br><span class="line">        <span class="comment">#Request对象中的URL为请求链接，callback为回调方法，回调方法用于指定由</span></span><br><span class="line">        <span class="comment">#谁来解析此项Request请求的响应</span></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=next_page[<span class="number">0</span>],callback=self.parse)</span><br></pre></td></tr></table></figure></p><blockquote><blockquote><blockquote><h4 id="5-定义Item-Pipeline"><a href="#5-定义Item-Pipeline" class="headerlink" title="5. 定义Item Pipeline"></a>5. 定义Item Pipeline</h4></blockquote></blockquote></blockquote><p>通过Item Pipeline可以对数据进行持久化存储，通过Item Pipeline可以对Item进行处理。<br>Item Pipeline主要有如下几个作用：</p><ol><li>清理HTML数据</li><li>验证爬取数据的合法性，检查Item是否包含某些字段</li><li>查重并丢弃</li><li>将数据结果保存到文件或数据库中</li></ol><p>Item Pipeline组件是一个独立的Python类，必须实现proocess_item方法</p><blockquote><p>process_item(self,item,spider)<br>其中itme是被爬取的item，Spider对象代表着爬取该Item的Spider</p></blockquote><p>示例代码如下所示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnblogspiderPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">&#x27;parpers.json&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self,item,spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&#x27;title&#x27;</span>]:</span><br><span class="line">            <span class="comment">#将数据保存到文件中</span></span><br><span class="line">            line = json.dumps(<span class="built_in">dict</span>(item))+<span class="string">&quot;\n&quot;</span></span><br><span class="line">            self.file.write(line)</span><br><span class="line">            <span class="keyword">return</span> item </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#DropItem是异常类型，如果不存在就爆出异常，进行丢弃</span></span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">&quot;Missing title in %s&quot;</span>%item)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>编写好的Item Pipeline需要在settings.py(在目录结构中可以找到)中，将类添加到ITEM_PIPELINES变量中。<br>示例代码如下所示：其中的key就是Item Pipeline的类路径，value是自定义数字，当执行Item Pipeline时，按数字大小从低到高依次执行Item Pipeline。通常定义在0-1000范围内。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;spider.pipelines.SpiderPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><blockquote><blockquote><h4 id="6-定义Item-Pipeline内置数据存储"><a href="#6-定义Item-Pipeline内置数据存储" class="headerlink" title="6. 定义Item Pipeline内置数据存储"></a>6. 定义Item Pipeline内置数据存储</h4></blockquote></blockquote></blockquote><h4 id="内置文本格式下载方式"><a href="#内置文本格式下载方式" class="headerlink" title="内置文本格式下载方式"></a>内置文本格式下载方式</h4><p>Scrapy提供了一些简单的存储方式。生成一个带有爬取数据的输出文件(feed)。Scrapy的输出自带各种序列化格式。</p><blockquote><p>json<br>JsonItemExporter<br>JSON lines<br>JsonLinesItemExporter<br>CSV<br>CsvItemExporter<br>XML<br>XmlItemExporter<br>Pickle<br>PickleItemExporter<br>Marshal<br>MarshalItemExporter</p></blockquote><p>使用方法：通过命令行使用，例如scrapy crawl xxx -o xxx.csv</p><h4 id="内置图片和文件下载方式"><a href="#内置图片和文件下载方式" class="headerlink" title="内置图片和文件下载方式"></a>内置图片和文件下载方式</h4><p>Scrapy提供了可重用的Item Pipeline(MediaPipeline分为FilesPipeline和ImagesPipeline)，如果要使用ImagesPipeline需要下载pillow模块(pip install pillow)。这类Pipeline具有如下特性。</p><ol><li>避免重新下载最近下载过的数据</li><li>指定存储的位置和方式<br>对于ImagesPipeline还具有额外的特性：</li><li>将所有下载的图片转换为通用的格式(JPG)和模型(RGB)</li><li>缩略图生成</li><li>检测图像的宽/高，确保它们满足最小限制<br>对于要下载的Item会在内部保存一个内部对了，避免多次下载几个Item共享的同一个图片。</li></ol><p>对于FilesPipeline的工作流程：</p><ol><li>在一个爬虫里，抓取一个Item，将文件URL，放入file_urls组内。</li><li>Item从爬虫内返回，进入Item Pipeline</li><li>当Item进入FilesPipeline,file_urls组内的URL将被Scrapy的调度器和下载器安排下载。</li><li>当文件下载完后，另一个字段files将被更新到结构中。这个组将包含一个字典列表，其中包括下载文件的信息。信息包括：下载文件的信息比如下载路径，源抓取地址，图片校验码。如果下载失败，会记录下载错误信息。</li></ol><p>对于ImagesPipeline的工作流程：</p><ol><li>从一个爬虫中，抓取一个Item，把图片的URL放图images_url组内。</li><li>项目从爬虫内返回，进入Item Pieline</li><li>当Item进入ImagesPipelin,images_urls组内的URL将被Scrapy的调度器和下载器安排下载。</li><li>当文件下载完成之后，另一个字段(images)将别更新到结构中。信息包括：下载图片的信息比如下载路径，源抓取地址，图片校验码。如果下载失败，会记录下载错误信息。</li></ol><h4 id="使用FilesPipeline"><a href="#使用FilesPipeline" class="headerlink" title="使用FilesPipeline:"></a>使用FilesPipeline:</h4><blockquote><ol><li>在settings.py文件的ITEM_PIPELINES添加一条’scrapy.pipelines.files.FilesPipeline’:1</li><li>在item添加两个字段，比如</li></ol></blockquote><p>file_urls = scrapy.Filed()<br>files = scrapy.Filed()</p><blockquote><ol><li>在settings.py中添加下载路径FILES_STORE，文件url所在的itme字段FILE_URLS_FILED，和文件信息所在item字段FILES_RESULT_FIELD。例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FILES_STORE = <span class="string">&#x27;G:\\python&#x27;</span></span><br><span class="line">FILES_URLS_FIELD = <span class="string">&#x27;file_urls&#x27;</span></span><br><span class="line">FILES_RESULT_FIELD = <span class="string">&#x27;files&#x27;</span></span><br><span class="line">FILES_EXPIRES = <span class="number">30</span> <span class="comment"># 设置文件过期时间(天)</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="使用ImagesPipeline"><a href="#使用ImagesPipeline" class="headerlink" title="使用ImagesPipeline:"></a>使用ImagesPipeline:</h4><blockquote><ol><li>在settings.py文件的ITEM_PIPELINES添加一条’scrapy.pipelines.files.ImagesPipeline’:1</li><li>在item添加两个字段，比如<br>image_urls = scrapy.Filed()<br>images = scrapy.Filed()</li><li>在settings.py中添加下载路径IMAGES_STORE，文件url所在的itme字段IMAGES_URLS_FILED，和文件信息所在item字段IMAGES_RESULT_FIELD。IMAGES_THUMBS制作缩略图，并设置图片大小和尺寸。如果需要过滤特别小的图片可以使用IMAGES_MIN_HEIGHT和IMAGES_MIN_WIDTH来设置图片的最小高和宽。例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IMAGES_STORE = <span class="string">&#x27;G:\\python&#x27;</span></span><br><span class="line">IMAGES_URLS_FIELD = <span class="string">&#x27;file_urls&#x27;</span></span><br><span class="line">IMAGES_RESULT_FIELD = <span class="string">&#x27;files&#x27;</span></span><br><span class="line">IMAGES_THUMBS = &#123;</span><br><span class="line">    <span class="string">&#x27;small&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">    <span class="string">&#x27;big&#x27;</span>:(<span class="number">270</span>,<span class="number">270</span>)</span><br><span class="line">&#125;</span><br><span class="line">IMAGES_EXPIRES = <span class="number">30</span> <span class="comment"># 设置文件过期时间(天)</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p>在之前的示例基础上，在setting.py设置如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;spider.pipelines.CnblogspiderPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">   <span class="string">&#x27;scrapy.pipelines.images.ImagesPipeline&#x27;</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">IMAGES_STORE = <span class="string">&#x27;G:\\python\spider\spider&#x27;</span></span><br><span class="line">IMAGES_URLS_FIELD = <span class="string">&#x27;cimage_urls&#x27;</span></span><br><span class="line">IMAGES_RESULT_FIELE = <span class="string">&#x27;cimages&#x27;</span></span><br><span class="line">IMAGES_EXPIRES = <span class="number">30</span></span><br><span class="line">IMAGES_THUMBS = &#123;</span><br><span class="line">   <span class="string">&#x27;small&#x27;</span>:(<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">   <span class="string">&#x27;big&#x27;</span>:(<span class="number">270</span>,<span class="number">270</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后在CnblogspiderItem添加两个字段cimage_urls和cimages。<br>修改spider代码，用于下载图片<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def parse(self,response):</span><br><span class="line">       papers = response.xpath(&quot;.//*[@class=&#x27;day&#x27;]&quot;)</span><br><span class="line">       for paper in papers:</span><br><span class="line">           url = paper.xpath(&quot;.//*[@class=&#x27;postTitle&#x27;]/a/@href&quot;).extract()[0]</span><br><span class="line">           title = paper.xpath(&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;).extract()[0]</span><br><span class="line">           time = paper.xpath(&quot;.//*[@class=&#x27;dayTitle&#x27;]/a/text()&quot;).extract()[0]</span><br><span class="line">           content = paper.xpath(&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;).extract()[0]</span><br><span class="line">           item = CnblogspiderItem(url=url,title=title,time=time,content=content)</span><br><span class="line">           request = scrapy.Request(url=url,callback=self.parse_body) #调用Request方法，并设置解析函数</span><br><span class="line">           request.meta[&#x27;item&#x27;] = item #将item暂存</span><br><span class="line">           yield request</span><br><span class="line">       next_page = Selector(response).re(u&#x27;&lt;a href=&quot;(\S*)&quot;&gt;下一页&lt;/a&gt;&#x27;)</span><br><span class="line">       if next_page:</span><br><span class="line">           #Request对象中的URL为请求链接，callback为回调方法，回调方法用于指定由</span><br><span class="line">           #谁来解析此项Request请求的响应</span><br><span class="line">           yield scrapy.Request(url=next_page[0],callback=self.parse)</span><br><span class="line"></span><br><span class="line">   def parse_body(self,response):</span><br><span class="line">       item = response.meta[&#x27;item&#x27;]</span><br><span class="line">       body = response.xpath(&quot;.//*[@class=&#x27;postBody&#x27;]&quot;)</span><br><span class="line">       item[&#x27;cimage_urls&#x27;] = body.xpath(&#x27;.//img//@src&#x27;).extract()# 提取图片链接</span><br><span class="line">       yield item</span><br></pre></td></tr></table></figure></p><p>这里容易看出ImagePipeline的执行流程，首先是将图片url放入到image_urls中，然后由Scrapy下载，最后保存到指定的路径。</p><h4 id="自定义FilesPipline和ImagesPipeline"><a href="#自定义FilesPipline和ImagesPipeline" class="headerlink" title="自定义FilesPipline和ImagesPipeline"></a>自定义FilesPipline和ImagesPipeline</h4><p>如果要自定义FilesPipline和ImagesPipeline则需要继承FilesPipeline或者ImagesPipeline，重写<br>get_media_requests和item_completed()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在工作流程中，管道会得到图片的URL并从项目中下载。需要重写get_media_requests方法.并对各个图片URL返回一个Request。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_meida_requests</span>(<span class="params">self,item,info</span>):</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">MyImagesPipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 管道通过get_media_requests接收到图片的URL并从项目中进行下载</span></span><br><span class="line">    <span class="comment"># get_media_request会返回图片URL对应的Request</span></span><br><span class="line">    <span class="comment"># 对于返回的结果results会以二元素的元组列表形式传送到item_completed方法</span></span><br><span class="line">    <span class="comment"># 返回格式</span></span><br><span class="line">    <span class="comment"># success: 布尔值，成功返回True，是啊比返回False</span></span><br><span class="line">    <span class="comment"># url:图片下载的url</span></span><br><span class="line">    <span class="comment"># path:图片存储路径</span></span><br><span class="line">    <span class="comment"># checksum:图片内容的MD5 hash</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">        <span class="keyword">for</span> image_url <span class="keyword">in</span> item[<span class="string">&#x27;image_urls&#x27;</span>]:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(image_url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当所有图片请求完成时，item_completed方法将被调用</span></span><br><span class="line">    <span class="comment"># results是get_media_requests下载完成之后的结果。</span></span><br><span class="line">    <span class="comment"># item_completed需要返回一个输出。这个输出会被送到随后的ItemPipelines(在Scrapy中，item的执行顺序会根据id大小依次调用)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_completed</span>(<span class="params">self, results, item, info</span>):</span></span><br><span class="line">        image_paths = [x[<span class="string">&#x27;path&#x27;</span>] <span class="keyword">for</span> ok,x <span class="keyword">in</span> results <span class="keyword">if</span> ok]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> image_paths:</span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">&quot;Item contains no images&quot;</span>) <span class="comment">#丢弃项目DropItem</span></span><br><span class="line">        item[<span class="string">&#x27;image_paths&#x27;</span>] = image_paths </span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><h4 id="7-启动爬虫"><a href="#7-启动爬虫" class="headerlink" title="7. 启动爬虫"></a>7. 启动爬虫</h4></blockquote></blockquote><ol><li>命令行方式<br>scrapy crawl spider_name </li><li>使用CrawlProcess类<br>CrawlProcess类内部会开启Twisted reactor，配置log,设置Twisted reactor自动关闭。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#初始化CrawlerProcess参数</span></span><br><span class="line">    procerss = CrawlerProcess(&#123;</span><br><span class="line">        <span class="string">&#x27;USER-AGENT&#x27;</span>:<span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0 ; Windows NT 5.1)&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    procerss.crawl(CnblogsSpider) <span class="comment">#运行爬虫</span></span><br><span class="line">    procerss.start()</span><br></pre></td></tr></table></figure><p>带启动参数的CrawlProcess类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">procerss = CrawlerProcess(get_project_settings())</span><br><span class="line">procerss.crawl(CnblogsSpider)  <span class="comment"># 运行爬虫</span></span><br><span class="line">procerss.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><blockquote><ol><li>使用CrawlerRunner</li></ol></blockquote><p>CrawlerRunner：在spider结束后，必须自行关闭Twisted reactor 需要在CrawlerRunner.crawl所返回的对象中添加回调函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configure_logging(&#123;<span class="string">&#x27;LOG_FORMAT&#x27;</span>:<span class="string">&#x27;%(levelname)s：%(message)s&#x27;</span>&#125;)</span><br><span class="line">  runner = CrawlerRunner()</span><br><span class="line">  d = runner.crawl(CnblogsSpider)</span><br><span class="line">  d.addBoth(<span class="keyword">lambda</span> _:reactor.stop())</span><br><span class="line">  reactor.run()</span><br></pre></td></tr></table></figure></p><blockquote><blockquote><blockquote><h4 id="8-强化爬虫"><a href="#8-强化爬虫" class="headerlink" title="8. 强化爬虫"></a>8. 强化爬虫</h4></blockquote></blockquote></blockquote><p>这里主要是介绍关于Scrapy的调试方法和异常，控制运行状态等内容。</p><blockquote><h5 id="1-调试方法"><a href="#1-调试方法" class="headerlink" title="1. 调试方法"></a>1. 调试方法</h5></blockquote><h4 id="Parse命令"><a href="#Parse命令" class="headerlink" title="Parse命令"></a>Parse命令</h4><p>检查Spider输出的最基本方法(Parse命令)，可以在函数层上检查spider各个部分的效果。<br>使用方法为scrapy parse —spider==spider_name -c parse -d 2<item_url><br>例如 scrapy parse —spider==cblogs -c parse -d”<a href="https://www.baidu.com">https://www.baidu.com</a>“</p><h4 id="Scrapy-shell"><a href="#Scrapy-shell" class="headerlink" title="Scrapy shell"></a>Scrapy shell</h4><p>通过Scrapy shell 可以查看spider某个位置中被处理的response，以确定期望的response是否到达特定位置。<br>在spider类中，添加scrapy.shell.inspect_response方法。当程序运行到inspect_response方法时，会暂停，并切换进shell中，方便进行调试。如果要退出终端可以ctrl+d进行退出。代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self,response</span>):</span></span><br><span class="line">       papers = response.xpath(<span class="string">&quot;.//*[@class=&#x27;day&#x27;]&quot;</span>)</span><br><span class="line">       <span class="comment">#添加scrapy shell</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">from</span> scrapy.shell <span class="keyword">import</span> inspect_response</span><br><span class="line">       inspect_response(response,self)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> paper <span class="keyword">in</span> papers:</span><br><span class="line">           url = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/@href&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">           title = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">           time = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;dayTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">           content = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">           item = CnblogspiderItem(url=url,title=title,time=time,content=content)</span><br><span class="line">           request = scrapy.Request(url=url,callback=self.parse_body) <span class="comment">#调用Request方法，并设置解析函数</span></span><br><span class="line">           request.meta[<span class="string">&#x27;item&#x27;</span>] = item <span class="comment">#将item暂存</span></span><br><span class="line">           <span class="keyword">yield</span> request</span><br><span class="line">       next_page = Selector(response).re(<span class="string">u&#x27;&lt;a href=&quot;(\S*)&quot;&gt;下一页&lt;/a&gt;&#x27;</span>)</span><br><span class="line">       <span class="keyword">if</span> next_page:</span><br><span class="line">           <span class="comment">#Request对象中的URL为请求链接，callback为回调方法，回调方法用于指定由</span></span><br><span class="line">           <span class="comment">#谁来解析此项Request请求的响应</span></span><br><span class="line">           <span class="keyword">yield</span> scrapy.Request(url=next_page[<span class="number">0</span>],callback=self.parse)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">parse_body</span>(<span class="params">self,response</span>):</span></span><br><span class="line">       item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">       body = response.xpath(<span class="string">&quot;.//*[@class=&#x27;postBody&#x27;]&quot;</span>)</span><br><span class="line">       item[<span class="string">&#x27;cimage_urls&#x27;</span>] = body.xpath(<span class="string">&#x27;.//img//@src&#x27;</span>).extract()<span class="comment"># 提取图片链接</span></span><br><span class="line">       <span class="keyword">yield</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="loggin"><a href="#loggin" class="headerlink" title="loggin"></a>loggin</h4><p>通过运行后的记录查看爬虫的运行状态</p><h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><p>借助编译器提供的Debug进行断点调试，查看程序运行情况。</p><blockquote><h5 id="2-异常"><a href="#2-异常" class="headerlink" title="2. 异常"></a>2. 异常</h5></blockquote><p>之前已经使用过以恶异常也就是抛弃Item,DropItem。下图是关于Scrapy异常的介绍。<br><img src="/images/scrapy-e1.PNG" alt="566"></p><p><img src="/images/scrapy-e2.PNG" alt="567"></p><blockquote><h5 id="3-控制运行状态"><a href="#3-控制运行状态" class="headerlink" title="3. 控制运行状态"></a>3. 控制运行状态</h5></blockquote><p>通过telnet访问Scrapy终端。<br>talnet localhost 6023<br>进入终端后，通过est()可以查看scrapy运行情况。<br>通过engine/pause()暂停运行，通过engine.unpause()继续运行。<br>通过engine.stop()停止运行。<br>配置telnet，在setting.py中配置IP和端口。<br>TELNETCONSOLE_PORT:6023 #设置为0或者None动态分配端口。<br>TELNETCONSOLE_HOST:’127.0.0.1’ #y也就是本地地址ip</p><h6 id="6-深入Scrapy爬虫框架"><a href="#6-深入Scrapy爬虫框架" class="headerlink" title="6. 深入Scrapy爬虫框架"></a>6.<a id="six"></a> 深入Scrapy爬虫框架</h6><blockquote><h4 id="1-Spider模块"><a href="#1-Spider模块" class="headerlink" title="1.Spider模块"></a>1.Spider模块</h4></blockquote><p>Spider模块是定义爬虫的动作及分析网页结构的地方，我们容易看出，在这里给出了解析网页获取元素，并进行是否继续爬取下一个网页的操作(也就是爬虫的动作)。Spider的执行流程</p><blockquote><ol><li><p>从入口URL初始化Request并设置回调函数。这个Reuquest下载完毕返回Response，并作为参数传送给回调函数，Spider初始的Request是通过调用start_requests()方法获取。start_requests()读取start_urls中的URL，并以parse为回调函数生成Request。也就是说初始的URL，只需要在start_urls加入，系统会自动的获取response，并以parse()为解析函数。</p></li><li><p>在回调函数分析Response，返回Item对象，dict,ruquest或者一个包括三者的可迭代容器。其中返回的Request对象会经过Scrapy处理，下载相应内容，并调用设置相应的解析函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request = scrapy.Request(url=url,callback=self.parse_body) <span class="comment">#调用Request方法，并设置解析函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在解析函数内，可以使用页面解析技术，对页面元素进行解析，可以用BeautifuleSoup等等技术。通过response可以获取到响应的内容。将分析的数据生成item</p></li><li><p>由spider返回item,可以经过Item Pipeline被存到数据库或使用Feed exports存入到文件中。</p></li></ol></blockquote><h5 id="Spider类的成员变量"><a href="#Spider类的成员变量" class="headerlink" title="Spider类的成员变量"></a>Spider类的成员变量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> @:param name 定义spider名字的字符串，名字必须唯一。可以生成多个相同的spider实例</span></span><br><span class="line"><span class="string"> 通常可以用网站域名命名spider</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> @:param allowed_domains: 包含了spder允许爬取的域名列表。</span></span><br><span class="line"><span class="string"> 当OffsiteMiddleware组件启用时，域名不在列表中的URL不会被跟进。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> @:param statr_urls:URL列表，当没有配置statr_requests9）f方法的时候，spider会从该列表开始进行爬取。也就是说爬虫开始爬取的</span></span><br><span class="line"><span class="string"> URL就是从start_urls中获取。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> @:param custom_setting：该设置是一个dict,当启动spider时，该设置将会覆盖项目级的设置。也就是</span></span><br><span class="line"><span class="string"> 说可以在这里对spider单独定义。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> @:param crawler 该属性在初始化class后，由类方法from_crawler()设置。并且链接了</span></span><br><span class="line"><span class="string"> 本spider实例羽Crawler对象。</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br><span class="line"> name = <span class="string">&#x27;myspider&#x27;</span></span><br><span class="line"> allowed_domains = [<span class="string">&quot;www.baidu.com&quot;</span>]</span><br><span class="line"> start_urls = [</span><br><span class="line">     <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"> ]</span><br><span class="line"> custom_settings = &#123;&#125;</span><br><span class="line"> crawler = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Spider类的方法"><a href="#Spider类的方法" class="headerlink" title="Spider类的方法"></a>Spider类的方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用的Spider方法</span></span><br><span class="line"><span class="comment"># 该方法必须返回一个可迭代对象，对象包含spider用于爬虫的第一个request。</span></span><br><span class="line"><span class="comment"># 也就是说 start_requests是项目启动的开始，是根据start_url作为项目启动URL</span></span><br><span class="line"><span class="comment"># 如果没有设置start_requests方法，就会默认从start_urls的url生成Request。</span></span><br><span class="line"><span class="comment"># 如果需要定制最初爬取的Request对象，可以重写方法。</span></span><br><span class="line"><span class="comment"># 例如通过POST登录</span></span><br><span class="line"><span class="comment"># 总结来说：strt_request就是整个程序的入口，如果不指定就是直接从start_ruls中获取url，以parse()为回调函数进行解析。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [scrapy.FormRequest(<span class="string">&quot;http://www.example.com/login&quot;</span>,formdata=&#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;pass&#x27;</span>:<span class="string">&#x27;secret&#x27;</span></span><br><span class="line">    &#125;,callback=self.login)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_requests对url请求后的响应，会通过login进行处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self,response</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_requests_from_url</span>(<span class="params">self, url</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    接受一个URL并返回用于爬取的Request对象</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用于解析网页内容，一般作为初始URL解析的回调函数</span></span><br><span class="line"><span class="string">    :param response:</span></span><br><span class="line"><span class="string">    :param kwargs:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">spider, reason</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    当Spider关闭时，该函数被调用。可以用来在spider关闭时，释放占用的资源。</span></span><br><span class="line"><span class="string">    :param reason:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>Scrapy除了Spider类作为基类进行扩展，还提供了CrawlSpider，XMLFeedSpider,CSVFeedSpider和SitemapSpider等类来实现不同的爬虫任务。</p><h6 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h6><p>CrawlSpider类常用于爬取一般的网站。其中定义了一些规则(rule)来提供跟进链接功能。<br>CrawlSpider提供了新的属性rules。rules包含一个或多个Rule对象的集合。每个Rule对爬取网站的动作定义了特定的规则。如果多个Rule匹配相同的链接，则先定义的被调用。<br>CrawlSpider提供的初始URL解析方法，parse_start_url(response)。该方法返回一个Item对象或者一个Request对象或者包含二者的对象。使用示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCrawlSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;crawlSpider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;cnblogs.com&quot;</span>]<span class="comment">#域名</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">&quot;http://www.cnblogs.com/qiyeboy/default.html?page=1&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># Rule原型</span></span><br><span class="line">    <span class="comment"># scrapy.contrib.spiders.Rule(link_exactor,callback=None,cb_kwargs=None,</span></span><br><span class="line">    <span class="comment"># follow=None,process_links=None,process_request=None)</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=(<span class="string">&quot;/qiyeboy/default.html\?page=\d&#123;1,&#125;&quot;</span>,)),</span><br><span class="line">                    follow=<span class="literal">True</span>,</span><br><span class="line">                    callback=<span class="string">&#x27;parse_item&#x27;</span></span><br><span class="line">                           ),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># LinkExtractor对象的构造</span></span><br><span class="line">    <span class="comment"># allow: 用于匹配满足正则表达式的链接</span></span><br><span class="line">    <span class="comment"># deny: 排除正则表达式匹配的链接，优先级高于allow</span></span><br><span class="line">    <span class="comment"># allow_domains：允许的域名，可以是list或str</span></span><br><span class="line">    <span class="comment"># deny_domains:排除的域名</span></span><br><span class="line">    <span class="comment"># restrict_xpaths:提取满足Xpath选择条件的链接。</span></span><br><span class="line">    <span class="comment"># restrict_css:xxxCSSxxx的链接</span></span><br><span class="line">    <span class="comment"># tags: 提取指定标签下的链接。</span></span><br><span class="line">    <span class="comment"># unique:链接是否去重</span></span><br><span class="line">    <span class="comment"># process_value:值处理函数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response, **kwargs</span>):</span></span><br><span class="line">        papers = response.xpath(<span class="string">&quot;.//*[@class=&#x27;day&#x27;]&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> paper <span class="keyword">in</span> papers:</span><br><span class="line">            url = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/@href&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            title = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            time = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;dayTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            content = paper.xpath(<span class="string">&quot;.//*[@class=&#x27;postTitle&#x27;]/a/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item = MyCrawlSpider(url=url, title=title, time=time, content=content)</span><br><span class="line">            request = scrapy.Request(url=url, callback=self.parse_body)  <span class="comment"># 调用Request方法，并设置解析函数</span></span><br><span class="line">            request.meta[<span class="string">&#x27;item&#x27;</span>] = item  <span class="comment"># 将item暂存</span></span><br><span class="line">        <span class="keyword">yield</span> request</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_body</span>(<span class="params">self,response</span>):</span></span><br><span class="line">        item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">        body = response.xpath(<span class="string">&quot;.//*[@class=&#x27;postBody&#x27;]&quot;</span>)</span><br><span class="line">        item[<span class="string">&#x27;cimage_urls&#x27;</span>] = body.xpath(<span class="string">&#x27;.//img//@src&#x27;</span>).extract()<span class="comment"># 提取图片链接</span></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h6 id="XMLFeedSpider"><a href="#XMLFeedSpider" class="headerlink" title="XMLFeedSpider"></a>XMLFeedSpider</h6><p>XMLFeedSpider被设计用于通过迭代各个节点来分析XML源。迭代器可以从Iternodes,XML,HTML中选择。在XMLFeedSpider中，需要定义下列类属性来设置迭代器及标记名称。</p><ol><li>iterator</li></ol><p>用于确定使用哪个迭代器string,默认为iternodes，可选项有(1. iternodes, 2. html , 3. html)</p><ol><li><p>itertag</p><p>itertag为一个包含开始迭代的节点名string</p></li><li><p>namespaces</p><p> 称为命名空间，由(prefix,url),元组(tuple)所组成的list。这里定义了在文档中会被spider处理可用的namespace,prefix和url会被自动调用。由register_namespace()方法生成namespace。</p></li></ol><p>示例代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyXMLFeedSpider</span>(<span class="params">XMLFeedSpider</span>):</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&quot;myxmlfeed&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;cnblogs.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://feed.cnblogs.com/blog/u/269038/rss&quot;</span>]</span><br><span class="line">    namespaces = [&#123;<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;http://www.sitemaps.org/schemas/sitemap/0.9&#x27;</span>&#125;]</span><br><span class="line">    iterator = <span class="string">&#x27;html&#x27;</span> <span class="comment"># 用于定义解析方式</span></span><br><span class="line">    itertag = <span class="string">&#x27;entry&#x27;</span></span><br><span class="line">    <span class="comment">#XMLFeedSpider方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adapt_response</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        这个方法在页面解析前和页面下载后之间被调用。可以用于修改Response内容，并再返回。</span></span><br><span class="line"><span class="string">        :param response:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span>  response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_node</span>(<span class="params">self, response, selector</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            当节点符合itertag时，该方法被调用。接收到的response以及相对应的Selector作为参数传递给该方法。</span></span><br><span class="line"><span class="string">            需要返回一个Item对象或Request对象，或包含二者的可迭代对象</span></span><br><span class="line"><span class="string">        :param response:</span></span><br><span class="line"><span class="string">        :param selector:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(selector.xpath(<span class="string">&#x27;id/text()&#x27;</span>).extract()[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(selector.xpath(<span class="string">&#x27;title/text()&#x27;</span>).extract()[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(selector.xpath(<span class="string">&#x27;summary/text()&#x27;</span>).extract()[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_results</span>(<span class="params">self, response, results</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        在页面解析后，数据返回前进行处理。主要是对返回数据的最后处理。修改Item的内容</span></span><br><span class="line"><span class="string">        :param response:</span></span><br><span class="line"><span class="string">        :param results:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [response,results]</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h6 id="7-实战项目：Scrapy爬虫"><a href="#7-实战项目：Scrapy爬虫" class="headerlink" title="7. 实战项目：Scrapy爬虫"></a>7.<a id="seven"></a> 实战项目：Scrapy爬虫</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-数据存储&quot;&gt;&lt;a href=&quot;#1-数据存储&quot; class=&quot;headerlink&quot; title=&quot;1.数据存储&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#one&quot;&gt;1.数据存储&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;2-动态文件抓取&quot;&gt;&lt;a href=&quot;#2-动态文件抓取&quot; 
      
    
    </summary>
    
      <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://example.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫开发与项目实战-第二回合（实战）</title>
    <link href="http://example.com/wiki/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB2.1/"/>
    <id>http://example.com/wiki/爬虫/Python爬虫2.1/</id>
    <published>2021-11-18T08:35:25.519Z</published>
    <updated>2021-11-22T02:19:31.513Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫的原理十分简单，通过URL，获取网页资源，再根据网页资源进一步获取需要的信息数据。</p><p>我们很容易借助requests,beautifulSoup库等实现一个简答的爬虫。实际上，到了这基本上爬虫的大概就已经学习完毕了。对于我们现在编写的爬虫与大型爬虫的差距在于以下几点：</p><blockquote><ol><li>实现方式</li><li>优化方式</li><li>稳健性<br>我们现在仅仅只考虑功能的实现，所以还只是基础爬虫，要实现一个大型的爬虫还因该从效率，稳健性，结构化，维护等方面综合考虑。</li></ol></blockquote><p><img src="/images/基础爬虫.PNG" alt="a1"></p><p>一个爬虫的基础框架可以分为：爬虫调度器，URL管理器，HTML下载器，HTML解析器，数据存储器</p><ol><li><p>爬虫调度器  负责其他四个模块的协调工作</p></li><li><p>URL管理器主要负责URL链接，维护已经爬取的URL集合和未爬取的URL集合，提供互殴去新的URL链接的接口</p></li><li><p>HTML下载器用于从URL管理器中获取未爬取的URL链接并下载HTML页面</p></li><li><p>HTML解析器用于从HTML下载器中获取已经下载的HTML页面，并从中解析出新的URL链接交给URL管理器<br>解析出有效数据交给数据存储器。</p></li><li><p>数据存储器用于将HTML解析器解析出来的数据通过文件或数据库的形式存储起来。</p></li></ol><p>爬虫的动态流程如下所示：<br><img src="/images/爬虫时序图.PNG" alt="a2"></p><h6 id="百度百科词条爬取项目"><a href="#百度百科词条爬取项目" class="headerlink" title="百度百科词条爬取项目"></a>百度百科词条爬取项目</h6><blockquote><h3 id="URL管理器"><a href="#URL管理器" class="headerlink" title="URL管理器"></a>URL管理器</h3></blockquote><h6 id="简单分布式爬虫"><a href="#简单分布式爬虫" class="headerlink" title="简单分布式爬虫"></a>简单分布式爬虫</h6><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>这里实现简单的分布式爬虫，采用主从模式。目前大型的爬虫都采用分布式爬取，所以通过此次实践加深对分布式爬虫的理解。分布式需要考虑如何设计结构，保证各个节点稳定高效地运作。</p><h4 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h4><p>主从模式是指由一台主机作为控制节点，负责管理所有运行网络爬虫的主机，爬虫只需要从控制节点那里接收任务，并把新<br>生成任务提交给控制节点就可以了，在这个过程中不必与其它爬虫通信。</p><blockquote><ol><li>采用主从模式，实现简单，利于管理。而控制节点则需要与所有爬虫进行通信。</li><li>主从模式的缺陷在于，控制节点会成为整个系统的瓶颈，容易导致整个分布式网络爬虫系统性能下降。</li></ol></blockquote><p>主从模式的结构如下所示(以一台主机和两台从机为例)：控制节点（ControlNode）主要分为URL管理器，数据存储器和控制调度器。(1)控制调度器通过三个进程来协调URL管理器和数据存储器的工作：(2)一个是URL管理进程，负责URL的管理和将URL传递给爬虫节点；(3)一个是数据提取进程，负责读取爬虫节点返回的数据，将返回数据中的URL交给URL管理进程，将标题和摘要等数据交给数据存储进程；最后一个是数据存储进程，负责将数据提取进程中提交的数据进行本地存储。</p><p>对于爬虫节点(SpdierNode):包含爬虫调度器，HTML下载器，HTML解析器，主要负责对URL进行爬取，下载，然后将新的URL,data返回给控制节点(ControlNode)。<br>爬虫调度器的执行流程：</p><ol><li>爬虫调度器从控制节点中的url_q队列读取URL</li><li>爬虫调度器调用HTML下载器，HTML解析器获取网页中新的URL和标题摘要</li><li>爬虫调度器将新的URL和标题摘要传入result_q队列交给控制节点</li></ol><p><img src="/images/主从.PNG" alt="a21"><br><img src="/images/控制节点.PNG" alt="a22"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;爬虫的原理十分简单，通过URL，获取网页资源，再根据网页资源进一步获取需要的信息数据。&lt;/p&gt;
&lt;p&gt;我们很容易借助requests,beautifulSoup库等实现一个简答的爬虫。实际上，到了这基本上爬虫的大概就已经学习完毕了。对于我们现在编写的爬虫与大型爬虫的差距在于
      
    
    </summary>
    
      <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://example.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫开发与项目实战-第二回合</title>
    <link href="http://example.com/wiki/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E7%AC%AC%E4%BA%8C%E5%9B%9E%E5%90%88/"/>
    <id>http://example.com/wiki/爬虫/Python爬虫开发与项目实战-第二回合/</id>
    <published>2021-11-17T02:40:35.328Z</published>
    <updated>2021-11-17T08:30:36.279Z</updated>
    
    <content type="html"><![CDATA[<p>网络爬虫：是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。</p><p>网络爬虫可以分为：</p><blockquote><ol><li>通用网络爬虫</li></ol></blockquote><p>通过搜索引擎搜索关键词，然后从搜索引擎返回的数据中，爬取想要的数据。</p><blockquote><ol><li>聚焦网络爬虫</li></ol></blockquote><p>有针对性的爬取指定的网页链接。定向爬取相关页面。</p><blockquote><ol><li>增量式网络爬虫</li></ol></blockquote><p>也就是爬取新的数据，而对于之前爬取过的数据，不会再进行爬取。</p><blockquote><ol><li>深层网络爬虫</li></ol></blockquote><p>也就是爬取一些不能通过静态链接获取的，需要用户操作后才能访问获取的Web页面。</p><h6 id="网络爬虫结构"><a href="#网络爬虫结构" class="headerlink" title="网络爬虫结构"></a>网络爬虫结构</h6><p>爬虫的一般流程：</p><ol><li>需要爬取页面的URL</li><li>读取URL，获取到网页数据</li><li>从网页数据提取有用数据</li><li>抽取网页需要进一步爬取URL，进行再次爬取</li></ol><p><img src="/images/爬虫流程.PNG" alt="1.1"></p><h6 id="Request库"><a href="#Request库" class="headerlink" title="Request库"></a>Request库</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Python对HTTP请求的支持：通过urllib2和urllib或者通过request模块。</span></span><br><span class="line"><span class="string">一般通过request实现http请求。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    #发送get请求</span></span><br><span class="line"><span class="string">    r = requests.get(&#x27;&#x27;)</span></span><br><span class="line"><span class="string">    # 对于带有参数的url，可以通过建立一个map作为参数进行请求</span></span><br><span class="line"><span class="string">    payload = &#123;&#x27;keywords&#x27;:&#x27;blog:qiyeboy&#x27;,&#x27;pageindex&#x27;:1&#125;</span></span><br><span class="line"><span class="string">    r = requests.get(&#x27;&#x27;,params=payload) #通过map提供参数</span></span><br><span class="line"><span class="string">    #发送post请求</span></span><br><span class="line"><span class="string">    r = requests.post(&#x27;&#x27;)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#chardet是用于检测文本编码</span></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">requestTemp</span>():</span></span><br><span class="line">    r = requests.get(<span class="string">&#x27;www.baidu.com&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.content) <span class="comment"># 返回字节类型的数据</span></span><br><span class="line">    <span class="built_in">print</span>(r.text) <span class="comment"># 返回文本形式的html</span></span><br><span class="line">    <span class="built_in">print</span>(r.encoding) <span class="comment"># 返回网页编码格式</span></span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span> <span class="comment"># 可以自定义编码格式。然后再读取网页文本数据，这样就不会乱码</span></span><br><span class="line">    <span class="built_in">print</span>(r.text) <span class="comment"># 这是在utf-8编码下的文本数据</span></span><br><span class="line">    <span class="comment">#通过chardet进行解码</span></span><br><span class="line">    r.encoding = chardet.detect(r.content)[<span class="string">&#x27;encoding&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 我们可以对请求头headers进行处理,即对请求设置请求头,设置Cookie</span></span><br><span class="line">    <span class="comment">### 对于请求头，我们可以通过f12查看请求头格式</span></span><br><span class="line">    user_agent = <span class="string">&#x27;Mozilla/4.0&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:user_agent&#125; <span class="comment">#设置请求头</span></span><br><span class="line">    <span class="comment">#自定义Cookie</span></span><br><span class="line">    cookies = <span class="built_in">dict</span>(name=<span class="string">&#x27;qiye&#x27;</span>,age=<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    r = requests.get(<span class="string">&#x27;www.baidu.com&#x27;</span>,headers=headers,cookies=cookies)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取响应的Cookie值</span></span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> r.cookies.keys():</span><br><span class="line">        <span class="built_in">print</span>(r.cookies.get(cookie))</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 获取返回状态编码，判断请求是否成功</span></span><br><span class="line">    <span class="keyword">if</span> r.status_code == requests.codes.ok :</span><br><span class="line">        <span class="built_in">print</span>(r.status_code)</span><br><span class="line">        <span class="built_in">print</span>(r.headers.get(<span class="string">&#x27;content-type&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.raise_for_status() <span class="comment">#通过raise_for_status可以抛出一个异常。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###自动处理Cookie方法 , 通过session，每次都可以将Cookie值带上</span></span><br><span class="line">    s = requests.Session()</span><br><span class="line">    r = s.get(<span class="string">&quot;wwww.baidu.com&quot;</span>,allow_redirects=<span class="literal">True</span>)</span><br><span class="line">    datas = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;qiyi&#x27;</span>,<span class="string">&#x27;passwd&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 通过Session机制，可以保证每次都加上了cookie的值，进行请求</span></span><br><span class="line">    r = s.post(<span class="string">&#x27;wwww.baidu.com&#x27;</span>,data=datas,allow_redirects=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 通过allow_redirects可以设置是否允许重定向</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过r.history可以获取到历史信息，也就是访问成功之前的所有请求跳转信息</span></span><br><span class="line">    <span class="built_in">print</span>(r.history)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置超时参数，Timeout</span></span><br><span class="line">    r = requests.get(<span class="string">&#x27;www.baidu.com&#x27;</span>,timeout=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#代理设置，使用代理Proxy,可以为任意请求方法通过设置proxies参数来配置单个请求</span></span><br><span class="line">    proxies = &#123;</span><br><span class="line">        <span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://0.10.1.10:3128&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https&quot;</span>:<span class="string">&quot;http://10.10.1.10:1080&quot;</span>,</span><br><span class="line">        <span class="comment">#&quot;http&quot;:&quot;http://user:pass@10.10.1.10:3128&quot; #这是代理中身份认证的用户名和密码，来设置代理</span></span><br><span class="line">    &#125;</span><br><span class="line">    requests.get(<span class="string">&quot;www.baidu.com&quot;</span>,proxies=proxies) <span class="comment">#设置代理ip</span></span><br></pre></td></tr></table></figure><h6 id="网页解析"><a href="#网页解析" class="headerlink" title="网页解析"></a>网页解析</h6><p>我们通过requets可以下载网页中的文本，那么我们怎么通过下载的文本获取到想要的信息呢？这里就需要使用到文本解析技术了，常用的方法有很多，我们这里采用BeautifulSoup库进行解决。BeautifulSoup具备的解析器如下所示：</p><p>BeautifulSoup将HTML文档转换成一个复杂的树形结构，每个节点都是一个python对象，所有对象可以归纳为四种。</p><blockquote><ol><li>Tag</li><li>NavigableString</li><li>BeautifulSoup</li><li>Comment</li></ol></blockquote><p>BeautifulSoup对网页的解析，主要是搜索指定标签，遍历标签元素，提取标签内容。对于解析文本的方法，可以参考如下代码，本质上就是调用API定位到要爬取到的数据信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">正则表达式：</span></span><br><span class="line"><span class="string">\b: 匹配单词的开始或结束</span></span><br><span class="line"><span class="string">^:  匹配字符串的开始</span></span><br><span class="line"><span class="string">$:  匹配字符串的结束</span></span><br><span class="line"><span class="string">\w: 匹配字母，数字，下划线或汉字</span></span><br><span class="line"><span class="string">\s: 匹配任意空白字符</span></span><br><span class="line"><span class="string">\d: 匹配数字</span></span><br><span class="line"><span class="string">. : 匹配除换行符以外的任意字符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">字符串转义: 通过\进行转义</span></span><br><span class="line"><span class="string">数量匹配：</span></span><br><span class="line"><span class="string">*：零次或多次</span></span><br><span class="line"><span class="string">+： 一次或多次</span></span><br><span class="line"><span class="string">？：零次或一次</span></span><br><span class="line"><span class="string">&#123;n&#125;: n次</span></span><br><span class="line"><span class="string">&#123;n,&#125;: n次或更多次</span></span><br><span class="line"><span class="string">&#123;n,m&#125; 重复n-m次</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">分支条件：</span></span><br><span class="line"><span class="string">正则表达式通过 | 表示或的关系。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这里采用BeautifulSoup(美味汁)进行文本解析</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">r = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">html = r.text</span><br><span class="line"><span class="comment"># 可以直接打开，不知道解析器，一般采用lxml解析器</span></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>,from_encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 获取对象属性():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Tag 对象</span></span><br><span class="line">    <span class="comment">#Tag对象就像html标签一样，直接通过soup.标签名进行对象的提取</span></span><br><span class="line">    <span class="comment">#要获取tag对象的属性，通过标签.name获取标签的名称 ， 并且可以设置标签的名称</span></span><br><span class="line">    <span class="comment">#如果需要获取标签的属性，如href和class之类的属性，则通过标签.get(属性名)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(soup.a) <span class="comment"># 根据标签获取</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a.name) <span class="comment">#获取标签名称</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a.get(<span class="string">&#x27;href&#x27;</span>)) <span class="comment"># 获取属性名称</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a.attrs) <span class="comment"># 获取标签中的所有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果要修改标签中的属性，怎么获取也同样可以怎么设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BeautifulSoup用NavigableString类来包装Tag中的字符串，通过标签.string就可以获取到标签内部的文字</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a.string)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(soup.a.string))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#BeautifulSoup对象表示的是一个文档的全部内容。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 遍历():</span></span><br><span class="line">    <span class="comment">### 遍历操作， beautiful soup 对文档树的遍历</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. contents</span></span><br><span class="line"><span class="string">    2.  children</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># contents属性，可以将tag的子节点列表输出</span></span><br><span class="line">    <span class="built_in">print</span>(soup.head.contents)</span><br><span class="line">    <span class="comment"># children属性返回的是一个生成器。可以对Tag的子节点进行循环</span></span><br><span class="line">    <span class="comment"># 也就是通过children可以迭代遍历节点的所有子节点.</span></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> soup.head.children:</span><br><span class="line">        <span class="built_in">print</span>(child)</span><br><span class="line">    <span class="comment"># 如果要递归遍历所有标签的孙子结点，则通过desendants属性，对所有tag的子孙节点进行循环</span></span><br><span class="line">    <span class="comment"># 标签的内容也属于标签的子节点</span></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> soup.head.descendants:</span><br><span class="line">        <span class="built_in">print</span>(child)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取结点的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># stirng , 如果标记唯一就返回标记的内容，而如果标记不唯一，可能返回None</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a.string)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># strings属性主要用于tag中包含多个字符串的情况，可以循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> soup.strings:</span><br><span class="line">        <span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stripped_strings 可以去掉输出字符串包含的空格或空行</span></span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> soup.stripped_strings:</span><br><span class="line">        <span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取父节点，通过parent属性</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a.parent)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取节点的所有父辈节点，通过parents属性</span></span><br><span class="line">    <span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">        <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(parent)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(parent.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取节点的兄弟节点,空白或换行也可也被视作一个节点</span></span><br><span class="line">    <span class="comment"># next_sibling获取下一个兄弟节点</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a.next_sibling)</span><br><span class="line">    <span class="comment"># previous_sibling获取上一个兄弟节点</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a.previous_sibling)</span><br><span class="line">    <span class="comment"># 通过next_siblings或者previous_siblings可以对当前兄弟节点迭代输出</span></span><br><span class="line">    <span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:</span><br><span class="line">        <span class="built_in">print</span>(sibling)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取节点的前后节点。前后节点是不区分层次结构的前后关系，如&lt;div&gt;&lt;a&gt;&lt;div&gt;,div的后一个节点就是a</span></span><br><span class="line">    <span class="comment"># next_element,previous_element,</span></span><br><span class="line">    <span class="built_in">print</span>(soup.a)</span><br><span class="line">    <span class="built_in">print</span>(soup.a.next_element)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果想遍历所有前后节点，通过next_elements和previous_elements进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> soup.a.next_elements:</span><br><span class="line">        <span class="built_in">print</span>(element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索文档树，搜索指定的内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 搜索():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># find_all()方法，搜索当前tag的所有tag子节点，判断是否满足搜索条件</span></span><br><span class="line">    <span class="comment"># find_add(name,attrs,recursive,txext,**kwargs)</span></span><br><span class="line">    <span class="comment"># name参数可以查找所有名字为name的标记,返回列表.一般用这个来找指定的标签</span></span><br><span class="line">    <span class="comment"># name参数可以是单独的字符，也可以是字符列表。</span></span><br><span class="line">    <span class="comment"># 可以自定义过滤器，用于匹配指定规则的标签</span></span><br><span class="line">    <span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(soup.find_all([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasClass_Id</span>(<span class="params">tag</span>):</span></span><br><span class="line">        <span class="keyword">return</span> tag.has_attr(<span class="string">&#x27;class&#x27;</span>) <span class="keyword">and</span> tag.has_attr(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(soup.find_all(hasClass_Id)) <span class="comment"># 寻找满足匹配规则的标签</span></span><br><span class="line">    <span class="comment"># 多条件过滤标签</span></span><br><span class="line">    <span class="comment"># 可以在find_all()中根据属性搜索指定的标签，并且可以将正则表达式作为搜索条件</span></span><br><span class="line">    <span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>,href=re.<span class="built_in">compile</span>(<span class="string">&#x27;elsie&#x27;</span>),<span class="built_in">id</span>=<span class="string">&#x27;12&#x27;</span>,class_=<span class="string">&#x27;sister&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果要限制搜索数目，则通过limit参数进行限制</span></span><br><span class="line">    <span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>,limit=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限制只搜索直接节点，而不搜索子孙节点，设置recursive = False</span></span><br><span class="line">    <span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>,limit=<span class="number">5</span>),recursive=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># CSS选择器</span></span><br><span class="line">    <span class="comment"># 通过元素的CSS属性定位元素的位置</span></span><br><span class="line">    <span class="comment"># 根据name属性通过.class值 , 根据id属性通过#id值</span></span><br><span class="line">    <span class="comment"># 返回类型为list</span></span><br><span class="line">    <span class="comment">#找到所有a标签</span></span><br><span class="line">    soup.select(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment">#找到a标签，id为1</span></span><br><span class="line">    soup.select(<span class="string">&#x27;a#1&#x27;</span>)</span><br><span class="line">    <span class="comment">#根据name查询</span></span><br><span class="line">    soup.select(<span class="string">&#x27;.classs&#x27;</span>)</span><br><span class="line">    <span class="comment">#通过判断是否存在某个属性进行查找</span></span><br><span class="line">    soup.select(<span class="string">&#x27;a[href]&#x27;</span>)</span><br><span class="line">    <span class="comment">#通过属性值查找 ， test可以是待查找的字符串，可以通过正则表达式查询</span></span><br><span class="line">    <span class="comment">#href^= &quot;&quot; , href$= , href*= , 进行正则判断。</span></span><br><span class="line">    soup.select(<span class="string">&#x27;a[href=&quot;test&quot;]&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络爬虫：是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。&lt;/p&gt;
&lt;p&gt;网络爬虫可以分为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;通用网络爬虫&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过搜索引擎搜索关键词，然后从搜索引擎返回的数据
      
    
    </summary>
    
      <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://example.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫与开发项目实战——第一回合</title>
    <link href="http://example.com/wiki/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/wiki/爬虫/Python爬虫开发与项目实战/</id>
    <published>2021-11-15T07:44:24.136Z</published>
    <updated>2021-11-17T02:40:05.260Z</updated>
    
    <content type="html"><![CDATA[<h5 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h5><font color="red" size=3>&nbsp;&nbsp;&nbsp;&nbsp;这一系列主要是对爬虫进一步深入了解,学习之前已经了解过爬虫，并编写过相应的代码，现在阅读书籍，进一步对爬虫的原理进行理解。大家可以通过该系列的开发过程，掌握爬虫的运用，以及进一步了解爬虫的原理。</font><ol><li><h6 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h6></li></ol><p>把内存中的变量变成可存储或可传输的过程，就是序列化。将内存中的变量序列化之后，可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上，实现程序状态的保存和共享。反过来，把变量内容从序列化的对象重新读取到内存，称为反序列化。</p><blockquote><p>也就是说，序列化就是保存了变量的一个快照(某个时刻的值)。反序列化就是根据保存的快照，将值赋值给变量，这样就回到了那个时刻(因为各个变量的值都一样)。<br>Python对序列化的支持：cPickle和pickle来实现序列化。一般都是先导入cPickle模块。实例代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 导入序列化模块</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    pickle实现序列化主要使用dumps方法或dump方法，</span></span><br><span class="line"><span class="string">    dumps方法可以将任意对象序列化成一个str，然后可以将这个str写入文件进行保存.</span></span><br><span class="line"><span class="string">    dump方法可以将序列化后的对象直接写入到文件中</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    pickle实现反序列化，主要通过loads或load方法，把序列化后的文件从磁盘上读取一个str，然后使用loads方法将str转化位对象</span></span><br><span class="line"><span class="string">    或者直接使用load方法将文件直接反序列化位对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#dumps</span></span><br><span class="line">d = <span class="built_in">dict</span>(url=<span class="string">&quot;index.html&quot;</span>,title=<span class="string">&quot;首页&quot;</span>,content=<span class="string">&quot;首页&quot;</span>)</span><br><span class="line"><span class="built_in">str</span> = pickle.dumps(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dump</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;dump.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pickle.dump(d,f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过load方法</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;dump.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">d = pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure></p></blockquote><ol><li><h6 id="进程和多进程"><a href="#进程和多进程" class="headerlink" title="进程和多进程"></a>进程和多进程</h6></li></ol><p>python对多进程的方法：一种通过os模块的fork方法(适用于unix和linux操作系统)，一种通过multiprocessing模块(跨平台的实现方式)。这里主要采用Multiprocessing来创建多进程.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#multiprocessing模块创建多进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过Process类来描述一个进程对象，创建子进程时，只需要传入一个执行函数和函数参数，</span></span><br><span class="line"><span class="comment">#即可完成一个Process实例的创建，用strt()方法启动进程，用join方法实现进程间的同步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#子进程要执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Child process %s (%s) Running...&#x27;</span>%(name,os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="comment">##进程池任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_task</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task %s (pid=%s) is runing...&#x27;</span>%(name,os.getpid()))</span><br><span class="line">    time.sleep(random.random()*<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task %s end.&#x27;</span>%name)</span><br><span class="line"><span class="comment">#写数据进程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_write</span>(<span class="params">q,urls</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process(%s) is writing...&#x27;</span>%os.getpid())</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        q.put(url)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Put %s queue...&#x27;</span>%url)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"><span class="comment">#读数据进程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_read</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process(%s) is reading&#x27;</span>%os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = q.get(<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Get %s from queue.&#x27;</span>%url)</span><br><span class="line"><span class="function"><span class="keyword">def</span> 多进程():</span></span><br><span class="line">    <span class="comment"># print(&#x27;Parent process %s.&#x27;%os.getpid())</span></span><br><span class="line">    <span class="comment"># for i in range(5):</span></span><br><span class="line">    <span class="comment">#     p = Process(target=run_proc,args=(str(i),))#指定子进程要执行的方法，以及传递的参数</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Process will start.&#x27;)</span></span><br><span class="line">    <span class="comment">#     p.start()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line">    <span class="comment"># print(&#x27;Process end&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过进程池创建多个进程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Current process %s.&#x27;</span> % os.getpid())</span><br><span class="line">    p = Pool(processes=<span class="number">3</span>)  <span class="comment"># 创建进程池，指定进程池中进程的个数，默认位CPU核数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(run_task, args=(i,))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Waiting for all subprocess done ...&#x27;</span>)</span><br><span class="line">    p.close()  <span class="comment"># g关闭进程池，就不能继续向进程池中添加新的任务</span></span><br><span class="line">    p.join()  <span class="comment"># 使用join表示等待所有子进程结束</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进程通信 通过Queue或者Pipe(一般用于两个进程通信)实现进程通信</span></span><br><span class="line">    <span class="comment"># 通过Queue进行get和put操作，可以设置blocked和timeout两个属性，blocked是设定操作是否阻塞</span></span><br><span class="line">    <span class="comment"># timeout是设置操作的等待时间。</span></span><br><span class="line">    q = Queue()  <span class="comment"># 创建消息队列</span></span><br><span class="line">    proc_write1 = Process(target=proc_write, args=(q, [<span class="string">&#x27;url_1&#x27;</span>, <span class="string">&#x27;url_2&#x27;</span>, <span class="string">&#x27;url_3&#x27;</span>]))</span><br><span class="line">    proc_write2 = Process(target=proc_write, args=(q, [<span class="string">&#x27;url_4&#x27;</span>, <span class="string">&#x27;url_5&#x27;</span>, <span class="string">&#x27;url_6&#x27;</span>]))</span><br><span class="line">    proc_reader = Process(target=proc_read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程proc_writer写入</span></span><br><span class="line">    proc_write1.start()</span><br><span class="line">    proc_write2.start()</span><br><span class="line">    <span class="comment"># 启动子进程读取</span></span><br><span class="line">    proc_reader.start()</span><br><span class="line">    <span class="comment"># 等待写入结束</span></span><br><span class="line">    proc_write1.join()</span><br><span class="line">    proc_write2.join()</span><br><span class="line">    <span class="comment"># 由于读取是死循环，所以只能强行终止</span></span><br><span class="line">    proc_reader.terminate()</span><br></pre></td></tr></table></figure></p><ol><li><h6 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h6></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_run</span>(<span class="params">urls</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Current %s is running ...&#x27;</span>%threading.current_thread().name)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s ------&gt;&gt;&gt; %s&#x27;</span>%(threading.current_thread().name,url))</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s ended.&#x27;</span>% threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#继承创建线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,urls</span>):</span></span><br><span class="line">        threading.Thread.__init__(self,name=name)</span><br><span class="line">        self.urls =urls</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Current %s is running ...&#x27;</span> % threading.current_thread().name)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.urls:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s ------&gt;&gt;&gt; %s&#x27;</span> % (threading.current_thread().name, url))</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s ended.&#x27;</span> % threading.current_thread().name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        多线程，线程类似于执行多个不同的程序，多线程可以将允许时间长的任务放到后台处理。</span></span><br><span class="line"><span class="string">        Python对多线程的支持，thread和threading，一般我们使用threading模块</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running...&#x27;</span>%threading.current_thread().name)</span><br><span class="line">    t1 = threading.Thread(target=thread_run,name=<span class="string">&#x27;Thread_1&#x27;</span>,args=([<span class="string">&#x27;url_1&#x27;</span>,<span class="string">&#x27;url_2&#x27;</span>,<span class="string">&#x27;url_3&#x27;</span>],))</span><br><span class="line">    t2 = threading.Thread(target=thread_run, name=<span class="string">&#x27;Thread_2&#x27;</span>, args=([<span class="string">&#x27;url_4&#x27;</span>, <span class="string">&#x27;url_5&#x27;</span>, <span class="string">&#x27;url_6&#x27;</span>],))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s ended.&#x27;</span>%threading.current_thread().name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#自定义线程类</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running...&#x27;</span> % threading.current_thread().name)</span><br><span class="line">    t1 = MyThread(  name=<span class="string">&#x27;Thread_1&#x27;</span>, urls=([<span class="string">&#x27;url_1&#x27;</span>, <span class="string">&#x27;url_2&#x27;</span>, <span class="string">&#x27;url_3&#x27;</span>]))</span><br><span class="line">    t2 = MyThread(  name=<span class="string">&#x27;Thread_2&#x27;</span>, urls=([<span class="string">&#x27;url_4&#x27;</span>, <span class="string">&#x27;url_5&#x27;</span>, <span class="string">&#x27;url_6&#x27;</span>]))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s ended.&#x27;</span> % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">##线程同步</span></span><br><span class="line">    <span class="comment">##一般通过Thread的Lock和RLock实现简单的线程同步，两个对象都有acquire和release方法</span></span><br><span class="line">    mylock = threading.RLock() <span class="comment">#创建一个锁</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myThread1</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">            threading.Thread.__init__(self,name=name)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">global</span> num</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                mylock.acquire()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s locked,Number :%d&#x27;</span>%(threading.current_thread().name,num))</span><br><span class="line">                <span class="keyword">if</span> num &gt;=<span class="number">4</span> :</span><br><span class="line">                    mylock.release()</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;%s released, Number: %s&#x27;</span>%(threading.current_thread().name,num))</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s released Number %s&#x27;</span>%(threading.current_thread().name,num))</span><br><span class="line">                mylock.release()</span><br><span class="line">    thread1 = myThread1(<span class="string">&#x27;Thread_1&#x27;</span>)</span><br><span class="line">    thread2 = myThread1(<span class="string">&#x27;Thread_2&#x27;</span>)</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>协程</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#各个协程执行的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_task</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Visis --&gt; %s&#x27;</span>%url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data  = urllib3.connection_from_url(url=url).urlopen(url=url,method=<span class="string">&quot;GET&quot;</span>).data</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s bytes received from %s.&#x27;</span>%(<span class="built_in">len</span>(data),url))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line">    <span class="comment"># 协程又称微线程(纤程),用户级的轻量级线程</span></span><br><span class="line">    <span class="comment">#协程能够保留上一次调用时的状态</span></span><br><span class="line">    <span class="comment">#Python对写出的支持通过gevent库，Python通过yield提供对协程的基本支持但是不完全，所以使用</span></span><br><span class="line">    <span class="comment">#gevent更加好</span></span><br><span class="line">    <span class="comment">#gevent实际上是greenlet在实现切换工作。如果出现io阻塞的时候，gevent会自动切换到没有阻塞的代码执行</span></span><br><span class="line">    <span class="comment">#所以gevent一直保持greenlet在允许</span></span><br><span class="line">    urls = [<span class="string">&#x27;https://github.com/&#x27;</span>,<span class="string">&#x27;https://www.python.org/&#x27;</span>,<span class="string">&#x27;http://www.baidu.com/&#x27;</span>] <span class="comment"># 各个协程访问的网址</span></span><br><span class="line">    greenlets = [gevent.spawn(run_task,url) <span class="keyword">for</span> url <span class="keyword">in</span> urls] <span class="comment"># 这里将各个协程加入到greenlets中</span></span><br><span class="line">    gevent.joinall(greenlets=greenlets) <span class="comment">#进行执行各个协程</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>分布式进程</li></ol><p>分布式进程：分布式也就是将计算任务分布到多个计算机上进行运算，然后将结果返回。分布式进程也就是指，将Process进程分不到多台机器，利用多台机器的性能，完成复杂的任务。</p><p>对于分布式进程，通过multiprocessing模块的managers子模块，将多线程分布到多台机器上。</p><p>一般我们通过分布式处理任务，将某块的任务分配给某个机器执行，然后某个功能模块给其他模块执行。将任务分成多个计算机集群进行处理，提高速度。例如爬取图片，可以一个计算机专门爬取图片链接，然后多个计算机专门根据爬取到的图片链接下载图片。<br>将中间处理的结果，让其他机器进程都能访问的过程称为本地队列的网络化。过程如下所示：<br><img src="/images/分布式.PNG" alt="a5"></p><p>两个实现代码</p><p>taskManager.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> freeze_support</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#任务个数</span></span><br><span class="line">task_number = <span class="number">10</span></span><br><span class="line"><span class="comment">#定义收发队列</span></span><br><span class="line">task_queue = queue.Queue(task_number)</span><br><span class="line">result_queue = queue.Queue(task_number)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_task</span>():</span></span><br><span class="line">    <span class="keyword">return</span> task_queue</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span>():</span></span><br><span class="line">    <span class="keyword">return</span> result_queue</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建类似的QueueManager</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span>(<span class="params">BaseManager</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">win_run</span>():</span></span><br><span class="line">    <span class="comment">#Windows下绑定调用接口</span></span><br><span class="line">    QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>,<span class="built_in">callable</span>=get_task)</span><br><span class="line">    QueueManager.register(<span class="string">&#x27;get_result_queue&#x27;</span>,<span class="built_in">callable</span>=get_result)</span><br><span class="line">    <span class="comment">#绑定端口并设置验证口令，Windows下需要填写IP地址</span></span><br><span class="line">    manager = QueueManager(address=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8001</span>),authkey=<span class="string">&#x27;qiye&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment">#启动</span></span><br><span class="line">    manager.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#通过网络获取任务队列和结果队列</span></span><br><span class="line">        task = manager.get_task_queue()</span><br><span class="line">        result = manager.get_result_queue()</span><br><span class="line">        <span class="comment">#添加任务</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> [<span class="string">&#x27;ImageUrl_&#x27;</span>+<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;put task %s...&#x27;</span>%url)</span><br><span class="line">            task.put(url)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;try get result...&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;result is %s &#x27;</span>%result.get(timeout=<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Manager error&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment">#一定要关闭，否则会报管道未关闭的错误</span></span><br><span class="line">            manager.shutdown()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#Windows多线程可能有问题，进行缓解</span></span><br><span class="line">    freeze_support()</span><br><span class="line">    win_run()</span><br></pre></td></tr></table></figure></p><p>taskWorker.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span>  BaseManager</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建类似的QueueManager</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span>(<span class="params">BaseManager</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#第一步使用Queuemanager注册用于获取Queueu的方法名称</span></span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>)</span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_result_queue&#x27;</span>)</span><br><span class="line"><span class="comment">#第二部连接到服务器</span></span><br><span class="line">server_addr =  <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Connect to server %s...&#x27;</span>%server_addr)</span><br><span class="line"><span class="comment">#端口哦和验证口令</span></span><br><span class="line">m = QueueManager(address=(server_addr,<span class="number">8001</span>),authkey=<span class="string">&#x27;qiye&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment">#从网络链接</span></span><br><span class="line">m.connect()</span><br><span class="line"><span class="comment">#第三步获取Queue的对象</span></span><br><span class="line">task = m.get_task_queue()</span><br><span class="line">result = m.get_result_queue()</span><br><span class="line"><span class="comment">#第四步，从task队列获取任务，把结果写入到result队列</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">not</span> task.empty()):</span><br><span class="line">    image_url = task.get(<span class="literal">True</span>,timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run task download %s...&#x27;</span>%image_url)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    result.put(<span class="string">&quot;%s---&gt;success&quot;</span>%image_url)</span><br><span class="line"><span class="comment">#处理结束</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;worker exit .&#x27;</span>)</span><br></pre></td></tr></table></figure></p><ol><li>网络编程</li></ol><p>两台计算机之间的通信，实际上是两台计算机，端口之间的通信。当在浏览器浏览网页的时候，实际上就是本地计算机的一个端口进程和服务器的某个端口进程建立了连接，并进行通信。</p><p>一般通过Socket（套接字）,描述通信。Socket由ip+端口组成。Python提供了两个Socket模块。<br>Socket：提供了标准的BSD Sockets API<br>SocketServer: 提供了服务器中心类，可以简化网络服务器的开发。</p><blockquote><p>Socket类型<br>套接字格式为：socket(family,type[,protocal]),使用给定的地址族，套接字类型，协议编号（默认为0）来创建套接字。<br>套接字类型如下所示：<br><img src="/images/Socket类型.PNG" alt="a6"></p><p>Socket常用函数<br><img src="/images/Socket2.PNG" alt="a61"></p><p>TCP编程</p></blockquote><p>TCP-Server.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 网络编程包含两个部分：服务端和客户端</span></span><br><span class="line"><span class="comment"># TCP是面向连接的通信方式</span></span><br><span class="line"><span class="comment"># 主动发起连接的叫做客户端</span></span><br><span class="line"><span class="comment"># 被动响应连接的叫服务端</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建TCP服务端</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 创建Socket,绑定Socket到本地IP与端口</span></span><br><span class="line"><span class="string">2. 开始监听连接</span></span><br><span class="line"><span class="string">3. 进入循环，不断接收客户端的连接请求</span></span><br><span class="line"><span class="string">4.接收传来的数据，并发送给对方数据</span></span><br><span class="line"><span class="string">5.传输完毕后，关闭Socket</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dealClient</span>(<span class="params">sock,addr</span>):</span></span><br><span class="line">    <span class="comment"># 第四步：接收传来的数据，并发送给对方数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Accept new connection from %s:%s...&#x27;</span>%(sock,addr))</span><br><span class="line">    sock.send(<span class="string">b&#x27;Hello,I am server!&#x27;</span>)<span class="comment">#发送数据</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>) <span class="comment">#接收数据</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> data.decode(<span class="string">&#x27;utf-8&#x27;</span>) == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----&gt;&gt;&gt;%s!&#x27;</span>%data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        sock.send((<span class="string">&#x27;Loop_Msg:%s!&#x27;</span>%data.decode(<span class="string">&#x27;utf-8&#x27;</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment">#关闭Socket</span></span><br><span class="line">    sock.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Connection from %s:%s closed.&#x27;</span>%(sock,addr))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#第一步：创建基于IPv4和TCP协议的Socket</span></span><br><span class="line">    <span class="comment">#Socket绑定IP（127.0.0.1为本机IP）与端口</span></span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>))</span><br><span class="line">    <span class="comment">#第二步：监听连接</span></span><br><span class="line">    s.listen(<span class="number">5</span>)<span class="comment">#最大连接数量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Waiting for connection...&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#第三步: 接收一个新连接</span></span><br><span class="line">        sock,addr = s.accept()</span><br><span class="line">        <span class="comment">#创建新线程来处理TCP连接</span></span><br><span class="line">        t = threading.Thread(target=dealClient,args=(sock,addr,))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>TCP-Client.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#TCP客户端</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.创建Socket，连接远端地址</span></span><br><span class="line"><span class="string">2.连接后发送数据和接收数据</span></span><br><span class="line"><span class="string">3.传输完毕后，关闭Socket</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#初始化Socket</span></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="comment">#连接目标的ip和端口</span></span><br><span class="line">s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>))</span><br><span class="line"><span class="comment">#接收消息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---&gt;&gt;&gt;&#x27;</span>+s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment">#发送消息</span></span><br><span class="line">s.send(<span class="string">b&#x27;Hello,I am Client&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">s.send(<span class="string">b&#x27;exit&#x27;</span>)</span><br><span class="line"><span class="comment">#关闭Socket</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure></p><blockquote><p>UDP编程</p></blockquote><p>UDP-Server.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UDP 服务器端</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">UDP是面向无连接的协议。使用UDP协议时，不需要建立连接，只需要直到对方的IP地址和端口号，就可以直接发数据包。</span></span><br><span class="line"><span class="string">并不关心能够到达目的端。对于不要求可靠到达的数据，就可以使用UDP协议。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">服务端创建过程：</span></span><br><span class="line"><span class="string">    1. 创建Socket，绑定指定的ip和端口</span></span><br><span class="line"><span class="string">    2. 直接发送数据和接收数据</span></span><br><span class="line"><span class="string">    3. 关闭Socket</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Socket,绑定指定IP和端口</span></span><br><span class="line"><span class="comment"># SOCK_DGRAM指定了这个Socket的类型是UDP，绑定端口和TCP示例一样</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Bind UDP on 9999...&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 直接发送数据和接收数据</span></span><br><span class="line">    data, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Received from %s:%s. &#x27;</span> %(addr,data.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    s.sendto(<span class="string">b&#x27;Hello,!&#x27;</span>, addr)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>DUP-Client.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#UDP的客户端</span></span><br><span class="line"><span class="comment"># UDP客户端，创建Socket即可与服务器数据交换。</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> [<span class="string">b&#x27;Hello&#x27;</span>,<span class="string">b&#x27;World&#x27;</span>]:</span><br><span class="line">    <span class="comment">#发送数据</span></span><br><span class="line">    s.sendto(data,(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>))</span><br><span class="line">    <span class="comment">#接收数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><p>两个计算机之间的通信是端口进程之间的通信。端口属于应用层。对于应用层之间的数据，通过运输层提供相应的数据。运输层的协议，有TCP和UDP传输协议。</p><p>对于TCP协议，是面向连接的，所以在使用tcp协议传送数据的时候，需要保证两个通信的主机建立了连接，然后再进行数据的传输。<br>&gt;</p><blockquote><p>  所以对于TCP而言，服务器和客户端的连接步骤<br>对于TCP服务器：</p><ol><li>创建Socket，绑定到对应端口</li><li>监听端口，检测是否有连接</li><li>如果有客户端连接，接收客户端连接，可以获得客户端的套接字</li><li>建立连接后，可以循环监听接收客户端发送的数据，也可发送数据给客户端</li><li>会话完毕，就可以关闭连接</li></ol><p>对于TCP客户端</p><ol><li>创建Socket</li><li>连接到服务器，然后建立连接</li><li>发送，接收数据</li><li>会话完毕，关闭连接</li></ol></blockquote><p>对于UDP协议，是面向无连接的，所以在使用UDP协议的时候，并不需要确定双方是否建立了连接，直接向对应的（地址，端口号），发送数据即可，不关心是否发送成功。同理，接收数据也是直接接收即可。因为发送的时候就是直接发到对应主机，然后接收直接接收即可。</p><blockquote><p>对于UDP服务器</p><ol><li>创建Socket,绑定端口</li><li>监听端口，查看是否有数据</li><li>接收到数据（data,addr），可以发送给数据到指定的addr</li></ol><p>对于UDP客户端</p><ol><li>创建Socket</li><li>向服务器(addr,post)发送数据</li><li>可以监听自己的计算机，是否有其他计算机发送的数据</li></ol><p>总结</p></blockquote><p>从上面TCP/UDP客户端和服务器的创建过程可以比较出，TCP需要确定连接，而对于UDP而言不需要确定是否连接成功。</p><ol><li>WEB前端基础</li></ol><blockquote><p>W3C标准</p></blockquote><p>W3C即万维网联盟，W3C标准是一系列标准的集合。</p><p>一个网页由三部分组成：结构(Structure),表现(Presentation),行为(Behavior)。对应</p><p>结构化标准语言：XHTML，XML<br>表现标准语言：CSS<br>行为标准：对象模型(如W3C DOM)，ECMAScript等。</p><p>HTML（超文本标记语言），也就是是一种标签语言。</p><p>CSS(层叠样式表): 用于解决内容和表现的分离。CSS主要由选择器+属性构成。选择器用于指定渲染元素，属性用于指定渲染效果。</p><p>JavaScript（轻量级脚本语言）</p><p>XPath: 一门在XML文档中查找信息的语言。</p><p>JSON：JavaScript对象表示法，用于存储和交换文本信息。</p><p>HTTP协议(超文本传输协议)，用于从www服务区传输超文本到本地浏览器的传送协议。HTTP协议永远都是客户端发起请求，服务器会送响应。</p><p>HTTP协议是一个无状态协议，同一个客户端的这次请求和上次请求没有对应关系。</p><p>HTTP状态码：</p><p>200—请求成功<br>301—资源网页被永久转移到其他URL<br>404—请求的资源不存在<br>500—内部服务器错误</p><p>1开头一般表示服务器收到请求，需要请求者继续执行操作<br>2开头一般表示请求操作成功<br>3开头一般表示重定向<br>4开头一般表示客户端错误<br>5开头一般表示服务器错误</p><blockquote><p>Cookie和Session都用于保存状态信息，Cookie保存在客户端，Session保存在服务器端。</p></blockquote><p>Cookie：服务器给每个Session分配一个唯一的JSESSIONID，并通过Cookie发送给客户端，当客户端发起新的请求的时候，将在Cookie头中携带JSESSIONID。这样服务器就能够找到这个客户端对应的Session。</p><p><img src="/images/Cookie.PNG" alt="a7"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h5&gt;&lt;font color=&quot;red&quot; size=3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这一系列主要是对爬虫进一步深入了
      
    
    </summary>
    
      <category term="爬虫" scheme="http://example.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://example.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>4. Java对象与类</title>
    <link href="http://example.com/wiki/JavaSE/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/class/"/>
    <id>http://example.com/wiki/JavaSE/第四章-对象与类/class/</id>
    <published>2021-11-03T07:05:53.433Z</published>
    <updated>2021-11-15T07:43:27.465Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象程序设计OOP(Object Oriented Programming)。</p><p>类用于描述对象所具有的属性和方法，具体的对象称为类的一个实例。</p><p>封装也就是将数据和行为组合在一个包中，并对对象的使用者隐藏了数据的实现方式。</p><p>对象的三个特性，行为，状态，标识。</p><p>对象的行为描述了对象具有哪些操作，对象的状态（状态也就是对象当前的特征信息）决定了在不同情况下相应的操作的响应，对象的标识描述了不同的实例对象。</p><blockquote><p>类之间的关系</p></blockquote><ol><li><p>依赖关系(uses-a)</p><p> 如果一个类A的方法使用了另一个类B，那么就形成了依赖关系。<br> A依赖于B。（过多的依赖会使得类之间的耦合度高）</p></li><li><p>聚合关系(has-a)</p><p> 如果类A包含一些类B，那么A和B是聚合关系。</p></li><li><p>继承关系(is-a)</p><p> 父类和子类的关系，也就是继承关系。</p></li></ol><p>UML（Unified Modeling Language,统一建模语言）中类关系的表示：<br><img src="/images/UML.PNG" alt="a1"></p><p>Java中的对象通过new进行创建，通过new创建一个新的对象变量。一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。通过new 操作符的返回值也是一个引用。这可以理解为Java中所有的对象变量实际上就是一个指针，指向实际对象所在的地址。</p><blockquote><ol><li>更改器方法(get),访问器方法(set)</li></ol></blockquote><p>注意不要编写返回引用可变对象的访问器方法。如果返回了可变对象，那么在类外部对返回对象的改变，同时也会影响到类内部的变量。<br>如果需要返回一个可变对象的引用，首先因该对它进行克隆(clone)。对象的clone是指存放在另一个位置上的对象副本。<br>如果需要返回一个可变数据域的拷贝，就应该使用 clone。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Employee other)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name.equals(other.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上段代码，我们可以看出，在equals方法中，调用了other的私有变量。对于Javaa来说，类的方法可以访问该类的任何对象的遍私有变量。<br>类方法可以访问所属类的私有特性。</p><blockquote><ol><li>构造器</li></ol></blockquote><pre><code>•构造器与类同名•每个类可以有一个以上的构造器•构造器可以有 0 个、1 个或多个参数•构造器没有返回值•构造器总是伴随着 new 操作一起调用</code></pre><blockquote><ol><li>隐式参数与显示参数</li></ol></blockquote><p>以下列代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> a ;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a = a ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a = a ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们对于方法setA,可以看出对于参数a是显示的参数。而隐式参数是谁呢？隐式参数是调用该方法调用的类对象，通过关键字this表示隐式参数。</p><p>第一个参数称为隐式 （ implicit ) 参数， 是出现在方法名前的Employee 类对象。第二个参数位于方法名后面括号中的数值，这是一个显式 （ explicit)参数（ 有些人把隐式参数称为方法调用的目标或接收者。</p><p>也就是说，this表明该方法的调用者。</p><blockquote><ol><li>访问修饰符</li></ol></blockquote><div class="table-container"><table><thead><tr><th>修饰符</th><th>作用</th><th>作用域</th></tr></thead><tbody><tr><td>public</td><td>公开的</td><td>任意类都能访问</td></tr><tr><td>private</td><td>私有的</td><td>只能被定义它们的类使用</td></tr><tr><td>final</td><td>final 修饰符大都应用于基本 （primitive ) 类型域，或不可变（immutable)类的域（如果类中的每个方法都不会改变其对象， 这种类就是不可变的类)。</td></tr><tr><td>static</td><td>静态域（类域）和静态方法。对于静态域变量，该变量属于类，而不属于任何独立的对象，通过类就能够直接访问到静态域变量(公开的)，实例对象，也能够访问到该变量，但是该变量属于类，所有对象访问到的静态域对象都是一样的。对于静态域一般可以用于设置静态常量，通过类名就能引用，但是不会被修改。对于静态方法，加在方法名之前，静态方法可以通过类名直接调用，静态方法不属于单独的对象。静态方法不具有this参数，所以静态方法不能访问非静态域的实例域。</td></tr></tbody></table></div><p>在下面两种情下使用静态方法：</p><ol><li>一 方法不需要访问对象状态，其所需参数都是通过显式参数提供（例如：Math.pow) </li><li>一个方法只需要访问类的静态域（例如：Employee.getNextld）。</li></ol><h4 id="初始化数据域"><a href="#初始化数据域" class="headerlink" title="初始化数据域"></a>初始化数据域</h4><blockquote><p>默认域初始化</p></blockquote><p>如果在构造器中没有显式地给域赋予初值，那么就会被自动地赋为默认值： 数值为 0、布尔值为 false、 对象引用为 null。<br>尽量对对象进行赋初始值，而不是采用默认初始值</p><blockquote><p>构造器初始化<br>通过this可以调用同一个类的另一个构造器。如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String <span class="keyword">double</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// calls Employee(String, double)</span></span><br><span class="line">    <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span> + nextld, s);</span><br><span class="line">    nextld++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>通过this，引用到了同一个Employee的另一个的构造函数，对类对象进行初始化。</p><p>在声明中赋值</p><p>在初始化块赋值</p></blockquote><p>初始块也就是通过{}包含的一段代码块。只要构造类的对象，这些块就会被执行。初始化块的执行顺序，首先运行初始化块，然后才运行构造器的主体部分。</p><p>对于静态域的初始化，需要加上关键字static<br>static{<br>    //进行初始化<br>}</p><blockquote><p>Java调用构造器的步骤</p></blockquote><ol><li>所有数据域被初始化默认值(0,false,null)</li><li>按照类声明中出现的次序，依次执行所有域初始化语句或初始化块。</li><li>如果构造器第一行调用了其它构造器，则调用其它构造器</li><li>执行这个构造器主体。</li></ol><p>构造器是最后执行的，先执行声明和代码块语句。</p><h4 id="Java参数调用"><a href="#Java参数调用" class="headerlink" title="Java参数调用"></a>Java参数调用</h4><p>方法参数共有两种类型：</p><ol><li>基本数据类型（数字、布尔值K</li><li>对象引用。</li></ol><p>Java 程序设计语言总是采用按值调用。也就是说， 方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。一个方法，无法改变基本数据类型的参数，但是对象引用作为参数就不同了。对于引用参数就不一样了，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。</p><blockquote><p>总结</p></blockquote><ol><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。（因为Java的引用对象，并不是真正的引用(只是值的传递),可以通过反证进行证明）</li></ol><h4 id="重载-overloading-和重写-overwrite"><a href="#重载-overloading-和重写-overwrite" class="headerlink" title="重载(overloading)和重写(overwrite)"></a>重载(overloading)和重写(overwrite)</h4><blockquote><p>重载</p></blockquote><p>如果多个方法（比如， StringBuilder 构造器方法）有相同的名字、 不同的参数，便产生了重载。对于不同的重载方法， 通过方法给出的参数类型和特定的方法调用所使用的值类型进行匹配来挑选相应的方法（返回值不作为特征）。。如果编译器找不到匹配的参数， 就会产生编译时错误，因为根本不存在匹配， 或者没有一个比其他的更好。（这个过程被称为重载解析（overloading resolution)。）</p><p>对于一个方法的签名(signature)，包含方法名，方法参数类型构成。方法签名=方法名(参数类型)。</p><blockquote><p>重写</p></blockquote><h4 id="Java的包"><a href="#Java的包" class="headerlink" title="Java的包"></a>Java的包</h4><p>Java允许使用包(package)将类组织起来，借助于包可以方便地组织自己的代码，并将自己的代码与别人提供的代码库分开管理。使用包的主要原因是确保类名的唯一性(全限定类名)，一般我们对包名的命名规则是以因特网域名的逆序形式作为包名，并且对于不同的项目使用不同的子包。</p><p>一个类可以使用所属包中的所有类，以及其他包中的公有类(public class)。</p><p>import语句不仅可以导入类，还增加了导入静态方法和静态域的功能。</p><blockquote><p>import static java.lang.System.*<br>通过上述语句就可以直接使用System类的静态方法和静态域，而不必加类名前缀。<br>这样就可以直接在程序中使用out.println(“hello world”);而不用加前缀。</p></blockquote><p>把一个类放到一个包中， 需要通过package 指定所属的包。如果没有设置，则类被放在默认的包(default package)。</p><blockquote><p>对于包的作用域</p></blockquote><p>对于标记public部分，可以被任意的类使用。标记为private部分，只能被定义它们的类使用。如果没有指定public或private，这个部分(类，方法或变量)可以被同一个包中的所有方法访问。</p><blockquote><p>类路径</p></blockquote><p>为了使类能够被多个程序共享，需要做到下面几点：</p><p>1 ) 把类放到一个目录中， 例如 /home/user/classdir。需要注意， 这个目录是包树状结构的基目录。如果希望将 com.horstmann.corejava.Employee 类添加到其中，这个Employee.class类文件就必须位于子目录 /home/user/classdir/com/horstmann/corejava 中。</p><p>2 ) 将 JAR 文件放在一个目录中，例如：/home/user/archives。</p><p>3 ) 设置类路径（classpath)。类路径是所有包含类文件的路径的集合。</p><h4 id="类路径包括："><a href="#类路径包括：" class="headerlink" title="类路径包括："></a>类路径包括：</h4><p>•基目录 /home/user/classdir或 c:\classes；</p><p>•当前目录 (.);</p><p>•JAR 文件 /home/user/archives/archive.jar或c:\archives\archive.jar </p><p>从 Java SE 6 开始，可以在 JAR 文件目录中指定通配符，如下：/home/user/dassdir:.:/home/aser/archives/<em><br>或者c:\classdir;.;c:\archives\</em></p><blockquote><p>假定虚拟机要搜寻 com.horstmann.corejava.Employee 类文件。它首先要查看存储在 jre/<br>lib 和jre/lib/ext 目录下的归档文件中所存放的系统类文件。显然，在那里找不到相应的类文件，然后再查看类路径。然后查找以下文件：</p><blockquote><p>•/home/user/classdir/com/horstmann/corejava/Employee.class<br>•com/horstmann/corejava/Employee.class 从当前目录开始<br>•com/horstmann/corejava/Employee.class inside /home/user/archives/archive.jar</p></blockquote><p>设置类路径</p></blockquote><p>如果需要指定类的路径，可以借助-classpath来指定类路径。</p><h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><blockquote><p>通过/<em>* </em>/开始注释。</p></blockquote><p>对于代码的描述性句子，一般在/<em>* </em>/第一行进行编写，对于概要性的句子，可以使用HTML修饰符进行修饰(但是不要使用h1标签),如果需要键入等宽代码，使用{@code}。</p><blockquote><p>方法主要使用的注释</p></blockquote><p>@param 变量描述</p><p>@return 返回值描述</p><p>@throws 抛出异常描述</p><blockquote><p>通用注释</p></blockquote><p>@author 姓名<br>@version 版本信息<br>@since 从哪个版本开始加入的<br>@deprecated 描述该类或方法或变量不再使用<br>@see 增加一个超级链接 , 可以通过全限定类名作为超链接<br>eg: @see com.itheima.Employee#raiseSalary(double ),链接指向Employee下的raiseSalary(double)方法</p><blockquote><p>总结</p></blockquote><p>所有Java对象都是在堆中构造的，构造器总是伴随着new操作符一起使用。</p><h4 id="类设计技巧"><a href="#类设计技巧" class="headerlink" title="类设计技巧"></a>类设计技巧</h4><ol><li>数据私有</li><li>对数据初始化</li><li>不要再类中使用过多的基本类型</li><li>不是所有的域都需要独立的get/set方法</li><li>将职责过多的类进行分解</li><li>类名和方法名要能够体现它们的职责，也就是见名知义</li><li>优先使用不可变的类</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面向对象程序设计OOP(Object Oriented Programming)。&lt;/p&gt;
&lt;p&gt;类用于描述对象所具有的属性和方法，具体的对象称为类的一个实例。&lt;/p&gt;
&lt;p&gt;封装也就是将数据和行为组合在一个包中，并对对象的使用者隐藏了数据的实现方式。&lt;/p&gt;
&lt;p&gt;对象的
      
    
    </summary>
    
      <category term="JavaSE" scheme="http://example.com/categories/JavaSE/"/>
    
    
      <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
      <category term="JAVASE" scheme="http://example.com/tags/JAVASE/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda配置</title>
    <link href="http://example.com/wiki/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/python/Anaconda/"/>
    <id>http://example.com/wiki/软件配置/python/Anaconda/</id>
    <published>2021-11-02T03:22:44.814Z</published>
    <updated>2021-11-02T03:25:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>Anaconda下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ </a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Anaconda下载地址：&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/&quot;&gt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ &lt;/a&gt;
      
    
    </summary>
    
      <category term="软件配置" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
      <category term="python配置" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/python%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="配置" scheme="http://example.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用问题</title>
    <link href="http://example.com/wiki/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/hexo/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/wiki/软件配置/hexo/问题解决/</id>
    <published>2021-11-01T07:32:29.409Z</published>
    <updated>2021-11-02T03:22:35.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何解决wiki中图片显示不全"><a href="#如何解决wiki中图片显示不全" class="headerlink" title="如何解决wiki中图片显示不全"></a>如何解决wiki中图片显示不全</h3><p>只需要把图片放在images文件夹下， 然后通过/images/xxx.xx进行引用即可，这是通过绝对路径进行引用。如果要通过相对路径引用则每个md需要创建相应的文件夹存放图片，较为麻烦。</p><h3 id="如何解决wiki中mermaid流程图无法显示的问题"><a href="#如何解决wiki中mermaid流程图无法显示的问题" class="headerlink" title="如何解决wiki中mermaid流程图无法显示的问题"></a>如何解决wiki中mermaid流程图无法显示的问题</h3><ol><li>修改 /theme/Wikitten下的config.yml文件</li></ol><p>讲下列代码粘贴到文件末尾<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mermaid: <span class="comment">## mermaid url https://github.com/knsv/mermaid</span></span><br><span class="line">enable: true  </span><br><span class="line"><span class="comment"># default true</span></span><br><span class="line">version: <span class="string">&quot;7.1.2&quot;</span></span><br><span class="line"><span class="comment"># default v7.1.2</span></span><br><span class="line">options:  </span><br></pre></td></tr></table></figure></p><ol><li>下载mermaid</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><ol><li>找到Wikitten下layout下 common/footer.ejs ,替换如下代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer id=<span class="string">&quot;footer&quot;</span>&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.mermaid.enable) &#123; %&gt;</span><br><span class="line">        &lt;script src=<span class="string">&#x27;https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="keyword">if</span> (window.mermaid) &#123;</span><br><span class="line">                mermaid.initialize(&#123;</span><br><span class="line">                    theme: <span class="string">&#x27;forest&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;outer&quot;</span>&gt;</span><br><span class="line">                &lt;div id=<span class="string">&quot;footer-info&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;inner&quot;</span>&gt;</span><br><span class="line">                    &lt;%= config.author || config.title %&gt; &amp;copy;</span><br><span class="line">                        &lt;%= date(<span class="keyword">new</span> Date(), <span class="string">&#x27;YYYY&#x27;</span>) %&gt;</span><br><span class="line">                            &lt;a rel=<span class="string">&quot;license&quot;</span> href=<span class="string">&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;</span>&gt;&lt;img alt=<span class="string">&quot;Creative Commons License&quot;</span> style=<span class="string">&quot;border-width:0&quot;</span> src=<span class="string">&quot;https://i.creativecommons.org/l/by-nc-nd/4.0/80x15.png&quot;</span> /&gt;&lt;/a&gt;</span><br><span class="line">                            &lt;br&gt; Powered by &lt;a href=<span class="string">&quot;http://hexo.io/&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;Hexo&lt;/a&gt;. Theme - &lt;a href=<span class="string">&quot;https://github.com/zthxxx/hexo-theme-Wikitten&quot;</span>&gt;wikitten&lt;/a&gt;</span><br><span class="line">                            &lt;% <span class="keyword">if</span> (theme.plugins.busuanzi_count) &#123; %&gt;</span><br><span class="line">                                &lt;br&gt;</span><br><span class="line">                                &lt;span id=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;&lt;/i&gt; &lt;span id=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">                                &amp;nbsp;|&amp;nbsp;</span><br><span class="line">                                &lt;span id=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fa fa-user&quot;</span>&gt;&lt;/i&gt; &lt;span id=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">                                &lt;% &#125; %&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h3 id="解决Wiki无法渲染数学公式的问题"><a href="#解决Wiki无法渲染数学公式的问题" class="headerlink" title="解决Wiki无法渲染数学公式的问题"></a>解决Wiki无法渲染数学公式的问题</h3><ol><li>执行下列指令</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ol><li>找到../node_modules/kramed/lib/rules/inline.js</li></ol><p>修改如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,      第11行，将其修改为</span></span><br><span class="line">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br><span class="line"><span class="comment">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,    第20行，将其修改为</span></span><br><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></p><ol><li>对需要使用MathJax公式的文章，修改文章标签,增加mathjax: true</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">mathjax: <span class="keyword">true</span></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何解决wiki中图片显示不全&quot;&gt;&lt;a href=&quot;#如何解决wiki中图片显示不全&quot; class=&quot;headerlink&quot; title=&quot;如何解决wiki中图片显示不全&quot;&gt;&lt;/a&gt;如何解决wiki中图片显示不全&lt;/h3&gt;&lt;p&gt;只需要把图片放在images文件夹下
      
    
    </summary>
    
      <category term="软件配置" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
      <category term="hexo" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/hexo/"/>
    
    
      <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
      <category term="bug" scheme="http://example.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow2笔记-LeNet(经典卷积网络)</title>
    <link href="http://example.com/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Tensorflow%E7%AC%94%E8%AE%B0/%E7%BB%8F%E5%85%B8%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/wiki/机器学习/Tensorflow笔记/经典卷积网络/</id>
    <published>2021-11-01T02:11:58.082Z</published>
    <updated>2021-11-02T02:56:20.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这里主要介绍卷积神经网络的经典网络，然后通过tensorflow进行实现（以上章的卷积神经网络实现代码为基础，进行实现）。</p><p>统计卷积网络神经网络层数一般只统计卷积计算层和全连接计算层。</p><blockquote><p>ImageNet</p></blockquote><p>ImageNet 是一个计算机视觉系统识别项目,是目前世界上图像识别最大的数据库。是美国斯坦福的计算机科学家，模拟人类的识别系统建立的。能够从图片识别物体。ImageNet是一个非常有前景的研究项目，未来用在机器人身上，就可以直接辨认物品和人了。</p><h3 id="经典卷积网络"><a href="#经典卷积网络" class="headerlink" title="经典卷积网络"></a>经典卷积网络</h3><pre class="mermaid">   graph LR    A(LeNet 1998) --> B(AlexNet 2012)    B --> C(VGGNet 2014)     C --> D(Inception Net 2014)     D --> E(ResNet 2015)</pre><h4 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h4><p>由Yann LeCun于1998年提出，卷积网络开篇之作。通过共享卷积核减少了网络的参数。LeNet如下所示(C5画错了是F5)</p><p><img src="/images/LeNet.PNG" alt="aaa"></p><p>LeNet提出的时候还没提出BN和Dropout层，所以LeNet网络不具有BN和Dropout层。</p><p>根据上图实现LeNet代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLeNet</span>(<span class="params">Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyLeNet, self).__init__()</span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">6</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters=<span class="number">16</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.p2 = MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.f1 = Dense(<span class="number">120</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.f2 = Dense(<span class="number">84</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">        self.f3 = Dense(<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        x = self.c2(x)</span><br><span class="line">        x = self.p2(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取的特征作为神经网络的输入特征</span></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.f1(x)</span><br><span class="line">        x = self.f2(x)</span><br><span class="line">        y = self.f3(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><h4 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h4><p>AlexNet网络诞生于2012年，是Hinton代表作之一。使用relu激活函数，提升训练速度，使用Dropout缓解过拟合。<br><img src="/images/AlexNet.PNG" alt="a2"><br>AlexNet实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlexNet</span>(<span class="params">Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(AlexNet, self).__init__()</span><br><span class="line">        <span class="comment"># 第一层</span></span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">96</span>,kernel_size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">3</span>,<span class="number">3</span>),strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#第二层</span></span><br><span class="line">        self.c2 = Conv2D(filters=<span class="number">256</span>,kernel_size=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">        self.b2 = BatchNormalization()</span><br><span class="line">        self.a2 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p2 = MaxPool2D(pool_size=(<span class="number">3</span>,<span class="number">3</span>),strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#第三层</span></span><br><span class="line">        self.c3 = Conv2D(filters=<span class="number">384</span>,kernel_size=(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#第四层</span></span><br><span class="line">        self.c4 = Conv2D(filters=<span class="number">384</span>,kernel_size=(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#第五层</span></span><br><span class="line">        self.c5 = Conv2D(filters=<span class="number">256</span>,kernel_size=(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p3 = MaxPool2D(pool_size=(<span class="number">3</span>,<span class="number">3</span>),strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#神经网络计算层</span></span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.f1 = Dense(<span class="number">2048</span>,activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d1 = Dropout(<span class="number">0.5</span>)</span><br><span class="line">        self.f2 = Dense(<span class="number">84</span>,activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d1 = Dropout(<span class="number">0.5</span>)</span><br><span class="line">        self.f3 = Dense(<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line"></span><br><span class="line">        x = self.c2(x)</span><br><span class="line">        x = self.b2(x)</span><br><span class="line">        x = self.a2(x)</span><br><span class="line">        x = self.p2(x)</span><br><span class="line"></span><br><span class="line">        x = self.c3(x)</span><br><span class="line"></span><br><span class="line">        x = self.c4(x)</span><br><span class="line"></span><br><span class="line">        x = self.c5(x)</span><br><span class="line">        x = self.p3(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取的特征作为神经网络的输入特征</span></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.f1(x)</span><br><span class="line">        x = self.d1(x)</span><br><span class="line">        x = self.f2(x)</span><br><span class="line">        x = self.d2(x)</span><br><span class="line">        y = self.f3(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><h4 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a>VGGNet</h4><p>CGGNet诞生于2014年，当年ImageNet竞赛的亚军。使用小尺寸卷积核，在减少的参数的同时，提高了识别准确率。VGGNet网络结构框图如下所示。<br><img src="/images/VGGnet.PNG" alt="a3"></p><p>VGGNet的网络结构是：两次CBA，CBAPD，三次CBA , CBA,CBAPD。<br>实现代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGGNet</span>(<span class="params">Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(VGGNet, self).__init__()</span><br><span class="line">        <span class="comment"># 首先重复两次CBA CBAPD</span></span><br><span class="line">        <span class="comment">#1</span></span><br><span class="line">        self.c1 = Conv2D(filters=<span class="number">64</span>,kernel_size=(<span class="number">3</span>,<span class="number">3</span>),padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b2 = BatchNormalization()</span><br><span class="line">        self.a2 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p1 = MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="number">2</span>,padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d1 = Dropout(<span class="number">0.2</span>)</span><br><span class="line">        <span class="comment">#2</span></span><br><span class="line">        self.c3 = Conv2D(filters=<span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b3 = BatchNormalization()</span><br><span class="line">        self.a3 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c4 = Conv2D(filters=<span class="number">128</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b4 = BatchNormalization()</span><br><span class="line">        self.a4 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p2 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d2 = Dropout(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 再重复三次 CBA CBA CBAPD</span></span><br><span class="line">        <span class="comment"># 1</span></span><br><span class="line">        self.c5 = Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b5 = BatchNormalization()</span><br><span class="line">        self.a5 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c6 = Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b6 = BatchNormalization()</span><br><span class="line">        self.a6 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c7 = Conv2D(filters=<span class="number">256</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b7 = BatchNormalization()</span><br><span class="line">        self.a7 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p3 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d3 = Dropout(<span class="number">0.2</span>)</span><br><span class="line">        <span class="comment"># 2</span></span><br><span class="line">        self.c8 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b8 = BatchNormalization()</span><br><span class="line">        self.a8 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c9 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b9 = BatchNormalization()</span><br><span class="line">        self.a9 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c10 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b10 = BatchNormalization()</span><br><span class="line">        self.a10 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p4 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d4 = Dropout(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3</span></span><br><span class="line">        self.c11 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b11 = BatchNormalization()</span><br><span class="line">        self.a11 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c12 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b12 = BatchNormalization()</span><br><span class="line">        self.a12 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c13 = Conv2D(filters=<span class="number">512</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.b13 = BatchNormalization()</span><br><span class="line">        self.a13 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.p5 = MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.d5 = Dropout(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 三个全连接层</span></span><br><span class="line">        self.flatten = Flatten()</span><br><span class="line">        self.f1 = Dense(<span class="number">512</span>,activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d6 = Dropout(<span class="number">0.2</span>)</span><br><span class="line">        self.f2 = Dense(<span class="number">512</span>,activation=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.d6 = Dropout(<span class="number">0.2</span>)</span><br><span class="line">        self.f3 = Dense(<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        <span class="comment"># 两次CBA CBAPD</span></span><br><span class="line">        <span class="comment">#1</span></span><br><span class="line">        x = self.c1(x)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line"></span><br><span class="line">        x = self.c2(x)</span><br><span class="line">        x = self.b2(x)</span><br><span class="line">        x = self.a2(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        x = self.d1(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#2</span></span><br><span class="line">        x = self.c3(x)</span><br><span class="line">        x = self.b3(x)</span><br><span class="line">        x = self.a3(x)</span><br><span class="line"></span><br><span class="line">        x = self.c4(x)</span><br><span class="line">        x = self.b4(x)</span><br><span class="line">        x = self.a4(x)</span><br><span class="line">        x = self.p2(x)</span><br><span class="line">        x = self.d2(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#三次 CBA CBA CBAPD</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1</span></span><br><span class="line">        x = self.c5(x)</span><br><span class="line">        x = self.b5(x)</span><br><span class="line">        x = self.a5(x)</span><br><span class="line"></span><br><span class="line">        x = self.c6(x)</span><br><span class="line">        x = self.b6(x)</span><br><span class="line">        x = self.a6(x)</span><br><span class="line"></span><br><span class="line">        x = self.c7(x)</span><br><span class="line">        x = self.b7(x)</span><br><span class="line">        x = self.a7(x)</span><br><span class="line">        x = self.p3(x)</span><br><span class="line">        x = self.d3(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2</span></span><br><span class="line">        x = self.c8(x)</span><br><span class="line">        x = self.b8(x)</span><br><span class="line">        x = self.a8(x)</span><br><span class="line"></span><br><span class="line">        x = self.c9(x)</span><br><span class="line">        x = self.b9(x)</span><br><span class="line">        x = self.a9(x)</span><br><span class="line"></span><br><span class="line">        x = self.c10(x)</span><br><span class="line">        x = self.b10(x)</span><br><span class="line">        x = self.a10(x)</span><br><span class="line">        x = self.p4(x)</span><br><span class="line">        x = self.d4(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">        x = self.c11(x)</span><br><span class="line">        x = self.b11(x)</span><br><span class="line">        x = self.a11(x)</span><br><span class="line"></span><br><span class="line">        x = self.c12(x)</span><br><span class="line">        x = self.b12(x)</span><br><span class="line">        x = self.a12(x)</span><br><span class="line"></span><br><span class="line">        x = self.c13(x)</span><br><span class="line">        x = self.b13(x)</span><br><span class="line">        x = self.a13(x)</span><br><span class="line">        x = self.p5(x)</span><br><span class="line">        x = self.d5(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取的特征作为神经网络的输入特征</span></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.f1(x)</span><br><span class="line">        x = self.d5(x)</span><br><span class="line">        x = self.f2(x)</span><br><span class="line">        x = self.d6(x)</span><br><span class="line">        y = self.f3(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure></p><h4 id="Inception-Net"><a href="#Inception-Net" class="headerlink" title="Inception Net"></a>Inception Net</h4><p>InceptionNet诞生于2014年。当年ImageNet冠军。Inception引入了Inception结构快。<br>同一层网络使用不同尺寸的卷积核，提升了模型感知力，使用了批标准化，缓解了梯度消失。</p><blockquote><p>Inception结构快如图所示</p></blockquote><p><img src="/images/inter.PNG" alt="a14"></p><p>从图中可以看出，Inception包含四个卷积过程，分成四个不同的卷积核进行卷积操作。</p><blockquote><ol><li>1×1的卷积核</li><li>1×1的卷积核+3×3的卷积核</li><li>1×1的卷积核+5×5的卷积核</li><li>3×3的最大池+1×1的卷积核</li><li>最后将四个部分的输出结果，按照深度方向堆叠在一起，作为一个Inception结构快输出。</li></ol></blockquote><h4 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h4><p>ResNet（何凯明）于2015年提出，是当时的ImageNet竞赛冠军。ResNet提出了层间残差跳连，引入了前方信息，缓解梯度消失，使神经网络层数增加称为可能。</p><blockquote><p>单纯堆叠神经网络层数，会使神经网络模型退化，以致于后面的特征丢失了前边特征的原本模样。</p></blockquote><p>ResNet块的结构如下所示：<br><img src="/images/ResNet块.PNG" alt="ar"></p><p>ResNet的输出值包括两部分组成，一部分是由卷积过程提取出的特征输出F(x)，另一部分是直接由输入X得到的恒等映射X组成。将F(x)和x的对应元素相加得到输出特征H(x)。这样可以缓解神经网络堆叠导致的退化。使得神经网络层数增加称为可能。</p><p>对于X到跳过卷积层直接到输出特征有两种处理方式。</p><p><img src="/images/两种ResNet块.PNG" alt="ar1"></p><blockquote><ol><li>不做任何处理<br>H(x) = F(x) + x<br>由于不做任何处理，所以维度没有改变。</li><li>通过函数W(x)进行处理，其中W是1×1的卷积操作，用于调整X的维度。<br>H(x) = F(x) + W(x)<br>其中通过卷积步长可以改变输出特征图尺寸，通过卷积核的个数可以改变特征图的深度（类似Inception结构，多个卷积核，该变深度）。</li></ol></blockquote><p>ResNet网络结构如下所示：</p><p><img src="/images/ResNet.PNG" alt="ar1"></p><p>实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResentBlock</span>(<span class="params">Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,filters,strides=<span class="number">1</span>,residual_path=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResentBlock, self).__init__()</span><br><span class="line">        self.filters = filters</span><br><span class="line">        self.strides = strides</span><br><span class="line">        self.residual_path = residual_path</span><br><span class="line"></span><br><span class="line">        self.c1 = Conv2D(filters,(<span class="number">3</span>,<span class="number">3</span>),strides=strides,padding=<span class="string">&#x27;same&#x27;</span>,use_bias=<span class="literal">False</span>)</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.c2 = Conv2D(filters,(<span class="number">3</span>,<span class="number">3</span>),strides=<span class="number">1</span>,padding=<span class="string">&#x27;same&#x27;</span>,use_bias=<span class="literal">False</span>)</span><br><span class="line">        self.b2 = BatchNormalization()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#fesiders_path 为True时候，对输入进行采样，都用1×1的卷积核做卷积操作，保证x能和F(x)维度相同，顺利相加</span></span><br><span class="line">        <span class="keyword">if</span> residual_path:</span><br><span class="line">            self.down_c1 = Conv2D(filters,(<span class="number">1</span>,<span class="number">1</span>),strides=strides,padding=<span class="string">&#x27;same&#x27;</span>,use_bias=<span class="literal">False</span>)</span><br><span class="line">            self.down_b1 = BatchNormalization()</span><br><span class="line">        self.a2 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,inputs</span>):</span></span><br><span class="line">        residual = inputs <span class="comment"># residual等于输入本身</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#将输入通过卷积层，BN层，激活层计算F(x)</span></span><br><span class="line">        x = self.c1(inputs)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line"></span><br><span class="line">        x = self.c2(x)</span><br><span class="line">        y = self.b2(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.residual_path:</span><br><span class="line">            residual = self.down_c1(inputs)</span><br><span class="line">            residual = self.down_b1(residual)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最后输出是两部分的和，即F(x)+x或F(x)+W(x),然后再过激活函数。</span></span><br><span class="line">        out = self.a2(y + residual)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由一层卷积网络+八个ResNet块组成</span></span><br><span class="line"><span class="comment"># 神经网络由一个全连接层构成</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet</span>(<span class="params">Model</span>):</span></span><br><span class="line">    <span class="comment"># block_list表示每个block有几个卷积层</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,block_list,initial_filters=<span class="number">64</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet, self).__init__()</span><br><span class="line">        self.num_blocks = <span class="built_in">len</span>(block_list)</span><br><span class="line">        self.block_list = block_list</span><br><span class="line">        self.out_filters = initial_filters</span><br><span class="line">        <span class="comment"># 对应图中第一个卷几层</span></span><br><span class="line">        self.c1 = Conv2D(self.out_filters,(<span class="number">3</span>,<span class="number">3</span>),strides=<span class="number">1</span>,padding=<span class="string">&#x27;same&#x27;</span>,use_bias=<span class="literal">False</span>,kernel_initializer=<span class="string">&#x27;he_normal&#x27;</span>)</span><br><span class="line">        self.b1 = BatchNormalization()</span><br><span class="line">        self.a1 = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.blocks = tf.keras.models.Sequential()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对应图中的八个ResNet块</span></span><br><span class="line">        <span class="comment">#构建ResNet网络结构 4*2 = 8</span></span><br><span class="line">        <span class="keyword">for</span> block_id <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block_list)):<span class="comment">#第几个resnet block</span></span><br><span class="line">            <span class="keyword">for</span> layer_id <span class="keyword">in</span> <span class="built_in">range</span>(block_list[block_id]):<span class="comment"># 第几个卷层</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> block_id != <span class="number">0</span> <span class="keyword">and</span> layer_id == <span class="number">0</span> : <span class="comment">#对除第一个block以外的每个Block的输入进行采样</span></span><br><span class="line">                    block = ResentBlock(self.out_filters,strides=<span class="number">2</span>,residual_path=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    block = ResentBlock(self.out_filters,residual_path=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">                self.blocks.add(block)  <span class="comment"># 将构建好的blcok加入到renset</span></span><br><span class="line">            self.out_filters *=<span class="number">2</span>  <span class="comment">#下一个block卷积核数是上一个block的两倍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 平均池</span></span><br><span class="line">        self.p1 = tf.keras.layers.GlobalAveragePooling2D()</span><br><span class="line">        <span class="comment"># 全连接层</span></span><br><span class="line">        self.f1 = tf.keras.layers.Dense(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,inputs</span>):</span></span><br><span class="line">        x = self.c1(inputs)</span><br><span class="line">        x = self.b1(x)</span><br><span class="line">        x = self.a1(x)</span><br><span class="line">        x = self.blocks(x)</span><br><span class="line">        x = self.p1(x)</span><br><span class="line">        y = self.f1(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">model = ResNet([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>LeNet<br>通过共享卷积核，减少网络参数</li><li>AlexNet<br> 通过使用relu激活函数，提升训练速度。<br> 使用Dropout缓解过拟合。</li><li>VGGNet<br> 小尺寸卷积核减少参数，网络结构规整，适合并行加速。</li><li>InceptionNet<br> 一层内使用不同尺寸卷积核，提升感知力。使用批标准化，缓解梯度消失。</li><li>ResNet<br> 层间残差跳连，引入前方信息，缓解模型退化，使神经网络层数加深成为可能。</li></ol><blockquote><p>训练优化</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;一些训练方法和超参数的设定对模型训练结果的影响是相当显著的，如数据增强（对训练集图像进行旋转、偏移、翻转等多种操作，目的是增强训练集的随机性）、学习率策略（一般的策略是在训练过程中逐步减小学习率）、Batch size 的大小设置（每个 batch 包含训练集图片的数量）、模型参数初始化的方式等等。。所以，在神经网络的训练中，除了选择合适的模型以外，如何更好地训练一个模型也是一个非常值得探究的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;这里主要介绍卷积神经网络的经典网络，然后通过tensorflow进行实现（以上章的卷积神经网络实现代码为基础，进行实现）。&lt;/p&gt;
&lt;p&gt;统
      
    
    </summary>
    
      <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow2" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/TensorFlow2/"/>
    
    
      <category term="TensorFlow2" scheme="http://example.com/tags/TensorFlow2/"/>
    
      <category term="CNN" scheme="http://example.com/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow2笔记-NN(全连接)</title>
    <link href="http://example.com/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Tensorflow%E7%AC%94%E8%AE%B0/NN/"/>
    <id>http://example.com/wiki/机器学习/Tensorflow笔记/NN/</id>
    <published>2021-10-29T06:05:38.694Z</published>
    <updated>2021-10-29T06:12:34.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>全连接NN：每个神经元与前后相邻层的每一个神经元都有连接关系，输入是特征，输出为预测的结果。<br>（可以类比于满射，前后层神经元之间都有联系）</p><blockquote><p>参数个数</p></blockquote><p>参数个数=$\displaystyle \sum^{}_{各层}{前层*后层(w)+后层(b)}$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;全连接NN：每个神经元与前后相邻层的每一个神经元都有连接关系，输入是特征，输出为预测的结果。&lt;br&gt;（可以类比于满射，前后层神经元之间都有联
      
    
    </summary>
    
      <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow2" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/TensorFlow2/"/>
    
    
      <category term="TensorFlow2" scheme="http://example.com/tags/TensorFlow2/"/>
    
      <category term="CNN" scheme="http://example.com/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow2笔记-第四讲(网络八股扩展)</title>
    <link href="http://example.com/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Tensorflow%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%9B%9B%E8%AE%B2-%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%89%A9%E5%B1%95/"/>
    <id>http://example.com/wiki/机器学习/Tensorflow笔记/第四讲-网络八股扩展/</id>
    <published>2021-10-29T06:00:43.670Z</published>
    <updated>2021-10-29T06:01:12.943Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow2" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/TensorFlow2/"/>
    
    
      <category term="TensorFlow2" scheme="http://example.com/tags/TensorFlow2/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow2笔记-CNN(卷积神经网络)</title>
    <link href="http://example.com/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Tensorflow%E7%AC%94%E8%AE%B0/CNN/"/>
    <id>http://example.com/wiki/机器学习/Tensorflow笔记/CNN/</id>
    <published>2021-10-29T04:44:21.509Z</published>
    <updated>2021-11-01T08:56:31.980Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/多通道计算.PNG" alt="aaa"></p><h3 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h3><p>如果仅仅依靠全连接神经网络来训练模型，则在实际应用中，输入特征会非常多，参数十分复杂，让训练变得非常庞大。所以在实际应用时，会对原始图像进行特征提取再把提取到的特征送给全连接网络。流程如下所示：</p><pre class="mermaid">    graph LR        原始图片 --> 若干层特征提取        若干层特征提取 --> 全连接网络</pre><p>卷积计算是一种提取图片特征的有效方法。</p><h3 id="卷积计算过程"><a href="#卷积计算过程" class="headerlink" title="卷积计算过程"></a>卷积计算过程</h3><blockquote><blockquote><p>单通道卷积计算<br><img src="/images/卷积计算过程.PNG" alt="aaa"></p></blockquote><p>从上图可以看出,卷积神经网络计算的过程实际上就是将大的数据，根据区域提取其相关特征，减少了特征数目。从 5x5x1 的参数，经过 3x3x1的卷积核卷积计算后，转化为3x3x1的参数网络。<br>&gt;</p><blockquote><p>多通道卷积计算<br><img src="/images/多通道计算.PNG" alt="bb"><br>从图中可以看出，对于输入特征是多通道的，每个通道都通过卷积层计算相应的调整值。从图片看从5×5×3经过3×3×3的卷积核计算，对每个通道的重合区域，经过对应通道 的卷积核计算的结果作为输出调整图中的一个像素点。</p></blockquote><p>总结<br>对于卷积神经网络的计算过程，就是从左到右，从上到下，根据卷积核重叠的区域，依次计算结果，作为输出特征图的一个像素点。</p></blockquote><h3 id="用CNN实现离散数据的分类-以图像分类为例"><a href="#用CNN实现离散数据的分类-以图像分类为例" class="headerlink" title="用CNN实现离散数据的分类(以图像分类为例)"></a>用CNN实现离散数据的分类(以图像分类为例)</h3><h4 id="1-感受野-Receptive-Field"><a href="#1-感受野-Receptive-Field" class="headerlink" title="1. 感受野(Receptive Field)"></a>1. 感受野(Receptive Field)</h4><p>感受野：卷积神经网络各输出特征图中的每个像素点，在原始输入图片上映射区域的大小。</p><p>这里可以参考一下卷积神经网络的计算过程中，5×5×1 经过 3×3×1 卷积后得到一张3×3的特征图，那么最终3×3特征图中的一个像素点所对应在5×5×1输入特征图的区域大小，（大小只取正方形区域边的大小），称之为感受野，从图上可以看出对应的感受野为3。</p><blockquote><p>如果输出特征图的感受野都是一样的,但是选取的卷积核不一样（如刚刚的5×5×1的输入特征可以经过两层3×3×1的卷积核得到1的输出特征图，同样可以经过一层5×5×1的卷积核得到1的输出特征图，二者的感受野都是5）。</p></blockquote><p>这里就需要考虑选取不同的卷积核所带来的计算代价，计算越少越好。<br><img src="/images/选取卷积核.PNG" alt="ccc"></p><blockquote><p>对计算量的计算步骤，以两层3×3×1为例，对于输入特征图经过第一层卷积核的计算量-&gt;首先每次计算共有9次乘法运算，卷积核总共扫描的区域数很容易得出为(x-3+1)(x-3+1),总的计算数为9×(x-2)×(x-2)。同理经过第一层卷积核的输出特征图经过第二个卷积核的计算量为9×(x-2-3+1)×(x-2-3+1)。将两个卷积核计算量相加得到总的计算量：18$x^2$-108x+180</p></blockquote><h4 id="2-全零填充-Padding"><a href="#2-全零填充-Padding" class="headerlink" title="2. 全零填充(Padding)"></a>2. 全零填充(Padding)</h4><p>为了保证输入特征图的尺寸不变，通过0进行填充，在输入特征图周围填充0，如原来的5×5×1经过3×3×1后仍然还是5×5×1。</p><blockquote><p>填充公式(卷积输出特征图维度计算公式)</p></blockquote><script type="math/tex; mode=display">padding=\left\{     \begin{aligned}SAME(全0填充)\frac{入长}{步长} & ,(向上取整)    \\    VALID(不全0填充) \frac{入长-核长+1}{步长}&,(向上取整)    \end{aligned}    \right.</script><p>TF描述全0填充，用参数padding=’SAME’或padding=’VALID’表示。<br><img src="/images/零填充.PNG" alt="ccc"></p><h4 id="3-Tensorflow2描述卷积层"><a href="#3-Tensorflow2描述卷积层" class="headerlink" title="3. Tensorflow2描述卷积层"></a>3. Tensorflow2描述卷积层</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### TF描述卷积层的代码</span></span><br><span class="line"><span class="comment"># tf.keras.layers.Conv2D(</span></span><br><span class="line"><span class="comment">#     filters=卷积核个数,</span></span><br><span class="line"><span class="comment">#     kernel_size=卷积核尺寸,#正方形写核长整数,或（核高h,核宽w）</span></span><br><span class="line"><span class="comment">#     strides = 滑动步长,#横纵向相同写步长整数，或（纵向步长h，横向步长w）,默认1</span></span><br><span class="line"><span class="comment">#     padding = &quot;same&quot; or &quot;valid&quot;,#使用全0填充是same，不使用是valid(默认)</span></span><br><span class="line"><span class="comment">#     activation=&quot;relu&quot;or&quot;sigmoid&quot;or&quot;tanh&quot;or&quot;softmax&quot;等,#如有BN此处不写</span></span><br><span class="line"><span class="comment">#     input_shape=(高，宽，通道数) #输入特征图维度，可省略</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    Conv2D(<span class="number">6</span>,<span class="number">5</span>,padding=<span class="string">&#x27;valid&#x27;</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    MaxPool2D(<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">    Conv2D(<span class="number">6</span>,(<span class="number">5</span>,<span class="number">5</span>),padding=<span class="string">&#x27;valid&#x27;</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    MaxPool2D(<span class="number">2</span>,(<span class="number">2</span>,<span class="number">2</span>)),</span><br><span class="line">    Conv2D(filters=<span class="number">6</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),padding=<span class="string">&#x27;valid&#x27;</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="number">2</span>),</span><br><span class="line">    Flatten(),</span><br><span class="line">    Dense(<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="4-批标准化-Batch-Normalization-BN"><a href="#4-批标准化-Batch-Normalization-BN" class="headerlink" title="4. 批标准化(Batch Normalization , BN)"></a>4. 批标准化(Batch Normalization , BN)</h4><p>神经网络对0附件的数据更敏感。</p><p>标准化：使数据符合0均值，1为标准差的分布<br>批标准化：对一小批数据（batch），做标准化处理。<br>批标准化，第K个卷积核的输出特征图(feature map)中第i个像素点。</p><p><img src="/images/拟标准化.PNG" alt="a4"></p><blockquote><p>$H_{i}^{‘k}$ = $\frac{H_{i}^{k}-u_{batch}^{k}} {\sigma_{batch}^{k}}$<br>$H_{i}^{k}$：批标准化前，第K个卷积核，输出特征图中第i个像素点。<br>$u_{batch}^{k}$：批量化前，第k个卷积核，batch张输出特征图中所有像素点平均值。</p></blockquote><p>$u_{batch}^{k}$ = $\frac{1} {m} \displaystyle \sum^{m}_{i=1} H_{i}^{k}$</p><blockquote><p>$\sigma_{batch}^{k}$：批标准化前，第k个卷积核，batch张输出特征图中所有像素点标准差。</p></blockquote><p>$\sigma_{batch}^{k}$ = $\sqrt{\delta+\frac{1}{m}\displaystyle \sum^m_{i = 1}(H_i^k-u_{batch}^k)^2}$</p><p>通过BN操作，将数据标准化到0均值。如下图所示：<br><img src="/images/拟标准-1.PNG" alt="a41"></p><p>通过标准化使得输入特征的微小变化也能使得激活函数有明显的变化，提升激活函数对输入数据的区分力。</p><p>从图中可以看出，经过标准化的Sigmoid函数，特征数据$H_i^{‘k}$集中在0附近，但是从图中可以看出，Sigmoid函数在0区域附近的曲线接近线性函数，所以这样会导致激活函数的非线性特性丧失。为了解决这个问题，需要为每个卷积核引入可训练参数$\gamma$（缩放因子）和$\beta$（偏移因子）,用于调整归一化的力度,优化特征数据分布的宽窄和偏移量，保证了网络的非线性表达力。<br>调整后的数据$x_i^k$ = $\gamma_{k}H_{i}^{‘k}+\beta_k$。</p><p>从上面可以看出，BN层用于对数据的标准化处理，可以缓解梯度消失，所以BN层位于卷积层之后，激活层之前。</p><blockquote><p>TensorFlow描述批标准化的代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    TF通过tf.keras.layers.BatchhNormalization()描述BN层</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">   Conv2D(padding=<span class="string">&#x27;same&#x27;</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),filters=<span class="number">6</span>),</span><br><span class="line">    BatchNormalization(),<span class="comment">#BN层</span></span><br><span class="line">    Activation(<span class="string">&#x27;relu&#x27;</span>),<span class="comment">#激活层</span></span><br><span class="line">    MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="number">2</span>,padding=<span class="string">&#x27;same&#x27;</span>),</span><br><span class="line">    Dropout(<span class="number">0.2</span>),<span class="comment">#droupt层</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="5-池化-Pooling"><a href="#5-池化-Pooling" class="headerlink" title="5. 池化(Pooling)"></a>5. 池化(Pooling)</h3><p>池化用于减少特征数据量。池化包含最大值池化和均值池化。最大值池化可以提取图片纹理，均值池化可以保留背景特征。</p><p>两种池化的计算如下图所示。<br><img src="/images/Pooling.PNG" alt="a6"><br>用池大小为2×2，步长为2的池进行处理。<br>从图中可以看出二者的计算过程。</p><blockquote><p>最大值池化</p></blockquote><p>选择被池包含区域内最大的特征值作为输出结果。</p><blockquote><p>均值池化</p></blockquote><p>选择被池包含区域内特征值的平均值作为输出结果。</p><blockquote><p>TensorFlow描述池化的代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        tf.keras.MaxPool2D(</span></span><br><span class="line"><span class="string">            pool_size=池化核尺寸,#正方形写核长整数，或用元组给出核的高和宽(核高h,核宽w)</span></span><br><span class="line"><span class="string">            strides=池化步长,#步长整数，或(纵向步长h，横向步长w),默认为pool_size</span></span><br><span class="line"><span class="string">            padding=&#x27;valid&#x27;or&#x27;same&#x27;#q全0填充是same,否则是&#x27;valid</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">        tf.keras.AveragePooling2D(</span></span><br><span class="line"><span class="string">        pool_size=池化核尺寸,#正方形写核长整数，或用元组给出核的高和宽(核高h,核宽w)</span></span><br><span class="line"><span class="string">            strides=池化步长,#步长整数，或(纵向步长h，横向步长w),默认为pool_size</span></span><br><span class="line"><span class="string">            padding=&#x27;valid&#x27;or&#x27;same&#x27;#q全0填充是same,否则是&#x27;valid</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model = tf.keras.models.Sequential([</span><br><span class="line">        Conv2D(padding=<span class="string">&#x27;same&#x27;</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),filters=<span class="number">6</span>),<span class="comment">#卷积层</span></span><br><span class="line">        BatchNormalization(),<span class="comment">#BN层</span></span><br><span class="line">        Activation(<span class="string">&#x27;relu&#x27;</span>),<span class="comment">#激活层</span></span><br><span class="line">        MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="number">2</span>,padding=<span class="string">&#x27;same&#x27;</span>),<span class="comment">#池化层</span></span><br><span class="line">        Dropout(<span class="number">0.2</span>),<span class="comment">#droupt层</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="6-舍弃（Dropout）"><a href="#6-舍弃（Dropout）" class="headerlink" title="6. 舍弃（Dropout）"></a>6. 舍弃（Dropout）</h3><p>舍弃是为了缓解神经网络过拟合。舍弃也就是在神经网络训练的过程中，将一部分神经元按照一定概率从神经网络中暂时舍弃。神经网络使用时，被舍弃的神经元恢复链接。（也就是说在神经网络训练的过程中，一些神经元会被暂时踢出训练，等最后在加入到神经网络中。）。舍弃过程如图所示：<br><img src="/images/Dropout.PNG" alt="a7"></p><p>在训练的过程中，将一部分神经元暂时舍弃(类似于神经元死亡，也就是神经元的参数不再更新)。</p><blockquote><p>TensorFlow描述舍弃（Dropout）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    tf描述舍弃：tf.keras.layers.Dropout(舍弃的概率)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    model = tf.keras.models.Sequential([</span><br><span class="line">        Conv2D(padding=<span class="string">&#x27;same&#x27;</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),filters=<span class="number">6</span>),<span class="comment">#卷积层</span></span><br><span class="line">        BatchNormalization(),<span class="comment">#BN层</span></span><br><span class="line">        Activation(<span class="string">&#x27;relu&#x27;</span>),<span class="comment">#激活层</span></span><br><span class="line">        MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=<span class="number">2</span>,padding=<span class="string">&#x27;same&#x27;</span>),<span class="comment">#池化层</span></span><br><span class="line">        Dropout(<span class="number">0.2</span>),<span class="comment">#droupt层，随机舍弃掉20%的神经元</span></span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><p>从上面介绍可以看出，卷积的过程就是对特征值的特征进行提取，来减少特征值的数量（卷积，池化）。通过用一个输出像素点来反映一块区域内像素点的特征。通过这样的方式有效的减少了特征值的数量。</p><blockquote><p>卷积神经网络的主要组成模块,卷积层，BN层，激活层，池化层,舍弃层(dropout层)，全连接层（Fully Connected）。<br>卷积层，BN层，激活层，池化层这四层用于对输入特征进行特征提取。</p></blockquote><pre class="mermaid">    graph LR        A("卷积&#40;Convolutional&#41;") --> B("批标准化&#40;BN&#41;")         B --> C("激活&#40;Activation&#41;")         C --> D("池化&#40;Pooling&#41;")         D --> F("舍弃层&#40;Dropout&#41;")        F --> E("全连接&#40;FC&#41;")</pre><blockquote><p>卷积是什么？</p></blockquote><p>卷积就是<font color=red>特征提取器</font>,就是CBAPD(D表示的是舍弃，Dropout)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/多通道计算.PNG&quot; alt=&quot;aaa&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h3&gt;&lt;p&gt;如果仅仅依靠全连接神经网络来训
      
    
    </summary>
    
      <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow2" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/TensorFlow2/"/>
    
    
      <category term="TensorFlow2" scheme="http://example.com/tags/TensorFlow2/"/>
    
      <category term="CNN" scheme="http://example.com/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://example.com/wiki/%E7%AE%97%E6%B3%95/Leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP/"/>
    <id>http://example.com/wiki/算法/Leetcode/字符串/KMP/</id>
    <published>2021-10-28T09:15:08.580Z</published>
    <updated>2021-11-15T00:55:53.024Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-问题描述">1. 问题描述</a></li><li><a href="#2-解题思路">2. 解题思路</a></li></ul><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>今天的问题很简单，就是给定两个字符串text和pattern，让你找出在text中是否存在一个序列等于pattern,如果存在就返回true,如果不存在就返回false 。</p><h3 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h3><p>从题目描述上来看，很容易看出这题目是关于字符串匹配的问题，也就是从一段文本中，找出某个模式的全部出现位置的问题。</p><blockquote><ol><li>朴素的字符串匹配算法</li></ol></blockquote><p>用一个循环找出所有有效位移，对text每个字符进行检测，然后匹配pattern，如果匹配成功就返回下标。如果失败，就移动text下一个位置，重复操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len_h , len_s , i , j = <span class="number">0</span> ;</span><br><span class="line">        len_s = needle.length() ;</span><br><span class="line">        <span class="keyword">if</span>(len_s == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">        len_h = haystack.length() ;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt;= len_h - len_s ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(haystack.charAt(i)==needle.charAt(j))&#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;len_s;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(haystack.charAt(i+j)!=needle.charAt(j))</span><br><span class="line">                        <span class="keyword">break</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=len_s)</span><br><span class="line">                    <span class="keyword">return</span> i ;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    j = <span class="number">0</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><ol><li>KMP算法</li></ol></blockquote><p>KMP算法的巧妙之处就是利用已经匹配字符串来确定下一次匹配开始的位置。这就是和朴素字符串匹配算法的区别，朴素字符串匹配算法每次匹配完毕之后，只是从下一个字符开始进行匹配，那么就浪费了已经匹配过字符串的有效信息，所以造成时间上的浪费。如何确定下一字符开始匹配的位置呢？假设已经匹配模式串pattern的位置为j,也就是从text的位置i开始 text[i…..,i+j] = pattern[0……,0+j]</p><blockquote><p>KMP算法的前缀函数(next)</p></blockquote><p>前缀函数 $\pi$(i)(0 $\leq$ i &lt; m)表示s 的子串 s[0:i] 的最长的相等的真前缀与真后缀的长度。特别地，如果不存在符合条件的前后缀，那么 $\pi$(i) = 0。其中真前缀与真后缀的定义为不等于自身的的前缀与后缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求解字符前缀函数</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment"> public int[] getNext(String s)&#123;</span></span><br><span class="line"><span class="comment">        int len , k ,q ;</span></span><br><span class="line"><span class="comment">        len = s.length() ;</span></span><br><span class="line"><span class="comment">        int[] next = new int[len];</span></span><br><span class="line"><span class="comment">        next[0] = 0 ;</span></span><br><span class="line"><span class="comment">        for(q = 1,k=0 ; q&lt; len ; q++)&#123;  //长字符串的前缀建立在短字符前缀的匹配上。</span></span><br><span class="line"><span class="comment">            while (k&gt;0&amp;&amp;s.charAt(k)!=s.charAt(q))&#123;</span></span><br><span class="line"><span class="comment">                    k = next[k-1] ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(s.charAt(q) == s.charAt(k))&#123;</span></span><br><span class="line"><span class="comment">                k = k+1 ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            next[q] = k ;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return next ;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过前缀函数进行字符串的匹配</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment">    public int Matcher(String t , String p )&#123;</span></span><br><span class="line"><span class="comment">        int   q , i;</span></span><br><span class="line"><span class="comment">        int n = t.length(), m = p.length();</span></span><br><span class="line"><span class="comment">        if (m == 0) &#123;</span></span><br><span class="line"><span class="comment">            return 0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        int[] next = getNext(p) ;</span></span><br><span class="line"><span class="comment">        q = 0 ;</span></span><br><span class="line"><span class="comment">        for(i = 0 ,q=0; i &lt; n ;i++)&#123;</span></span><br><span class="line"><span class="comment">            while(q&gt;0&amp;&amp;p.charAt(q)!=t.charAt(i))&#123;  //如果不匹配则移动到下一个位置</span></span><br><span class="line"><span class="comment">                q = next[q-1] ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(p.charAt(q) == t.charAt(i))&#123;</span></span><br><span class="line"><span class="comment">                q = q+1 ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(q == m)&#123;</span></span><br><span class="line"><span class="comment">                return i-m+1 ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return -1 ;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><blockquote><p>个人总结</p></blockquote><p>KMP算法主要在于计算前缀函数next，前缀函数的计算依据最长相同前后缀长度为依据来计算。通过next来获取到移动的位置。</p><p>对于next前缀函数的计算过程，patten(q) 和 patten(k) 不等说明了，在前一个（q-1）的最长前后缀匹配的位置，增加一个text(q)后，patten[0-&gt;next(q-1),next(q-1)+1] 和patten[(q-1)-next(q-1)-&gt;q]并不相等(因为新增的最后一个字符和前一个patten(q-1)字符串的最长前后缀并不相等)，所以需要进一步比较next[next(q-1)] 是否满足，patten[0-&gt;k+1] == patten[k-q,q] , 如果相等，则另k+1 , next[q] = k 。<br><img src="/images/时间复杂度.PNG" alt="a6"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-问题描述&quot;&gt;1. 问题描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-解题思路&quot;&gt;2. 解题思路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="经典算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>48.旋转数组</title>
    <link href="http://example.com/wiki/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>http://example.com/wiki/算法/Leetcode/链表/19.删除链表的倒数第N个结点/</id>
    <published>2021-10-28T08:36:32.058Z</published>
    <updated>2021-10-28T08:48:47.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。(进阶：你能尝试使用一趟扫描实现吗？)</p><blockquote><p>示例 1：</p></blockquote><pre><code>输入：head = [1,2,3,4,5], n = 2输出：[1,2,3,5]</code></pre><blockquote><p>示例 2：</p></blockquote><pre><code>输入：head = [1], n = 1输出：[]</code></pre><blockquote><p>示例 3：</p></blockquote><pre><code>输入：head = [1,2], n = 1输出：[1]</code></pre><h3 id="解法思路"><a href="#解法思路" class="headerlink" title="解法思路"></a>解法思路</h3><p>从题目分析，我们需要删除链表的倒数第N个结点，那么我们就必须知道哪个结点是倒数第N个结点。确定一个结点在列表中的位置大概有如下几种方法。</p><blockquote><p>方法一</p></blockquote><p>先确定整个列表的长度，然后就能够确定结点所在的位置(可以通过堆栈或者数组存放数据元素，通过数组有利于操作)。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;ListNode&gt; listNodes = <span class="keyword">new</span> ArrayList&lt;&gt;()  ;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">if</span>(head.next==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            len++ ;</span><br><span class="line">            listNodes.add(head) ;</span><br><span class="line">            head = head.next ;</span><br><span class="line">        &#125;</span><br><span class="line">        listNodes.add(head) ; </span><br><span class="line">        <span class="keyword">if</span>(len-n-<span class="number">1</span>&lt;<span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> listNodes.get(<span class="number">1</span>) ;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            listNodes.get(len-n-<span class="number">1</span>).next = listNodes.get(len-n).next ;</span><br><span class="line">            <span class="keyword">return</span> listNodes.get(<span class="number">0</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法二</p></blockquote><p>通过快慢指针法，让一个指针永远比当前指针快n个元素，那么当快指针到达末尾的时候，就能够确定倒数第N个元素。示例代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode p , q , pre ;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        p = head ; <span class="comment">// 快指针</span></span><br><span class="line">        q = head ;<span class="comment">// 慢指针</span></span><br><span class="line">        pre = q ; <span class="comment">//用于记录q的前一个元素，有利于元素的删除</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; n ; i++) <span class="comment">//让p比q快n个元素</span></span><br><span class="line">            p = p.next ;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            p = p.next ;</span><br><span class="line">            pre = q ;</span><br><span class="line">            q = q.next ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre == q)&#123;       <span class="comment">// 判断删除元素是否为头</span></span><br><span class="line">            <span class="keyword">return</span> q.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre.next = q.next ;</span><br><span class="line">            <span class="keyword">return</span> head ; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h3&gt;&lt;p&gt;给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。(进阶：你能尝试使用一趟扫描实现吗？)&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
      <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>3. Java控制流程</title>
    <link href="http://example.com/wiki/JavaSE/%E7%AC%AC%E4%B8%89%E7%AB%A0-Java%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/java%20controll%20followe/"/>
    <id>http://example.com/wiki/JavaSE/第三章-Java基本程序结构/java controll followe/</id>
    <published>2021-10-27T03:07:05.097Z</published>
    <updated>2021-10-27T06:48:04.804Z</updated>
    
    <content type="html"><![CDATA[<p>程序的控制流程一般包含，选择结构，循环结构，顺序结构。</p><blockquote><p>顺序结构</p><blockquote><p>顺序结构很简单，程序都具有顺序结构，依次按顺序执行。<br>Java的语法，不允许在嵌套的两个块(块一般是指，通过{}包含的代码区域，称为块)中，声明同名变量。示例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">int</span> n; <span class="comment">// Error can&#x27;t redefine n in inner block</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>选择结构<br>选择结构也就是 if-else结构，通过条件语句来选择需要执行的语句。else与最近的if构成匹配。示例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ifElseTemplemate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span> ,b = <span class="number">2</span> ;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b)</span><br><span class="line">            System.out.println(<span class="string">&quot;a大于b&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(a == b)</span><br><span class="line">                System.out.println(<span class="string">&quot;a 等于 b&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">&quot;a 小于 b&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果有多个选择情况，可以通过Switch-case语句进行实现。代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ifElseTemplemate</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">1</span> ,b = <span class="number">2</span> ;</span><br><span class="line">       <span class="keyword">if</span>(a &gt; b)</span><br><span class="line">           System.out.println(<span class="string">&quot;a大于b&quot;</span>);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">if</span>(a == b)</span><br><span class="line">               System.out.println(<span class="string">&quot;a 等于 b&quot;</span>);</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               System.out.println(<span class="string">&quot;a 小于 b&quot;</span>);</span><br><span class="line">       <span class="keyword">switch</span> (a)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               System.out.println(a);<span class="keyword">break</span> ;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               System.out.println(a);</span><br><span class="line">               <span class="keyword">break</span> ;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               System.out.println(a);<span class="keyword">break</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>switch语句将从与选项值相匹配的case标签处开始执行直到遇到 break 语句，或者执行到switch i吾句的结束处为止。如果没有相匹配的case标签,而有default子句,就执行这个子句。<br>case 标签可以是：</p></blockquote></blockquote><pre><code>•类型为 char、byte、 short 或 int 的常量表达式。•枚举常量。•从 Java SE 7开始， case 标签还可以是字符串字面量。</code></pre><blockquote><p>循环结构<br>循环执行某个代码块。一般包含for循环和while循环，do-while循环。示例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forWhileStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// 计算1-100的和</span></span><br><span class="line">     <span class="keyword">int</span> sum = <span class="number">0</span> , i = <span class="number">0</span> ;</span><br><span class="line">     <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt;= <span class="number">100</span> ; i++)&#123;</span><br><span class="line">         sum +=i;</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(sum);</span><br><span class="line">     i = <span class="number">0</span> ;</span><br><span class="line">     sum = <span class="number">0</span> ;</span><br><span class="line">     <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">         sum+=i;</span><br><span class="line">         i++;</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(sum);</span><br><span class="line">     i = <span class="number">0</span> ;</span><br><span class="line">     sum = <span class="number">0</span> ;</span><br><span class="line">     <span class="keyword">do</span>&#123;</span><br><span class="line">         sum+=i;</span><br><span class="line">         i++;</span><br><span class="line">     &#125;<span class="keyword">while</span>(i&lt;=<span class="number">100</span>) ;</span><br><span class="line">     System.out.println(sum);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>还有一种循环方式为for-each循环，参考数组的循环。</p></blockquote><p>如果想跳出循环可以使用break;，如果想要跳出某个执行过程可以用continue。Java也支持类似于goto的语法，通过break 标签来结束循环。示例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forWhileStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>   i = <span class="number">0</span>, j  ;</span><br><span class="line">        lables:</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;in&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span> lables;<span class="comment">//跳出指定的循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序的控制流程一般包含，选择结构，循环结构，顺序结构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顺序结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顺序结构很简单，程序都具有顺序结构，依次按顺序执行。&lt;br&gt;Java的语法，不允许在嵌套的两个块(块一般是指，通过{}包含的代码
      
    
    </summary>
    
      <category term="JavaSE" scheme="http://example.com/categories/JavaSE/"/>
    
    
      <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
      <category term="JAVASE" scheme="http://example.com/tags/JAVASE/"/>
    
  </entry>
  
</feed>
